<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TobyShiの博客</title>
  
  <subtitle>TobyShiの博客</subtitle>
  <link href="https://toby-shi-cloud.github.io/atom.xml" rel="self"/>
  
  <link href="https://toby-shi-cloud.github.io/"/>
  <updated>2022-10-15T03:44:35.697Z</updated>
  <id>https://toby-shi-cloud.github.io/</id>
  
  <author>
    <name>TobyShi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从教务网站上获取课表并导入iCloud日历</title>
    <link href="https://toby-shi-cloud.github.io/posts/cdutcmcalendar.html"/>
    <id>https://toby-shi-cloud.github.io/posts/cdutcmcalendar.html</id>
    <published>2022-10-14T20:30:00.000Z</published>
    <updated>2022-10-15T03:44:35.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为我家羽羽说她的课表一天一个样，每次都手动输入到日历中的话非常不方便，所以我打算帮她把课表从教务网站上爬出来，然后写在ics文件中，这样就可以一键导入了。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>打开他们学校的教务网站，我就麻了，因为必须要输入验证码。这对自动化脚本来说是一个非常阴间的事情，所以考虑使用<code>selenium</code>，打开网页后，人工登录，程序检测到网页跳转后开始运行。</p><p>登录完成后就可以看到课表，默认是月课表，所以只需要让脚本自己翻页然后读取网页全部内容即可。通过<code>F12</code>，我们可以看到那些写着有课程信息的元素大致长什么样子，使用正则表达式即可爬取所有课程了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在经历了漫长了写代码过程之后，终于到了运行的时候啦！看到一个程序能跑起来，真的是很开心的一件事！（大家也可以尝试复制下面的<code>代码</code>，自己运行试试看）</p><p>如果读者想要运行以下代码，需要进行下列步骤：</p><ol><li>安装一个Python（这不是废话吗，建议是3.6以上，我自己用的3.10）</li><li>安装<code>icalendar</code>和<code>selenium</code>（在命令行执行<code>pip install xxx</code>）</li><li>如果你使用<code>Chrome</code>浏览器，请下载和你的<code>Chrome</code>匹配的<code>chromedriver</code>（见参考链接6），并为<code>chromedriver</code>添加环境变量，或放在脚本所在目录下。</li><li>如果你不使用<code>Chrome</code>浏览器，请自行搜索<code>selenium</code>如何使用你的浏览器（<code>FireFox</code>，<code>Edge </code>和<code>Safari</code>等主流浏览器都是支持的，如果你使用其他浏览器，也可以尝试，因为它们大概率和<code>Google Chrome</code>使用同样的内核，只不过版本较老）另外，不要忘记更改<code>chrome = Chrome()</code>这条语句。</li><li>在脚本所在目录下打开命令行，输入<code>python xxx</code>即可运行（<code>xxx</code>是你的脚本名，通常你应该让后缀是<code>.py</code>）（通常安装python时会关联文件，所以双击运行也不是不可以）</li><li>日程会储存在<code>cdutcm.ics</code>中，许多日历App都支持<code>.ics</code>格式</li></ol><h2 id="配置更改"><a href="#配置更改" class="headerlink" title="配置更改"></a>配置更改</h2><p>有如下内容可能需要更改：</p><ol><li>如果你不是使用的<code>Chrome</code>，更改<code>chrome = Chrome()</code>（第68行）</li><li>默认只会获取课程，而不会获取考试，若要获取考试请更改正则表达式中的<code>上课任务</code>（第32行）</li><li>默认是秋季学期课表，若要获取春季学期课表，更改<code>while month != '八月'</code>和<code>while month != '二月'</code>，交换<code>八月</code>金和<code>二月</code>的位置大概就可以了（第76和83行）</li><li>更改<code>begin_date = datetime(2022, 8, 29, tzinfo=UTC8)</code>中的<code>2022, 8, 29</code>为本学期开学第一周星期一的时间（第97行）</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> re<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token keyword">import</span> icalendar <span class="token keyword">as</span> ics<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timezone<span class="token punctuation">,</span> timedeltaUTC8 <span class="token operator">=</span> timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_event</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> location<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> dtstart<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> dtend<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> description<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ics<span class="token punctuation">.</span>Event<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    create a single icalendar event        :type of params: any Python native type or icalendar property type.    '''</span>    event <span class="token operator">=</span> ics<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'summary'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dtstart'</span><span class="token punctuation">,</span> dtstart<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dtend'</span><span class="token punctuation">,</span> dtend<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span>    <span class="token keyword">return</span> event<span class="token keyword">def</span> <span class="token function">get_lesson_from_html</span><span class="token punctuation">(</span>begin_date<span class="token punctuation">:</span> datetime<span class="token punctuation">,</span> html<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> begin_week<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    REGEX <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">r'&lt;a class="fc-day-grid-event fc-h-event fc-event fc-start fc-end" lay-tips="'</span>        <span class="token string">r'&lt;table class=&amp;quot;kb-tips&amp;quot; border=&amp;quot;1&amp;quot;&gt;'</span>        <span class="token string">r'&lt;tr&gt;&lt;th&gt;事件类型：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;上课任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'上课时间：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)--(.*?)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学模式：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学形式：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'星期：&lt;/th&gt;&lt;td&gt;(\d*?)&lt;/td&gt;&lt;th&gt;节次：&lt;/th&gt;&lt;td&gt;\d*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;上课周次：&lt;/th&gt;&lt;td &gt;(\d*?)&lt;/td&gt;&lt;th&gt;'</span>        <span class="token string">r'课序号：&lt;/th&gt;&lt;td&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'课程：&lt;/th&gt;&lt;td  colspan=&amp;quot;3&amp;quot;&gt;\[.*?\]\[.*?\](.*?)\[.*?\]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'授课教师：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学场地：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)\(?\)?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'上课班级：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'排课/上课：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'授课内容：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;((.|\n)*?)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" style="background-color: rgb\(\d+, \d+, \d+\);"&gt;'</span>    <span class="token punctuation">)</span>        end_week <span class="token operator">=</span> <span class="token number">0</span>    lessons <span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>REGEX<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>        day <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        week <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> week <span class="token operator">&lt;=</span> begin_week<span class="token punctuation">:</span> <span class="token keyword">continue</span>        end_week <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>end_week<span class="token punctuation">,</span> week<span class="token punctuation">)</span>        today <span class="token operator">=</span> begin_date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span> <span class="token operator">*</span> week <span class="token operator">+</span> day<span class="token punctuation">)</span>        start_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        end_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dtstart <span class="token operator">=</span> today <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dtend <span class="token operator">=</span> today <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        teacher <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        location <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        lessons<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'课程'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span> <span class="token string">'教学场地'</span><span class="token punctuation">:</span>location<span class="token punctuation">,</span> <span class="token string">'开始时间'</span><span class="token punctuation">:</span>dtstart<span class="token punctuation">,</span> <span class="token string">'结束时间'</span><span class="token punctuation">:</span>dtend<span class="token punctuation">,</span> <span class="token string">'教师'</span><span class="token punctuation">:</span>teacher<span class="token punctuation">,</span> <span class="token string">'授课内容'</span><span class="token punctuation">:</span>content<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>lessons<span class="token punctuation">,</span> end_week<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_lesson</span><span class="token punctuation">(</span>begin_date<span class="token punctuation">:</span> datetime<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 第一步获取网页元素</span>    chrome <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://jwweb.cdutcm.edu.cn'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> chrome<span class="token punctuation">.</span>current_url <span class="token operator">!=</span> <span class="token string">'https://jwweb.cdutcm.edu.cn/new/welcome.page'</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 这里需要手动输入账号密码验证码！</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>    iframe <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[3]/div/div/div[2]/div/div/iframe'</span><span class="token punctuation">)</span>    chrome<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>    month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> month <span class="token operator">!=</span> <span class="token string">'八月'</span><span class="token punctuation">:</span>        chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div/button[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>        month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        begin_week <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    lessons <span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> month <span class="token operator">!=</span> <span class="token string">'二月'</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> chrome<span class="token punctuation">.</span>page_source        lessons_gets<span class="token punctuation">,</span> begin_week <span class="token operator">=</span> get_lesson_from_html<span class="token punctuation">(</span>begin_date<span class="token punctuation">,</span> html<span class="token punctuation">,</span> begin_week<span class="token punctuation">)</span>        lessons <span class="token operator">+=</span> lessons_gets        chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div/button[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>        month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> lessons<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    calendar <span class="token operator">=</span> ics<span class="token punctuation">.</span>Calendar<span class="token punctuation">(</span><span class="token punctuation">)</span>    calendar<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'2.0'</span><span class="token punctuation">)</span>        begin_date <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>UTC8<span class="token punctuation">)</span>    lessons <span class="token operator">=</span> get_lesson<span class="token punctuation">(</span>begin_date<span class="token punctuation">)</span>        <span class="token keyword">for</span> lesson <span class="token keyword">in</span> lessons<span class="token punctuation">:</span>        name <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'课程'</span><span class="token punctuation">]</span>        location <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'教学场地'</span><span class="token punctuation">]</span>        dtstart <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'开始时间'</span><span class="token punctuation">]</span>        dtend <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'结束时间'</span><span class="token punctuation">]</span>        description <span class="token operator">=</span> <span class="token string">'教师：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lesson<span class="token punctuation">[</span><span class="token string">'教师'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n\n授课内容：\n'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lesson<span class="token punctuation">[</span><span class="token string">'授课内容'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event <span class="token operator">=</span> create_event<span class="token punctuation">(</span>name<span class="token punctuation">,</span> location<span class="token punctuation">,</span> dtstart<span class="token punctuation">,</span> dtend<span class="token punctuation">,</span> description<span class="token punctuation">)</span>        calendar<span class="token punctuation">.</span>add_component<span class="token punctuation">(</span>event<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cdutcm.ics'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>to_ical<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/u013670453/article/details/114671299">「Selenium」- 在页面中，点击按钮（或元素）</a></li><li><a href="https://blog.csdn.net/asdfgh0077/article/details/104178416">使用Python在Selenium WebDriver中获取WebElement的HTML源代码</a></li><li><a href="https://wnma3mz.github.io/hexo_blog/2020/09/16/ICS%E5%9C%A8%E7%BA%BF%E8%AF%BE%E8%A1%A8%E5%88%B6%E4%BD%9C/">ICS在线课表制作</a></li><li><a href="https://github.com/wnma3mz/Tools/blob/master/others/myics.py">ICS在线课表制作 源码</a></li><li><a href="https://support.apple.com/zh-cn/HT205018">如果意外地从 iCloud 中删除了日历、书签或通讯录</a></li><li><a href="https://blog.csdn.net/zhoukeguai/article/details/113247342">chromedriver下载与安装方法，亲测可用</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CO review：P0</title>
    <link href="https://toby-shi-cloud.github.io/posts/co-p0.html"/>
    <id>https://toby-shi-cloud.github.io/posts/co-p0.html</id>
    <published>2022-10-05T11:05:00.000Z</published>
    <updated>2022-10-14T20:29:12.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="L0-五人投票"><a href="#L0-五人投票" class="headerlink" title="L0 五人投票"></a>L0 五人投票</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>裁判组有一个组长和四个组员（组员编号依次为 <code>2'b00,2'b01,2'b10,2'b11</code>）。<br>每个组员都可以赞成、反对或是弃权。组长还拥有屏蔽投票权：屏蔽一位组员的投票，无论该组员投什么票，都视为弃权。投票的输入信息和输入信号对应如下：</p><table class="toolTable table"><tbody><tr><th>意义</th><th>赞成</th><th>反对</th><th>弃权</th><th>屏蔽投票</th></tr><tr><td>组长</td><td>2'b00</td><td>2'b01</td><td>2'b10</td><td>2'b11</td></tr><tr><td>组员</td><td>2'b00</td><td>2'b01, 2'b11</td><td>2'b10</td><td>-</td></tr></tbody></table><p>当赞成票大于反对票时，表决结果为通过；反之为不通过。</p><h3 id="输入输出描述"><a href="#输入输出描述" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table" style="text-align:center;" <tbody=""><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>LV</td><td>I</td><td>[1:0]</td><td>组长投票</td></tr><tr><td>LI</td><td>I</td><td>[1:0]</td><td>组长屏蔽组员的编号</td></tr><tr><td>T0</td><td>I</td><td>[1:0]</td><td>组员 2'b00 的投票</td></tr><tr><td>T1</td><td>I</td><td>[1:0]</td><td>组员 2'b01 的投票</td></tr><tr><td>T2</td><td>I</td><td>[1:0]</td><td>组员 2'b10 的投票</td></tr><tr><td>T3</td><td>I</td><td>[1:0]</td><td>组员 2'b11 的投票</td></tr><tr><td>O</td><td>O</td><td>-</td><td>表决结果（通过为 1，反之为 0）</td></tr></tbody></table><h3 id="考场思路"><a href="#考场思路" class="headerlink" title="考场思路"></a>考场思路</h3><p>这题几乎就是一个<code>分线器</code>的应用。<br>大概写了 20min 左右。<br>不过呢，为了避免重复四次一样的电路，可以创建一个 circuit 专门用于处理组员投票，注意输入应该是两个，一个投票信号，一个使能端（用于表示组长是否屏蔽了这个人）。</p><h3 id="Bug-分析"><a href="#Bug-分析" class="headerlink" title="Bug 分析"></a>Bug 分析</h3><p>这题又遇到了 logisim 的 bug。有时候连完线发现线红了或者蓝了，还修不好，不过保存后重启解决一切问题。</p><h2 id="L1-文本匹配"><a href="#L1-文本匹配" class="headerlink" title="L1 文本匹配"></a>L1 文本匹配</h2><h3 id="题目概述-1"><a href="#题目概述-1" class="headerlink" title="题目概述"></a>题目概述</h3><p>你需要匹配字符串 0121 和 1210。请使用 Mealy 自动机。<br>输入信号的含义：</p><table class="toolTable table"><tbody><tr><th>2'b00</th><th>2'b01</th><th>2'b10</th><th>2'b11</th></tr><tr><td>0</td><td>1</td><td>2</td><td>不会出现</td></tr></tbody></table><h3 id="输入输出描述-1"><a href="#输入输出描述-1" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table"><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>clk</td><td>I</td><td>-</td><td>时钟信号，在时钟上升沿转移状态</td></tr><tr><td>rst</td><td>I</td><td>-</td><td>异步复位信号</td></tr><tr><td>in</td><td>I</td><td>[1:0]</td><td>当前周期输入</td></tr><tr><td>out</td><td>O</td><td>[1:0]</td><td>0: 无匹配<br>1: 匹配 0121<br>2: 匹配 1210s</td></tr></tbody></table><h3 id="考场思路-1"><a href="#考场思路-1" class="headerlink" title="考场思路"></a>考场思路</h3><p>列出状态转移就可以啦。如下图所示：<br><img src="https://mermaid.ink/img/pako:eNptkjFrwzAQhf-KubHEoKdRQ7107NSOUQZhK60htosjF0rIf88pVqU4nEFgPr177w7dhdqp82ToHFzwb737mt1Q_2o7Vvx1_ezb0E9j9f6xEqWU4WPtaKlpGkv_GIyRMDIGq5HU0AWzGqsaOqvB3sjeqmAwTt6qqNkbyVsV7_3Loarr19ho1t0BX-T0J6BUKkFlKmwhN8RQPSsj1Hl2SQnJM0E8lkMKSjD2WsohpUNKh5QOIR3SmAU-lEOaHdLsGd6DsIVrS3r7NmpTLs2-VWra0eDnwfUdr-4lSiyFbz94S4Z_O390yynEnbiy1C1h-vwbWzJhXvyOlp-uLDuZozud_fUGMpytuQ"></p><ul><li>当 $st=110$ 且 $in=10$ 时，输出 1</li><li>当 $st=011$ 且 $in=00$ 时，输出 2</li><li>其他时候输出 0</li></ul><h3 id="bug-分析"><a href="#bug-分析" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>这个题 WA 了一次，错在串 <code>01210</code>。<br>因为我的 <code>110</code> 在 $in=1$ 时转移去了 <code>001</code> 而不是 <code>011</code>……</p><h2 id="L2-斐波那契数列改"><a href="#L2-斐波那契数列改" class="headerlink" title="L2 斐波那契数列改"></a>L2 斐波那契数列改</h2><h3 id="题目概述-2"><a href="#题目概述-2" class="headerlink" title="题目概述"></a>题目概述</h3><p>数列 ${s_n}$ 定义如下:</p><p>$$<br>s_n =<br>\begin{cases}<br>0 &amp; n=0,2 \\<br>1 &amp; n=1,3 \\<br>s_{n-1} + (s_{n-2} \oplus s_{n-3}) &amp; \text{if $n$ is even} \\<br>(s_{n-1} \oplus s_{n-2}) + s_{n-3} &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p><p>输入 $n$ 输出 $s_n$，时限：64 个周期。</p><h3 id="输入输出描述-2"><a href="#输入输出描述-2" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table"><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>in</td><td>I</td><td>[4:0]</td><td>输入</td></tr><tr><td>out</td><td>O</td><td>[31:0]</td><td>输出</td></tr></tbody></table><h3 id="考场思路-2"><a href="#考场思路-2" class="headerlink" title="考场思路"></a>考场思路</h3><p>同预习的斐波那契数列。<br>就是递推转移啦……<br>不过有人似乎直接打表……</p><h3 id="bug-分析-1"><a href="#bug-分析-1" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>还是要搭建好一会儿的，主要是保存并维持输出，还有计数，以及电路延迟问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>使用junit4对java程序进行测试</title>
    <link href="https://toby-shi-cloud.github.io/posts/junittestforobjectoriented.html"/>
    <id>https://toby-shi-cloud.github.io/posts/junittestforobjectoriented.html</id>
    <published>2022-09-28T17:00:00.000Z</published>
    <updated>2022-10-04T08:57:52.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总所周知测试是写程序必不可少的一项。对于IDEA和java来说，junit测试是一个比较好的选择。</p><h2 id="安装junit"><a href="#安装junit" class="headerlink" title="安装junit"></a>安装junit</h2><p>首先在IDEA上安装junit的插件；</p><p>前往<a href="https://github.com/junit-team/junit4/wiki/Download-and-Install">官方github</a>下载junit；</p><p>在项目结构中添加junit依赖。</p><blockquote><p>具体可以参考：</p><p><a href="https://blog.csdn.net/gakki_200/article/details/106413351">IDEA中添加junit4的三种方法（详细步骤操作）</a></p><p><a href="https://blog.csdn.net/weixin_39595195/article/details/111313679">IDEA中使用JUnit4单元测试</a></p></blockquote><h2 id="使用junit"><a href="#使用junit" class="headerlink" title="使用junit"></a>使用junit</h2><p>junit最基础的使用，<a href="https://blog.csdn.net/weixin_39595195/article/details/111313679">IDEA中使用JUnit4单元测试</a>已经说的十分明白了，而且举的例子也非常出色，我在这里就不加赘述了。</p><p>大概来说，就是新建一个测试类，然后搞明白<code>@Before</code>，<code>@After</code>，<code>@Test</code>，<code>assertEquals</code>的基本意思就行了。</p><h2 id="模拟输入和捕获输出"><a href="#模拟输入和捕获输出" class="headerlink" title="模拟输入和捕获输出"></a>模拟输入和捕获输出</h2><p>上面junit的最基本的用法是测试方法或者类的行为是否正常，但是我们希望junit能够帮助我们测试样例数据，而我们的main方法的交互方式是输入和输出，而不是传参和返回，所以不能直接使用上面的方式。</p><p>因此我们通过输入输出重定向的方式来模拟输入和捕获输出。可以写以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                2021/7/1-Jack@JayChou :"Hello!";2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/5-JayChou@Mike :"emmmm";         2021/7/8-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou:"Hahaha"; 2021/5/3-Mike:"he@buaaer is unhappy";                END_OF_MESSAGE                qdate 2021/7/1                qsend "JayChou"                qrecv "buaaer"                """</span><span class="token punctuation">;</span> <span class="token comment">// 多行字符串，这里填样例输入</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                2021/7/1-Jack@JayChou :"Hello!";                2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/5-JayChou@Mike :"emmmm";                2021/7/8-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou:"Hahaha";                2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou@buaaer :"Hahaha";                2021/5/3-Mike:"he@buaaer is unhappy";                """</span><span class="token punctuation">;</span> <span class="token comment">// 多行字符串，这里填样例输出</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里根据实际情况replace。一般来说是需要replace的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读入以及多组数据"><a href="#文件读入以及多组数据" class="headerlink" title="文件读入以及多组数据"></a>文件读入以及多组数据</h2><p>有的时候，输入输出会特别的长，或者输入输出有很多组，使用上面这个死板的方法就会显得非常臃肿。所以我们需要进行文件读入。</p><h3 id="文件读入"><a href="#文件读入" class="headerlink" title="文件读入"></a>文件读入</h3><p>使用<code>BufferedReader</code>和<code>FileReader</code>可以之间读取一个文件中的全部字符，并将其转化为<code>String</code>，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多组数据"><a href="#多组数据" class="headerlink" title="多组数据"></a>多组数据</h3><p>junit提供了一种运行多组测试的方式：<code>Parameterized</code></p><p>具体来说，就是当你使用<code>@RunWith (Parameterized.class)</code>修饰<code>class</code>时，junit会首先调用被<code>@Parameterized.Parameters</code>修饰的<code>static</code>方法，这个方法必须返回一个<code>Collection</code>。然后junit会遍历这个<code>Collection</code>，把遍历到的值传入<code>class</code>的构造方法中，生成一个测试类的对象。然后再运行<code>@Test</code>方法。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>这里我写了一种文件读入的方法，大家可以直接使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span> <span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublicTest</span> <span class="token comment">// 类名根据需要重构</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">"./test/public_test"</span><span class="token punctuation">;</span> <span class="token comment">// 测试数据目录</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">=</span> <span class="token string">".in"</span><span class="token punctuation">;</span> <span class="token comment">// 测试点输入文件后缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_OUT</span> <span class="token operator">=</span> <span class="token string">".out"</span><span class="token punctuation">;</span> <span class="token comment">// 测试点输出文件后缀</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expectedFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PublicTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileName <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedFileName <span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span> <span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Parameterized.Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fInMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fOutMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> fs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>            <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            suffix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fInMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fOutMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> fInMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> in <span class="token operator">=</span> fInMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> out <span class="token operator">=</span> fOutMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to have a corresponding out file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pair <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> out<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            testData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> testData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下：</p><p><img src="https://s2.loli.net/2022/09/29/cixBL2OV8ApmReu.png"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>注意测试是不能添加到平台上进行评测的（会CE），所以我们必须要采用git多分支的方式进行。</p><p>通常的做法是，我们首先master分支中创建README，然后commit，之后进行<code>git checkout -b develop</code>。一切改动都在<code>develop</code>分支进行。测试无误后，执行<code>git checkout master</code>以及<code>git checkout develop src/*</code>即可提交并推送到远程仓库。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从课程网站上下载数据非常麻烦，所以如果你有一个自动下载脚本的话……</p><hr><h2 id="2022年10月2日-更新"><a href="#2022年10月2日-更新" class="headerlink" title="2022年10月2日 更新"></a>2022年10月2日 更新</h2><p>如果你运行测试出错了却找不到哪个文件出错了的话，可以在80行左右的位置，runTest方法里面，加入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File In: "</span> <span class="token operator">+</span> inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File Ans: "</span> <span class="token operator">+</span> expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以看见读入的文件是哪一个了，如下图所示：</p><p><img src="https://s2.loli.net/2022/10/02/1DXyfgjhkOl8MFH.png"></p><hr><h2 id="2022年10月4日-更新"><a href="#2022年10月4日-更新" class="headerlink" title="2022年10月4日 更新"></a>2022年10月4日 更新</h2><p>之前的测试类只能测试一个文件夹下的数据，不能测试一个文件夹下的子文件夹下的数据，因此做出改进。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span> <span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfiniteTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">"./test"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">=</span> <span class="token string">".in"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_OUT</span> <span class="token operator">=</span> <span class="token string">".out"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expectedFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfiniteTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileName <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedFileName <span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span> <span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The input file is "</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> inputFileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer file is "</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> expectedFileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fInMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fOutMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">assert</span> directory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getFiles</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>            <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            suffix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fInMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fOutMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Parameterized.Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> fInMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> in <span class="token operator">=</span> fInMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> out <span class="token operator">=</span> fOutMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to have a corresponding out file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pair <span class="token operator">=</span> <span class="token punctuation">{</span> in<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            testData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> testData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>复现 A Tutorial on Linear and Differential Cryptanalysis中差分分析的例子</title>
    <link href="https://toby-shi-cloud.github.io/posts/differentialcryptanalysis.html"/>
    <id>https://toby-shi-cloud.github.io/posts/differentialcryptanalysis.html</id>
    <published>2022-09-23T10:30:00.000Z</published>
    <updated>2022-09-23T11:58:12.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>黑历史++<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://s2.loli.net/2022/09/23/uRJw5VFbSkvoGXD.png"></p><h2 id="差分分析"><a href="#差分分析" class="headerlink" title="差分分析"></a>差分分析</h2><p>什么是差分分析呢？其实简单来说，就是考察明文的某一或某些位取反对密文的影响，所以这里的差分，实质就是异或的意思。其实感觉差分分析的过程和线性分析是基本一致的，所以这个博客我就写简单一点，实在记不住了还可以翻阅<a href="https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html">上一篇博客</a>。虽然上一篇也不怎么详细（）</p><h2 id="Sbox拟合"><a href="#Sbox拟合" class="headerlink" title="Sbox拟合"></a>Sbox拟合</h2><p>与线性分析一致，我们不得不对sbox进行拟合。同样的，对于输入的每一种可能的差分，我们穷举所有的输入1（输入2=输入1$\oplus$输入差分）并记录由此带来的输出差分值（输出差分=输出1$\oplus$输出2），计算出输入差分和输出差分对应的概率关系。通过16*16的256次计算，我们就可以整理出一张sbox的拟合表格。</p><h2 id="子密钥分析"><a href="#子密钥分析" class="headerlink" title="子密钥分析"></a>子密钥分析</h2><p>同样的，我们选取概率较大的路径，可以得到明文对的一个差分和一个倒数第二轮输出的差分之间的概率，在论文中，选取的是$\Delta P  = [0000\ 1011\ 0000\ 0000]$和$\Delta U4 = [0000\ 0110\ 0000\ 0110]$，概率是$\frac{27}{1024}=0.0264$。</p><p>同样的我们穷举最后一轮相关联的密钥$k_2$和$k_4$，通过倒推得到$U4$，最后计算出当$\Delta P$成立时$\Delta U4$成立的概率即可。</p><p>由于我们选择的是高概率路径，所以最后成立概率最高的密钥就大概率是我们要找的密钥。</p><h3 id="复现结果"><a href="#复现结果" class="headerlink" title="复现结果"></a>复现结果</h3><p><img src="https://s2.loli.net/2022/09/23/UK4adYCN6ZJyBws.png"></p><p>其中子密钥用16进制表示，x表示未知（即和例子的路径无关）。</p><p>可见$k_2=2$且$k_4=4$的概率远超其他密钥组合，而且概率$0.0272863$与理论$\frac{27}{1024}=0.0264$非常接近。</p><h3 id="复现代码"><a href="#复现代码" class="headerlink" title="复现代码"></a>复现代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"structure.hh"</span></span><span class="token comment">// \delta P  = [0000 1011 0000 0000]</span><span class="token comment">// \delta U4 = [0000 0110 0000 0110]</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNamePlain <span class="token operator">=</span> <span class="token string">"plaintexts.hex"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNameCipher <span class="token operator">=</span> <span class="token string">"ciphertexts.hex"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNameCsv <span class="token operator">=</span> <span class="token string">"diff.csv"</span><span class="token punctuation">;</span>ifstream fp<span class="token punctuation">,</span> fc<span class="token punctuation">;</span>ofstream fcsv<span class="token punctuation">;</span><span class="token keyword">int</span> pcPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// use -1 stands for undefined</span><span class="token keyword">const</span> u16 deltaP <span class="token operator">=</span> <span class="token number">0b0000101100000000</span><span class="token punctuation">;</span><span class="token keyword">const</span> u16 deltaU4 <span class="token operator">=</span> <span class="token number">0b0000011000000110</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">getU4</span><span class="token punctuation">(</span>u16 _C<span class="token punctuation">,</span> u16 key<span class="token punctuation">)</span><span class="token punctuation">{</span>    _C <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>_C<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    _C <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>_C<span class="token punctuation">,</span> SBOX_INV<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNamePlain<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    fc<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNameCipher<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> pcPair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        u16 P<span class="token punctuation">,</span> U<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>P<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>U<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        P <span class="token operator">=</span> P <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> P <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        U <span class="token operator">=</span> U <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> U <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">~</span>pcPair<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">)</span> num<span class="token operator">++</span><span class="token punctuation">;</span>        pcPair<span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token operator">=</span> U<span class="token punctuation">;</span>        <span class="token comment">// cerr &lt;&lt; hex &lt;&lt; P &lt;&lt; "-&gt;" &lt;&lt; U &lt;&lt; endl;</span>        <span class="token comment">// if(num == 100) break;</span>    <span class="token punctuation">}</span>    cerr <span class="token operator">&lt;&lt;</span>  <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 有效明密文对个数（剔除重复）</span>    fp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fcsv<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNameCsv<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    fcsv <span class="token operator">&lt;&lt;</span> <span class="token string">"partial subkey"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"prob"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>u16 k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>u16 k4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k4 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k4<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        u16 key <span class="token operator">=</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> k4<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token generic-function"><span class="token function">i</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token operator">^</span>deltaP<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>i <span class="token operator">^</span> deltaP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// cerr &lt;&lt; (!(pcPair[i] == -1) &amp;&amp; !(pcPair[i^deltaP] == -1)) &lt;&lt; endl;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getU4</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">getU4</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token operator">^</span>deltaP<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> deltaU4<span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> prob <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> sum<span class="token punctuation">;</span>        fcsv <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> k4 <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> prob <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 有效明密文对组的组数（剔除没有配对成组的）</span>    <span class="token punctuation">}</span>    fcsv<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>structure.hh</code>是我自己写的一个头文件，里面是加密解密需要用到的函数以及Sbox和permutation连线的方式。由于加密解密以及分析都需要用到这些函数，所以就放在头文件里面了。</p><p>用cpp的原因是，bluebeen告诉我cpp比python快数十倍……python分析10万组明密文对要1分钟真的难受……</p><p>因为差分分析需要符合要求的明密文对组，即明文需要满足$\Delta P$的那个式子。所以是先把涉及到的明密文对存下来（代码里面是<code>pcPair</code>）然后在进行统计。</p><p>在进行差分分析的复现的时候，我突然想到一个问题，为什么论文上只用了1万对明密文对，而我用了10万对才能找出答案吗？我的复现究竟是出了什么样的问题呢？</p><p>其实在上面的复现代码中，输出<code>num</code>和<code>sum</code>就已经揭晓了答案。根据输出，我的10万对明密文，只有<code>num</code>=5万的有效明密文对，然后再安装$\Delta P$的要求配对后，只有<code>sum</code>=2万组。而论文直接说的就是1万组满足$\Delta P$的明密文组。其实我也就用了两倍的数据而已。所以我的数据看起来比论文中要精确一些，但是也没有精确太多。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]Heys,  Howard M . A Tutorial on Linear and Differential Cryptanalysis[J]. Cryptologia, 2002, 26(3):189-221.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="密码学" scheme="https://toby-shi-cloud.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="密码分析" scheme="https://toby-shi-cloud.github.io/tags/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>复现 A Tutorial on Linear and Differential Cryptanalysis中线性分析的例子</title>
    <link href="https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html"/>
    <id>https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html</id>
    <published>2022-09-14T08:30:00.000Z</published>
    <updated>2022-09-23T11:57:49.044Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这学期选了一门网安的科研课堂。第一节课就给了我一个下马威，直接阅读全英论文。好在我借助翻译读了一遍后，又听教授和同学们讲了一次，总算是把33页论文的第一部分，也就是Linear Cryptanalysis理解完了。</p><p>当然理解归一回事儿，实现是另一回事，所以昨天晚上（也就是9月13日下午），我就把论文中的例子基本复现出来了。</p><h2 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h2><p>什么是分组密码？简而言之就是把数据分组，一组一组的加密。论文中的例子是一个非常简单的分组加密，数据每16bit为一组，采用的是SPN结构（即Substitution-Permutation Network）。这个加密会经过若干轮，每轮有如下步骤：</p><h3 id="Substitution-置换"><a href="#Substitution-置换" class="headerlink" title="Substitution 置换"></a>Substitution 置换</h3><p>我们把16bit数据分成4bit一组，一共4组。将每组的4bit的值传入对应S-box中，S-box也会传出一个4bit的值。每个S-box的逻辑都可以查表得到。通常4个S-box应当不一样，但是作为例子，论文中选取了同样的S-box。其映射表如下：</p><table><thead><tr><th>input</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>output</td><td>E</td><td>4</td><td>D</td><td>1</td><td>2</td><td>F</td><td>B</td><td>8</td><td>3</td><td>A</td><td>6</td><td>C</td><td>5</td><td>9</td><td>0</td><td>7</td></tr></tbody></table><p>上表以16进制数表示4bit的值。</p><h3 id="Permutation-排列"><a href="#Permutation-排列" class="headerlink" title="Permutation 排列"></a>Permutation 排列</h3><p>排列就是一个连线的操作，当然也可以理解为一种映射。本步骤的输出就是输入的一种排列。下表是例子选用的排列：</p><table><thead><tr><th>input</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr></thead><tbody><tr><td>output</td><td>1</td><td>5</td><td>9</td><td>13</td><td>2</td><td>6</td><td>10</td><td>14</td><td>3</td><td>7</td><td>11</td><td>15</td><td>4</td><td>8</td><td>12</td><td>16</td></tr></tbody></table><p>上表中<code>input=3, output=9</code>表示输出中第9比特的值来自输入中第3比特的值。</p><h3 id="Key-Mixing-密钥加密"><a href="#Key-Mixing-密钥加密" class="headerlink" title="Key Mixing 密钥加密"></a>Key Mixing 密钥加密</h3><p>所谓Key Mixing其实异常简单，就是给一个16bit的密钥，然后和16bit的输入进行异或，就得到了16bit的输出。</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>本图是从 A Tutorial on Linear and Differential Cryptanalysis 中摘下来的。</p><p><img src="https://s2.loli.net/2022/09/14/BTviQCeltA48Ezo.png"></p><h2 id="线性分析"><a href="#线性分析" class="headerlink" title="线性分析"></a>线性分析</h2><p>我原以为，我们可以直接从明密文对获取加密信息，并且破译密码。结果，我发现我们能做的不过是在Substitution和Permutation都已知的情况下去推测Subkey的值。但即便如此，也并非易事。</p><h3 id="堆积引理"><a href="#堆积引理" class="headerlink" title="堆积引理"></a>堆积引理</h3><p>$X_1,X_2,\cdots,X_n$是二值分布，在它们相互独立的情况下，若$p_1=\frac12+\epsilon_1,\cdots,p_n=\frac12+\epsilon_n$，则有：<br>$$<br>Pr(X_1 \oplus \cdots \oplus X_n = 0) = \frac12 + 2^{n-1}\prod_{i=1}^{n}\epsilon_i<br>$$<br>或者说：<br>$$<br>\epsilon_{1,2,\cdots,n} = 2^{n-1}\prod_{i=1}^{n}\epsilon_i<br>$$<br>我们称$\epsilon$为<code>bias</code>，偏差，$\epsilon=Pr-\frac12$。</p><h3 id="线性拟合S-box"><a href="#线性拟合S-box" class="headerlink" title="线性拟合S-box"></a>线性拟合S-box</h3><p>由于S-box是整个加密过程中唯一的非线性过程，也是本加密方法的安全性所在。为了破译密码，我们不得不对S-box进行线性拟合。</p><p>假设S-box的输入是$X_1,X_2,X_3,X_4$，输出是$Y_1,Y_2,Y_3,Y_4$，列出一组线性表达式，我们就可以算出输入随机的时候，该线性表达式成立的概率。譬如：$X_2 \oplus X_3 = Y_1 \oplus Y_3 \oplus Y_4$，穷举后可知16个不同输入中有12个使得这个式子成立。则成立概率是$\frac34$，偏差是$\frac14$。</p><h3 id="子密钥分析"><a href="#子密钥分析" class="headerlink" title="子密钥分析"></a>子密钥分析</h3><p>我们选取偏差较大的线性方程，然后模拟该方程所涉及到的输入的加密路劲，沿途应用堆积引理，最终可以得到一个明文和倒数第二轮的输出的一个线性表示的成立的概率的偏差的绝对值。</p><p>然后，穷举最后一个subkey的有涉及的位，根据密文逆推得到倒数第二轮输出，然后和明文一起，记录线性表达式成立的次数。选取很多组明文对（论文是1万组，我实测是10万组才能得到好的结果），计算线性表示成立概率。对于穷举到的每一个subkey，最后偏差绝对值最大的那一个就高概率是密钥，而且这个偏差和线性表达式的偏差的非常接近。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="加密过程复现"><a href="#加密过程复现" class="headerlink" title="加密过程复现"></a>加密过程复现</h3><p>最开始是打算用Python的，后来发现Python位运算并不方便，所以就用C++了。贴个代码吧。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">,</span> u4<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> u16<span class="token punctuation">;</span><span class="token keyword">const</span> u4 sbox<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0xE</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0xD</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token number">0xB</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0xA</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xC</span><span class="token punctuation">,</span>    <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> u4 wire<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">,</span>    <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> u16 KEYS<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0xed52</span><span class="token punctuation">,</span>    <span class="token number">0x3799</span><span class="token punctuation">,</span>    <span class="token number">0xac27</span><span class="token punctuation">,</span>    <span class="token number">0x47fc</span><span class="token punctuation">,</span>    <span class="token number">0x72b4</span><span class="token punctuation">,</span>    <span class="token comment">// 0xacbd, 密钥随便改</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">permutation</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">substitution</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">key_mixing</span><span class="token punctuation">(</span>u16<span class="token punctuation">,</span> u16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">halfWordFunc</span><span class="token punctuation">(</span>u16<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> u16<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"1.data.in"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"1.data.out"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>ch1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ch2 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch2 <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> ch2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        u16 data <span class="token operator">=</span> ch1 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> ch2<span class="token punctuation">;</span> <span class="token comment">// 两个字节16bit为一组</span>        <span class="token function">halfWordFunc</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> KEYS<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch1 <span class="token operator">=</span> data <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        ch2 <span class="token operator">=</span> data <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">substitution</span><span class="token punctuation">(</span>u16 data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> u16 p1 <span class="token operator">=</span> <span class="token number">0xf000</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> <span class="token number">0x0f00</span><span class="token punctuation">,</span> p3 <span class="token operator">=</span> <span class="token number">0x00f0</span><span class="token punctuation">,</span> p4 <span class="token operator">=</span> <span class="token number">0x000f</span><span class="token punctuation">;</span>    u16 d1 <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> p1<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> p2<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span> d3 <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> p3<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span> d4 <span class="token operator">=</span> data <span class="token operator">&amp;</span> p4<span class="token punctuation">;</span>    d1 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>    d2 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d2<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>    d3 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d3<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    d4 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d4<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d1 <span class="token operator">|</span> d2 <span class="token operator">|</span> d3 <span class="token operator">|</span> d4<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">permutation</span><span class="token punctuation">(</span>u16 data<span class="token punctuation">)</span><span class="token punctuation">{</span>    bitset<span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">&gt;</span> bst <span class="token operator">=</span> data<span class="token punctuation">,</span> out<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bst<span class="token punctuation">[</span>wire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>u16<span class="token punctuation">)</span> out<span class="token punctuation">.</span><span class="token function">to_ulong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">key_mixing</span><span class="token punctuation">(</span>u16 data<span class="token punctuation">,</span> u16 key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> data <span class="token operator">^</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">halfWordFunc</span><span class="token punctuation">(</span>u16<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> <span class="token keyword">const</span> u16<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> round<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> round<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">permutation</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>round<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>round<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h3><p>这次用的Python，虽然我还是觉得Python的位运算真的有些别扭……</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token string">'U4,6 ^ U4,8 ^ U4,14 ^ U4,16 ^ P5 ^ P7 ^ P8 = 0'</span>SBOX <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token number">0xE</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0xD</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token number">0xB</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0xA</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xC</span><span class="token punctuation">,</span>    <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span><span class="token punctuation">)</span>WIRE <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">,</span>    <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">,</span><span class="token punctuation">)</span>INV_SBOX <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token number">0xe</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span>    <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">,</span>    <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span>    <span class="token number">0xb</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token string">'明文对个数'</span>DATA_GROUP <span class="token operator">=</span> <span class="token number">100000</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    anlysis <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'partial subkey'</span><span class="token punctuation">,</span> <span class="token string">'|bias|'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># print(anlysis.info())</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.data.in'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>        fe <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.data.out'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>        k2 <span class="token operator">=</span> k <span class="token operator">&gt;&gt;</span> <span class="token number">4</span>        k4 <span class="token operator">=</span> k <span class="token operator">&amp;</span> <span class="token number">0xf</span>        key <span class="token operator">=</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> k4        count_of_equal <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>DATA_GROUP<span class="token punctuation">)</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># print('%X-&gt;%X'%(p,e))</span>            v <span class="token operator">=</span> key <span class="token operator">^</span> e            u2 <span class="token operator">=</span> INV_SBOX<span class="token punctuation">[</span><span class="token punctuation">(</span>v<span class="token operator">&amp;</span><span class="token number">0x0f00</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">]</span>            u4 <span class="token operator">=</span> INV_SBOX<span class="token punctuation">[</span><span class="token punctuation">(</span>v<span class="token operator">&amp;</span><span class="token number">0x000f</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">0</span><span class="token punctuation">]</span>            u_4_6 <span class="token operator">=</span> <span class="token punctuation">(</span>u2 <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>            u_4_8 <span class="token operator">=</span> <span class="token punctuation">(</span>u2 <span class="token operator">&amp;</span> <span class="token number">0b0001</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span>            u_4_14 <span class="token operator">=</span> <span class="token punctuation">(</span>u4 <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>            u_4_16 <span class="token operator">=</span> <span class="token punctuation">(</span>u4 <span class="token operator">&amp;</span> <span class="token number">0b0001</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span>            p_5 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">0x0800</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">11</span>            p_7 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">0x0200</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">9</span>            p_8 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">0x0100</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span>            <span class="token keyword">if</span> u_4_14 <span class="token operator">^</span> u_4_6 <span class="token operator">^</span> u_4_8 <span class="token operator">^</span> u_4_16 <span class="token operator">==</span> p_5 <span class="token operator">^</span> p_7 <span class="token operator">^</span> p_8<span class="token punctuation">:</span>                count_of_equal <span class="token operator">+=</span> <span class="token number">1</span>        anlysis <span class="token operator">=</span> anlysis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'partial subkey'</span><span class="token punctuation">:</span><span class="token string">'%x %x'</span><span class="token operator">%</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span>k4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'|bias|'</span><span class="token punctuation">:</span><span class="token string">'%.04f'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>count_of_equal <span class="token operator">-</span> DATA_GROUP <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> DATA_GROUP<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        fe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    anlysis<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'1.data.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p><img src="https://s2.loli.net/2022/09/14/1NjkxWlZRbOAPgs.png"></p><p>可见第五轮subkey的第5-9bit是0b0010，第13-16bit是0b0100，还是十分准确的，而且bias是0.0308和论文给的理论值$\frac1{32}=0.03125$还是十分接近的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]Heys,  Howard M . A Tutorial on Linear and Differential Cryptanalysis[J]. Cryptologia, 2002, 26(3):189-221.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="密码学" scheme="https://toby-shi-cloud.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="密码分析" scheme="https://toby-shi-cloud.github.io/tags/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用VScode进行Verilog仿真和波形查看</title>
    <link href="https://toby-shi-cloud.github.io/posts/verilogwithvscode.html"/>
    <id>https://toby-shi-cloud.github.io/posts/verilogwithvscode.html</id>
    <published>2022-09-07T07:00:00.000Z</published>
    <updated>2022-09-28T17:14:41.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计组课程官方推荐的Verilog仿真工具是ISE和VCS，评测机使用ISE。</p><p>但是在尝试在win11的wslg上安装ISE后，虽然成功了，但是难用的一批，而且还有bug，仿真总是失败等问题。而课程虚拟机里面的VCS按照课程组提供的方法，又无法生成波形文件，查阅资料后也一筹莫展，弄的我一头雾水。于是开始寻求其他工具。</p><p>在经过不同关键词检索以后，终于看到了本校学长的知乎专栏，推荐了一个VScode上进行Verilog仿真的方法！安装不仅非常简单，而且使用也很简单，爆杀20G的ISE和安装繁琐的VCS！而且是一个开源的，跨平台的软件，简直就是神一般的存在！</p><p>下面的教程参考了<a href="https://zhuanlan.zhihu.com/p/414308549">学长的专栏</a></p><h2 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h2><p>不会吧不会吧，不会有人看这篇文章却没有安装VScode吧。</p><h2 id="安装iVerilog"><a href="#安装iVerilog" class="headerlink" title="安装iVerilog"></a>安装iVerilog</h2><p>iVerilog全称Icarus Verilog，官方下载方式<a href="http://bleyer.org/icarus/">在这里</a></p><p>安装的时候，基本上都可以随意，直接Next都行，不过记得添加PATH。就是一定要勾选“Add executable folders to the user PATH”</p><h2 id="安装VScode插件"><a href="#安装VScode插件" class="headerlink" title="安装VScode插件"></a>安装VScode插件</h2><p>你需要安装以下几个插件：</p><ul><li>Verilog-HDL/SystemVerilog/Bluespec SystemVerilog</li><li>Verilog HDL</li><li>Verilog Snippet</li><li>WaveTrace</li></ul><p>前三个插件，提供代码高亮，代码补全，一键运行等功能。</p><p>第四个插件，提供波形查看。（下载iVerilog的时候应该有下载GTKWave，你也可以用这个软件查看波形）</p><h2 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h2><p>仅需要设置Verilog-HDL/SystemVerilog/Bluespec SystemVerilog插件</p><p>找到插件设置中的Verilog &gt; Linting: Linter</p><p>在下拉菜单中选中iverilog即可</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>写一端.v代码，然后写对应的testbench，然后在testbench里面，点击右上角的绿色的按钮，即可运行。</p><p>若想要生成波形文件，请在testbench中加上以下代码：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">initial</span> <span class="token keyword">begin</span>    <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">"*.vcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// * 是你希望产生的波形文件的名字</span>    <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：你必须在testbench的test运行结束之后，使用<code>$finish;</code>结束代码，否则波形文件不会结束，需要手动前往任务管理器，结束<code>vvp.exe</code>进程。</p><p>最后点开<code>*.vcd</code>文件就可以查看波形了（如果你下载了WaveTrace插件的话）</p><p>testbench怎么写我就不教了吧，下面给一个测试代码吧。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// adder.v</span><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ps<span class="token keyword">module</span> adder <span class="token punctuation">(</span>  <span class="token keyword">input</span> clk<span class="token punctuation">,</span>  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in1<span class="token punctuation">,</span>  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in2<span class="token punctuation">,</span>  <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    out <span class="token operator">&lt;=</span> in1 <span class="token operator">+</span> in2<span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// adder_tb.v</span><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ps<span class="token constant">`include</span> <span class="token string">"adder.v"</span><span class="token keyword">module</span> adder_tb<span class="token punctuation">;</span>  <span class="token comment">// Dump waveform to file (it would be impossible to view wavefrom without</span>  <span class="token comment">// this task)</span>  <span class="token keyword">initial</span> <span class="token keyword">begin</span>      <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">"adder_wave.vcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token comment">// Generate clock</span>  <span class="token keyword">reg</span> clk<span class="token punctuation">;</span>  <span class="token keyword">initial</span> clk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>  <span class="token comment">// Input registers</span>  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> c<span class="token punctuation">;</span>  <span class="token keyword">initial</span> <span class="token keyword">begin</span>    a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    @<span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">32'h631</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">341</span><span class="token punctuation">;</span>    @<span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$display</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">32'o1461</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    @<span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$display</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">#20</span><span class="token punctuation">;</span>    <span class="token comment">// Exit the simulation</span>    <span class="token kernel-function property">$finish</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token comment">// Device under test (our adder)</span>  adder <span class="token function">dut</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">in1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">in2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/414308549">https://zhuanlan.zhihu.com/p/414308549</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
    <category term="VScode" scheme="https://toby-shi-cloud.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>使用Xcode编译Swift App并分发到iPhone或iPad上</title>
    <link href="https://toby-shi-cloud.github.io/posts/swift-xcode-ipa.html"/>
    <id>https://toby-shi-cloud.github.io/posts/swift-xcode-ipa.html</id>
    <published>2022-08-30T06:00:00.000Z</published>
    <updated>2022-08-30T07:16:42.043Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这学期成功选上了Swift程序设计这门课。虽然我还只会写Hello World，但是已经非常好奇如何将自己写的程序放在自己的iPhone中运行了，因此我们今天就来尝试一次。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Mac上的Xcode和iPad上的Playground差距还是有些大的。但是因为我的Mac是虚拟机，运行缓慢，所以我打算现在iPad上编写程序并测试运行。</p><p>由于我对Swift的了解还很少，所以我在网上下载了一个简单的程序作为测试。<a href="https://github.com/DocRace/playgrounds-covid19-dashboard/">测试软件下载链接</a><sup><a href="#toc-heading-4">[1]</a></sup></p><p>下载好后，在iPad的Playground中尝试导入，几乎都失败了。遂怀疑是版本问题。于是准备重新创建项目后复制粘贴源代码。粘贴好后会提示<code>SwiftyJSON</code>和<code>Alamofire</code>找不到，遂前往GitHub搜索，并在Playground的添加Swift软件包中粘贴链接导入软件包即可。<br>省流：链接分别是<code>https://github.com/SwiftyJSON/SwiftyJSON</code>和<code>https://github.com/Alamofire/Alamofire</code></p><p>点击运行，就能看到软件运行成功了。</p><h2 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h2><p>由于iPad的Playground只能将应用发布到App Store，而这个需要用户成为Apple Developer Member，不仅需要验证和审核，还需要688元/年的会费，对学生来说没有必要，邃转向Xcode。</p><p>首先在Playground中将刚刚<del>抄</del>的App导出并存放在iCloud中（存什么地方不重要，方便导入电脑即可，也可以直接AirDrop）。随后打开Mac上的Xcode，打开项目，选择我们刚刚的导出的软件。项目导入后，Xcode会提示正在fetch SwiftyJSON和Alamofire，fetch结束后就可以<code>command+R</code>运行了。可见App在Simulator中运行状态也是正常的。</p><p>之后点击<code>Xcode-Preferences</code>或者使用快捷键<code>command+,</code>打开偏好设置，在Accounts中添加自己的AppleID，添加成功后关闭偏好设置。</p><p>在左侧视图中点击App的名称，选中<code>signing &amp; Capabilities</code>，在Signing栏的Development Team中选中自己AppleID的名字，在Bundle Identifier中填入应用唯一标识符，命名规范一般是<code>com.AppName.DeveloperName</code></p><p>随后鼠标悬停在中间正上方，会出现为什么构建应用程序，选中Any iOS Device，然后点击菜单栏<code>Product-Archive</code>，编译成功后在Finder中打开文件夹，文件夹位置默认在<code>~/Library/Developer/Xcode/Archives</code>下的今天日期文件夹中（可在偏好设置的Location栏更改）。此可以看见一个扩展名为<code>xcarchive</code>的文件即说明编译成功。</p><p>最后，打开终端，cd到<code>.xcarchive</code>文件所在文件夹，输入以下命令：<sup><a href="#toc-heading-4">[2]</a></sup></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcodebuild <span class="token parameter variable">-exportArchive</span> <span class="token parameter variable">-exportOptionsPlist</span> Info.plist <span class="token parameter variable">-archivePath</span> *.xcarchive <span class="token parameter variable">-exportPath</span> myApp.ipa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>Info.plist</code>需要随便准备一个（如果你是直接在Xcode中创建的项目会附赠一个，你在项目文件中找到即可，如果是Playground创建的，则需要借用其他项目的），<code>*.xcarchive</code>为你的应用名称。在看到<code>** EXPORT SUCCEEDED **</code>后说明导出ipa成功。</p><p>会在当前文件夹下产生一个叫做myApp.ipa的文件夹，将其中的myApp.ipa文件拿出来，使用爱思助手就可以直接安装在iPad/iPhone中使用。<sup><a href="#toc-heading-4">[3]</a></sup></p><p>注意：根据Apple官方的规定，免费用户只能将同一个程序分发给至多3个设备，且一次签名最多持续7天。</p><h2 id="参考链接或注释"><a href="#参考链接或注释" class="headerlink" title="参考链接或注释"></a>参考链接或注释</h2><ol><li>参考链接：<a href="https://sspai.com/post/70655">https://sspai.com/post/70655</a></li><li>参考链接：<a href="https://www.jianshu.com/p/0171d6b49771">https://www.jianshu.com/p/0171d6b49771</a></li><li>注释：由于Info.plist不匹配和免费签名的缘故，不能使用iTunes进行安装，只能使用第三方助手</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Swift编程" scheme="https://toby-shi-cloud.github.io/categories/Swift%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Swift" scheme="https://toby-shi-cloud.github.io/tags/Swift/"/>
    
    <category term="Apple" scheme="https://toby-shi-cloud.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>在WSL上安装ISE</title>
    <link href="https://toby-shi-cloud.github.io/posts/install-ise-on-wsl.html"/>
    <id>https://toby-shi-cloud.github.io/posts/install-ise-on-wsl.html</id>
    <published>2022-08-07T18:00:00.000Z</published>
    <updated>2022-09-28T17:15:00.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为我们计组要使用到ISE，但是ISE和win11不相容，所以我就打算在wslg上安装ISE了。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><p>在官网下载<code>Xilinx_ISE_DS_Lin_14.7_1015_1.tar</code>:<a href="https://china.xilinx.com/support/download/index.html/content/xilinx/zh/downloadNav/vivado-design-tools/archive-ise.html">https://china.xilinx.com/support/download/index.html/content/xilinx/zh/downloadNav/vivado-design-tools/archive-ise.html</a></p></li><li><p>将压缩包解压（我是直接在Nautilus中双击解压的）</p></li><li><p><code>cd</code>到解压后的文件夹里面，通过<code>ls</code>可以看到如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span>bin     data  idata  labtools  msg        planahead_wp  webpack  xsetupcommon  edk   ise    lib       planahead  sysgen        xinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果xsetup是可运行的，则直接<code>sudo ./xsetup</code>，否则先<code>sudo chmod +x xsetup</code></p></li><li><p>如果安装报错：</p><p><code>error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file</code></p><p>即缺少<code>libncurses.so.5</code>库文件，可以通过以下指令解决</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apt-file$ <span class="token function">sudo</span> apt-file update$ <span class="token function">sudo</span> apt-file <span class="token function">find</span> libncurses.so.5$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncurses5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装界面是图形界面，按照指引操作即可。全默认就行了，目录就在<code>/opt/</code>，<code>Install cable drivers</code>也不用安装</p></li><li><p>打开终端输入以下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /opt/Xilinx/14.7/ISE_DS$ <span class="token function">ls</span>EDK  ISE  PlanAhead  SysGen  Xilinx.lic  common  settings32.csh  settings32.sh  settings64.csh  settings64.sh$ <span class="token builtin class-name">source</span> settings64.sh<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/common/.settings64.sh /opt/Xilinx/14.7/ISE_DS/common<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/EDK/.settings64.sh /opt/Xilinx/14.7/ISE_DS/EDK<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/PlanAhead/.settings64.sh /opt/Xilinx/14.7/ISE_DS/PlanAhead<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/ISE/.settings64.sh /opt/Xilinx/14.7/ISE_DS/ISE$ ise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果你的Ubuntu是32位的，请选择<code>settings32.sh</code></p><p>至此ISE首次运行成功！</p></li><li><p>打开后会提示没有License，那么我们直接需要在官网先申请到一个免费的License，然后在Help -&gt; Manage Licenses里面Load官网通过邮件发给你的<code>Xilinx.lic</code>即可</p></li><li><p>最后界面如下图：</p><p><img src="https://s2.loli.net/2022/08/08/QbNAiT3snMxW5U6.png"></p></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>注意到每次重启wsl后都必须重新输入第6步的指令非常麻烦，所以已有大佬写了脚本一键运行：</p><ol><li><p>在任何地方新建文件，我选择的是<code>/opt/Xilinx/14.7/ISE_DS/quickstart</code>，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_PRELOAD</span><span class="token operator">=</span>/opt/Xilinx/usb-driver/libusb-driver.so<span class="token assign-left variable">ISE_DS_DIR</span><span class="token operator">=</span>/opt/Xilinx/14.7/ISE_DS<span class="token builtin class-name">unset</span> LD_PRELOAD<span class="token builtin class-name">export</span> <span class="token assign-left variable">gmake</span><span class="token operator">=</span>/usr/bin/make<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$ISE_DS_DIR</span>"</span><span class="token builtin class-name">source</span> <span class="token string">"<span class="token variable">$ISE_DS_DIR</span>"</span>/settings64.sh<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">''</span>  <span class="token comment"># reset locale to English to fix decimal/comma seperation</span><span class="token string">"<span class="token variable">$ISE_DS_DIR</span>"</span>/ISE/bin/lin64/ise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并为脚本添加可执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+x /opt/Xilinx/14.7/ISE_DS/quickstart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>/usr/share/applications</code>新建文件<code>ISE.desktop</code>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">Name</span><span class="token operator">=</span>ISE<span class="token assign-left variable">Exec</span><span class="token operator">=</span>/opt/Xilinx/14.7/ISE_DS/quickstart<span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/Xilinx/14.7/ISE_DS/ISE/data/images/pn-ise.png<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Development<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中Exec指向的就是上一步建立的脚本文件</p></li><li><p>之后可以使用<code>gtk-launch ISE</code>一键打开</p></li><li><p>还可以在Windows桌面创建快捷方式：</p><p>路径写<code>wslg ~ -d Ubuntu20.04 gtk-launch ISE</code></p><p>不过这个其实是会自动添加到开始菜单的</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于ISE安装包巨大，如果保留非常占据空间，所以考虑删掉。但是删掉后并不能真正释放空间，这个时候需要使用磁盘压缩工具对wsl的虚拟磁盘进行压缩，方法如下：</p><p>以管理员身份运行powershell，并输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Windows\System32&gt; wsl <span class="token operator">--</span>shutdown<span class="token function">PS</span> C:\Windows\System32&gt; diskpartDISKPART&gt; <span class="token function">select</span> vdisk file=<span class="token string">"D:\WSL\ext4.vhdx"</span>DISKPART&gt; attach vdisk readonlyDISKPART&gt; compact vdiskDISKPART&gt; detach vdisk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>file=</code>后面是你的wsl虚拟磁盘的位置</p><h2 id="关于驱动"><a href="#关于驱动" class="headerlink" title="关于驱动"></a>关于驱动</h2><p>由于我还没有开始写任何一个测试程序，尚不知驱动是否正常，这里挖一个坑，改日再填。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>缺少libncurses.so.5怎么办：<a href="https://blog.csdn.net/qq_36393978/article/details/110948418">https://blog.csdn.net/qq_36393978/article/details/110948418</a></li><li>Ubuntu安装ISE教程：<a href="https://blog.csdn.net/weixin_43238031/article/details/89022601">https://blog.csdn.net/weixin_43238031/article/details/89022601</a></li><li>Ubuntu安装ISE教程以及快捷启动脚本：<a href="https://blog.csdn.net/ixunmo/article/details/82194896">https://blog.csdn.net/ixunmo/article/details/82194896</a></li><li>释放wsl占用空间：<a href="https://zhuanlan.zhihu.com/p/358528257">https://zhuanlan.zhihu.com/p/358528257</a></li><li>清理wsl磁盘占用：<a href="https://www.cnblogs.com/enrio/p/14222648.html">https://www.cnblogs.com/enrio/p/14222648.html</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
    <category term="wsl" scheme="https://toby-shi-cloud.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>将wsl迁移至D盘</title>
    <link href="https://toby-shi-cloud.github.io/posts/movewsltod.html"/>
    <id>https://toby-shi-cloud.github.io/posts/movewsltod.html</id>
    <published>2022-08-07T15:30:00.000Z</published>
    <updated>2022-09-28T17:14:49.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>因为下学期的计组课程需要用到ISE，然而ISE这样13年的软件和win11自然是不兼容了（经过网上大佬们的各种尝试，最终也只能安装到92%），所以在水群大佬的推荐下，我可以尝试使用WSLG（Windows Subsystem for Linux GUI）来运行ISE，于是我就先安装<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps">官网教程更新了wsl2</a>，这个流程不太难，就不赘述了。</p><p>由于ISE体量巨大，所以不得不将WSL迁移到D盘以防止C盘爆炸。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>迁移WSL需要使用工具<code>LxRunOffline</code></p><p>GitHub网址：<a href="https://github.com/DDoSolitary/LxRunOffline/releases">https://github.com/DDoSolitary/LxRunOffline/releases</a><br>如果迁移中遇到以下错误，则应该改用：<a href="https://ddosolitary-builds.sourceforge.io/LxRunOffline/LxRunOffline-v3.5.0-11-gfdab71a-msvc.zip">https://ddosolitary-builds.sourceforge.io/LxRunOffline/LxRunOffline-v3.5.0-11-gfdab71a-msvc.zip</a></p><pre class="line-numbers language-none"><code class="language-none">[ERROR] Couldn't set the case sensitive attribute of the directory "\\?\C:\Users\toby2\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\".Reason: Indicates that the directory trying to be deleted is not empty.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>注意：建议使用管理员身份运行powershell</p><ol><li><p>查看已安装的子系统</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>LxRunOffline list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看子系统所在目录</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>LxRunOffline <span class="token function">get-dir</span> <span class="token operator">-</span>n <span class="token namespace">[xxx]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>xxx</code>是你在步骤1中查询到的子系统版本</p></li><li><p>迁移系统</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>LxRunOffline <span class="token function">move</span> <span class="token operator">-</span>n <span class="token namespace">[xxx]</span> <span class="token operator">-</span>d <span class="token namespace">[ddd]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>xxx</code>是你在步骤1中查询到的子系统版本</p><p><code>ddd</code>是你期望移动到的路径</p></li><li><p>如果迁移系统中出现以下错误</p><pre class="line-numbers language-none"><code class="language-none">[ERROR] The distro "Ubuntu-20.04" has running processes and can't be operated. "wsl -t &lt;name&gt;" or "wsl --shutdown" might help.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则使用快捷键<code>Win+x</code>再按<code>g</code>打开<code>计算机管理</code>重启服务<code>LxssManager</code>（也可以直接停止服务，迁移结束后再打开）</p></li><li><p>如果迁移后Ubuntu报错“拒绝访问”</p><p>使用下列指定为目录授权</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">icacls <span class="token namespace">[ddd]</span> <span class="token operator">/</span>grant <span class="token string">"[user]:(OI)(CI)(F)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ddd</code>为移动后的路径</p><p><code>user</code>为你的用户名</p><p>授权后建议重启<code>LxssManager</code>服务</p></li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li><p>如果Ubuntu报错“另一个程序正在使用此文件，进程无法访问”</p><p>以管理员身份运行以下指令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Enable-WindowsOptionalFeature</span> <span class="token operator">-</span>Online <span class="token operator">-</span>FeatureName Microsoft-Windows-Subsystem-Linux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按照要求重启电脑</p><p>造成此错误的原因估计为在未开启WSL的情况下使用资源管理器尝试打开WSL的磁盘镜像文件（.vhdx文件）</p></li><li><p>关于wslg的分辨率</p><p>目前wslg似乎只支持整数倍缩放，这非常不友好，但是可以手动启用非整数倍缩放</p><p>在wsl终端输入<code>sudo vi /mnt/c/ProgramData/Microsoft/WSL/.wslgconfig</code>新建一个文件（或者在Windows中找到<code>C:\ProgramData\Microsoft\WSL</code>，并在其中新建文件<code>.wslgconfig</code>），文件内容如下：</p><pre class="line-numbers language-none"><code class="language-none">[system-distro-env]WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后关闭wsl终端，打开powershell，输入<code>wsl --shutdown</code>即可</p><p>只不过150%缩放确实有点糊……</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="wsl" scheme="https://toby-shi-cloud.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>CF R 809 (Div.2) 题解</title>
    <link href="https://toby-shi-cloud.github.io/posts/codeforcesr809.html"/>
    <id>https://toby-shi-cloud.github.io/posts/codeforcesr809.html</id>
    <published>2022-07-20T12:00:00.000Z</published>
    <updated>2022-07-21T16:10:20.663Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><p><a href="https://codeforces.com/contest/1706">试题链接</a></p><p><a href="https://codeforces.com/blog/entry/105008">官方题解</a></p><p>*注意：在本文中，题目大意没有还原题目背景，也没有细节说明，如果您没有看过题目，还请前往<a href="https://codeforces.com/contest/1706">Codeforces官网</a>看</p><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$且只包含$1$和$m$之间的正整数数列$a_1,a_2,\cdots,a_n$，有一个长度为$m$的字符串$s$，初始时串$s$只包含字符<code>B</code></p><p>接下来进行如下$n$次操作：</p><ul><li>在第$i$次操作时$(1\le i \le n)$，你可以选择将$s$串的第$a_i$个字符或者第$(m+1-a_i)$个字符改成<code>A</code>。（注意，你可以对同一个位置进行若干次操作）</li></ul><p>找到$n$次操作后，你能得到的字典序最小的串$s$</p><p>*本题有多组数据$(t\le2000)$，对于每组数据$1\le n,m \le50$</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>签到题。显然数列${a_n}$的顺序与答案没有关系，因此可以考虑贪心，每次操作都优先将靠前的位置换成<code>A</code>，如果靠前的位置已经被更换了，就换另一个，如果两个都被更换过当然这次操作无论如何都没有意义了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> m <span class="token operator">-</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v和m-v+1的操作选择是一样的，所以就取小的存下来</span>            cnt<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 这里我用的桶存ai</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 实际上当i&gt;m/2时cnt[i]就恒为0了</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 优先把靠前的换为A</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>m <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 如果不止1次更换机会，就把靠后的也换掉</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个长度为$n$的数列数列${c_i}$，其值为不超过$n$的正整数。</p><p>现在对每个$c_i$依次进行如下操作：</p><ul><li>对$c_1$，你将它放在$(0,0)$点</li><li>对$c_i(2\le i\le n)$，记$c_{i-1}$放在了$(x,y)$点，则你可以将$c_i$放在$(x+1,y)$或$(x-1,y)$或$(x,y+1)$（但是不能放在$(x,y-1)$）当然前提是这些地方之前没有放置过其他的$c_i$</li></ul><p>若对于某个$(x,y)$和某个$s$，若$(x,y),(x,y+1),\cdots,(x,y+s-1)$被放置了值相同的$c_i$，则定义这些点组成了一个“塔”。定义“塔”的高是$s$，“塔”被放置在了$(x,y)$处，“塔”的颜色为这些相同的$c_i$的值。</p><p>对于每一个不超过$n$的正整数$r$，<strong>独立</strong>的解决如下问题：</p><ul><li>找到你能按规则构造出的，颜色为$r$​的，高度最高的“塔”。</li></ul><p>*本题有多组数据$(t \le 10^4)$，每组数据满足$n \le 10^5$，对于全部数据$\sum n \le 2 \cdot 10^5$</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>注意到题目要求我们<strong>独立</strong>的处理每一个$r$而且只需要找出最高的“塔”，所以我们可以考虑对于固定的$r$，贪心的希望每个$r$都能刚好搭在上一个$r$上。抽象化的，记$c_i=c_j=r(i &lt; j)$，什么情况下$c_i$和$c_j$可以组成一个“塔”呢？</p><p>进过简单的推理可以证明，当且仅当$(j-i)$为奇数时，$c_i$和$c_j$能构成一个“塔”。</p><blockquote><p>必要性证明过程大致如下：</p><p>若$c_i$被放置在$(x,y)$处，则记$Q(c_i)=x+y$</p><p>则根据题意有$Q(c_{i+1})=x+y\pm1$，即$Q(c_{i+1}) \equiv Q(c_i) + 1 \ (mod\ 2)$</p><p>所以$Q(c_j) \equiv Q(c_i) + j - i \ (mod \ 2)$</p><p>因为$c_j$和$c_i$构成“塔”，所以$Q(c_j)-Q(c_i)=1$</p><p>于是有$j-i \equiv 1 \ (mod \ 2)$，即$(j-i)$是奇数</p><p>充分性证明略，因为只需要给出一个简单的构造，这里就留给读者吧~</p></blockquote><p>那么当$(j-i)$是偶数的时候会发生什么情况呢？由于$c_i$下面可能已经成塔了，但是$c_j$并没有，所以当出现$c_k=r$而且$(k-i)$是奇数时（此时显然$(k-j)$也是奇数）将$c_k$放在$c_i$的上面为“塔”填一层楼是更优的。</p><p>因此本题只需要记录第一个$c_i=r$的$i$值，然后之后一旦碰见$c_j=c_i$而且$(j-i)$是奇数时就<code>ans++</code>即可。</p><p>最后可以看出，对于不同的$r$，我们可以同时进行计算，至此本题解决。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                cnt<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的正整数列${h_i}$，你可以花费代价增大其中的值，每花费$1$点代价可以将一个$h_i$增大$1$。</p><p>描述$h_i$是“好看的”，当且仅当$i\neq 1$且$i\neq n$且$h_i &gt; h_{i-1}$且$h_i &gt; h_{i+1}$。</p><p>要求在保证整个数列“好看的”$h_i$最多的情况下花费的最小代价。</p><p>*本题有多组数据$(t \le 10^4)$，对于每组数据$3 \le n \le 10^5$，$h_i \le 10^9$，对于全部数据$\sum n \le 2 \cdot 10^5$</p><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>首先肯定要考虑如何让“好看的”$h_i$最多。根据题意，“好看的”$h_i$无法连续出现，也不能出现在收尾，所以必然可以使得而且最多只能使得$\lfloor\frac{n-1}{2}\rfloor$个$h_i$成为“好看的”。而且当$n$是奇数时很容易解决，因为必然得是所有的$h_{2i}$都是“好看的”。所以接下来重点讨论当$n$是偶数的情况。</p><p>可以注意到，$n$是偶数时，必然存在一个$k$，使得$i&lt;k$时，当$i$是偶数时$h_i$是“好看的”，当$i&gt;k$时，当$i$是奇数时$h_i$是“好看的”。于是，我们可以考虑进行dp。</p><p>设<code>dp[i]</code>使得$h_i$是好看的前提下，保证前$i$个$h_i$中的“看好的”数最多，需要的最少花费，那么最终答案就是<code>min(dp[n-2],dp[n-1])</code>。下面考虑如何转移。进过我们之前的讨论，可以知道，当$i$是偶数时，前面一个好看的数必然是偶数，当$i$是奇数时则既可能是奇数有可能是偶数，于是转移方程如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// w就是变成“好看的”的代价</span><span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">;</span><span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后需要注意一点，本题需要开<code>long long</code></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的正整数列${a_n}$以及正整数$k$，寻找一个长度为$n$，值不超过$k$的正整数列${p_n}$，使得下面这个式子的值最小<br>$$<br>\max_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)-\min_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)<br>$$<br>最后题目只要求输出上面这个式子可能的最小值，不需要输出对应${p_n}$</p><p>*本题分为D1和D2，仅仅是数据范围不同</p><p>*D1范围：有多组数据$(t \le 100)$，对于每组数据$n,k,a_n \le 3000$，且保证${a_n}$单调不减，且对于全部数据$\sum n \le 3000$</p><p>*D2范围：有多组数据$(t \le 100)$，对于每组数据$n,k,a_n \le 10^5$，且保证${a_n}$单调不减，且对于全部数据$\sum n \le 10^5$</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析 1"></a>解析 1</h3><p>先考虑D1怎么做，这里根据范围可以猜想存在$O(n^2)$的做法可以通过D1。显然遍历所有的${p_n}$是非常不现实的，因为复杂度将达到$O(k^n)$，十分恐怖。</p><p>观察要求的式子，如果我们令$M=\max_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)$以及$m=\min_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)$，则我们可以考虑遍历$M$（从$a_n$遍历到$\lfloor\frac{a_n}{k}\rfloor$），然后对于每个$M$尽可能的选取较大的$m$即可。具体做法如下：</p><p>对于固定$M$和每一个$a_i$，为了使得$m$最大，则必须让每个$\lfloor\frac{a_i}{p_i}\rfloor$尽量大，即$p_i$尽量小，即有$\lfloor\frac{a_i}{p_i}\rfloor \le M$但是$\lfloor\frac{a_i}{p_i-1}\rfloor &gt; M$，如果记$a_i = kM + r(0\le r &lt; M)$可以解出$p_i = k (0 \le r &lt; k)$或者$p_i = k + 1 (k \le r &lt; M)$。借此我们就可以以$O(n^2)$的复杂度过D1。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3e3</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">/</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_val <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span> max_val <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> max_val<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> min_val <span class="token operator">=</span> inf<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> max_val<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> p <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> <span class="token punctuation">{</span> min_val <span class="token operator">=</span> inf<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min_val <span class="token operator">&lt;=</span> max_val<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析2"><a href="#解析2" class="headerlink" title="解析2"></a>解析2</h3><p>沿用D1的思路，但是我们希望可以在$O(log n)$的复杂度内找出给定$M$情况下的最大$m$。</p><p>要做到这一点，我们要先回过头来看看式子，$\lfloor\frac{a_i}{p_i}\rfloor \le M$但是$\lfloor\frac{a_i}{p_i-1}\rfloor &gt; M$，但是这次我们不解出$p_i$而是反而解出$a_i$，于是有$(M+1)(p_i-1)\le a_i &lt; (M+1)p_i$。由于对于相同的$p_i$当然是$a_i$越小才能影响到$m$的值，所以对于每一个$M$，遍历$p$（从1开始直到$(p+1)\cdot(M+1)&gt;a_n$为止），然后对于每一个$p$，可以用二分的方式（因为$a_n$有序）找到第一个不小于$(M+1)(p_i-1)$的$a_i$，用$\lfloor\frac{a_i}{p}\rfloor$更新$m$（取min）。</p><p>于是复杂度来到了$O(\sum\frac{n}{i}log n)$，可以证明$O(\sum\frac{n}{i})=O(nlogn)$所以总的复杂度是$O(nlog^2n)$。但是这个复杂度并不是最优的（虽然对于1e5的数据已经足够了）。我们可以考虑预处理而非每次都二分来寻找$a_i$，这使得复杂度降到$O(nlogn)$。</p><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span> max_val<span class="token punctuation">,</span> min_val<span class="token punctuation">;</span><span class="token keyword">int</span> great_min<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">// 去重，显然重复的ai对本题无影响，当然这个语句本来也不是必须的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>            great_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 预处理，即great_min[x]表示不小于x的最小的ai</span>        <span class="token punctuation">}</span>        max_val <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min_val <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>max_val <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> k<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>max_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 这里i其实是遍历的(p-1)</span>            <span class="token punctuation">{</span>                min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span> great_min<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token punctuation">(</span>max_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">)</span><span class="token punctuation">;</span>            max_val<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个$n$个点$m$条边的无向无权连通图，点编号从1到n，边编号从1到m。</p><p>给出$q$次询问，每次询问包括两个正整数$l$和$r$。你需要找到你一个最小的满足下列要求的$k$：</p><ul><li>对任何满足$l \le a \le b \le r$的点对$(a,b)$，点$a$和点$b$可以只使用前$k$条边（即编号从1到k的边）的情况下连通</li></ul><p>*本题有多组数据$(t \le 1000)$，对每个数据$n\le10^5$，$m,q\le2\cdot10^5$，对全部数据$\sum n\le10^5$，$\sum m,\sum q\le2\cdot10^5$</p><h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><p>本题第一眼看的时候有一种二分答案+可持续化并查集的感觉。然而可惜的是，每次询问不是检查两个点是否连通，而是检查一个区间是否连通。那么提到区间，就可以想到一种做法是倍增。而且我们惊人的发现两个区间的合并是如此的简单，只要有公共点，两个区间合并就是对$k$取max。于是问题转化为如何求得每两个相邻点的$k$。</p><p>转化到这个地步了，当然可以直接二份答案+可持续化并查集，可是复杂度将来到3个log，而且写起来还很麻烦，根本用不着。于是考虑只使用普通的并查集，而且不用路径压缩，而是改为启发式合并的并查集，这样做的好处就是每加一条边的时候，都只检查小集合里面的所有点有没有和相邻的点相连。复杂度是$O(nlogn)$。</p><p>于是本题总复杂度为$O(nlogn+nlogn+qlogn)$即$O((n+q)logn)$</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_pow2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">,</span> <span class="token number">65536</span><span class="token punctuation">,</span> <span class="token number">131072</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> forest<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">c_log2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>c_pow2<span class="token punctuation">,</span> c_pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> c_pow2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fa_v <span class="token operator">=</span> fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fa<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> n <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fa<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> pk<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token operator">+</span>c_pow2<span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pk <span class="token operator">=</span> <span class="token function">c_log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>r<span class="token operator">-</span>c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛" scheme="https://toby-shi-cloud.github.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="Codeforces" scheme="https://toby-shi-cloud.github.io/tags/Codeforces/"/>
    
    <category term="算法" scheme="https://toby-shi-cloud.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学生评教自动化脚本</title>
    <link href="https://toby-shi-cloud.github.io/posts/evaluation-automation-script.html"/>
    <id>https://toby-shi-cloud.github.io/posts/evaluation-automation-script.html</id>
    <published>2022-07-04T13:00:00.000Z</published>
    <updated>2022-07-28T16:18:36.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">javascript</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token function">ttj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    firrr<span class="token operator">=</span>window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>    firrr<span class="token punctuation">.</span><span class="token function-variable function">alert</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    firrr<span class="token punctuation">.</span><span class="token function-variable function">confirm</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token operator">=</span>firrr<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name^=tabmapzb]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">=</span>firrr<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> selections <span class="token operator">=</span> firrr<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> selections<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        selections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    firrr<span class="token punctuation">.</span><span class="token function">tj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>firrr<span class="token operator">=</span>window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"firrr.$.onload = ttj()"</span><span class="token punctuation">,</span><span class="token number">1400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>登录<a href="http://jwxt.buaa.edu.cn:8080/ieas2.1">教务系统</a></li><li>请勿更改主题设置</li><li>在“教学评价”中找到“学生评教”</li><li>点击“开始评教”，进入下面这个界面<img src="https://s2.loli.net/2022/07/04/WhLMwfmr4j9qpyO.png"></li><li>按F12打开控制台，并找到Console或者“控制台”</li><li>在控制台中粘贴代码并回车运行</li><li>评教全部完成后刷新网页即可</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在附上一个可以提前下载课表的神奇代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#iframename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"#xnxq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"2022秋季"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发现目标，正在等待下载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ele<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>selectedIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯2022决赛参赛记录</title>
    <link href="https://toby-shi-cloud.github.io/posts/lanqiaocup2022final.html"/>
    <id>https://toby-shi-cloud.github.io/posts/lanqiaocup2022final.html</id>
    <published>2022-06-18T13:50:00.000Z</published>
    <updated>2022-06-19T10:24:26.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="A-题：小蓝与钥匙"><a href="#A-题：小蓝与钥匙" class="headerlink" title="A 题：小蓝与钥匙"></a>A 题：小蓝与钥匙</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝是幼儿园的老师，他的班上有 28 个孩子，今天他和孩子们一起进行了一个游戏。</p><p>小蓝所在的学校是寄宿制学校，28 个孩子分别有一个自己的房间，每个房间对应一把钥匙，每把钥匙只能打开自己的门。现在小蓝让这 28 个孩子分别将自己宿舍的钥匙上交，再把这 28 把钥匙随机打乱分给每个孩子一把钥匙，有$28! = 28\times27\times \cdots \times1 $种分配方案。小蓝想知道这些方案中，有多少种方案恰有一半的孩子被分到自己房间的钥匙（即有 14 个孩子分到的是自己房间的钥匙，有 14 个孩子分到的不是自己房间的钥匙）。</p></blockquote><h2 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h2><blockquote><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><h2 id="考场思路"><a href="#考场思路" class="headerlink" title="考场思路"></a>考场思路</h2><p>显然这个题分为两步，一是有14个同学分到了自己的钥匙，二是剩下的14个同学都没有分到自己的钥匙，记方案数为$Q$，则有：<br>$$<br>Q = C_{28}^{14} \cdot D_{14}<br>$$<br>其中$D_{14}$为14的全错位排列。全错位排列也称“欧拉装错信箱问题”，其计算可用容斥原理，公式如下：<br>$$<br>D_n = \sum_{i=0}^{n} (-1)^i \cdot C_n^i \cdot (n-i)!<br>$$<br>或者：<br>$$<br>D_n = n! \cdot \sum_{i=0}^{n} \frac{(-1)^i}{i!}<br>$$<br>于是有方案数$Q=1,286,583,532,342,313,400$</p><h1 id="B-题：排列距离"><a href="#B-题：排列距离" class="headerlink" title="B 题：排列距离"></a>B 题：排列距离</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝最近迷上了全排列，现在他有一个长度为 17 的排列，里面包含的元素有：abcdefghijklnopqr，即 a 至 r 中除了 m 以外的所有小写字母，这 17个字母在任何一个排列中都恰好出现一次。前面几个排列依次是：</p><ul><li><p>第 1 个排列为：abcdefghijklnopqr；</p></li><li><p>第 2 个排列为：abcdefghijklnoprq；</p></li><li><p>第 3 个排列为：abcdefghijklnoqpr；</p></li><li><p>第 4 个排列为：abcdefghijklnoqrp；</p></li><li><p>第 5 个排列为：abcdefghijklnorpq；</p></li><li><p>第 6 个排列为：abcdefghijklnorqp；</p></li><li><p>第 7 个排列为：abcdefghijklnpoqr；</p></li><li><p>第 8 个排列为：abcdefghijklnporq；</p></li><li><p>第 9 个排列为：abcdefghijklnpqor；</p></li><li><p>第 10 个排列为：abcdefghijklnpqro。</p></li></ul><p>对于一个排列，有两种转移操作：<br>1）转移到其下一个排列。如果当前排列已经是最后一个排列，那么下一个排列就是第一个排列。<br>2）转移到其上一个排列。如果当前排列是第一个排列，那么上一个排列就是最后一个排列。<br>小蓝现在有两个排列，分别为排列 A：aejcldbhpiogfqnkr，以及排列B：ncfjboqiealhkrpgd，他现在想知道，在只有上述两种转移操作的前提下，排列 A 最少转移多少次能得到排列 B。</p></blockquote><h2 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h2><blockquote><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><h2 id="考场思路-1"><a href="#考场思路-1" class="headerlink" title="考场思路"></a>考场思路</h2><p>显然只要知道了排列A和排列B分别是第几个排列就可以了。</p><p>因此我们使用康托展开（Cantor expansion）就可以了。若记排列$\lambda$为$a_1,a_2,a_3,\dots,a_n$，则有：<br>$$<br>X_{\lambda} = q_1 \cdot (n-1)! + q_2 \cdot (n-2)! + \cdots + q_n \cdot 0!<br>$$<br>其中$q_i$表示$a_i$在$a_i,a_{i+1},\dots,a_n$中是第$q_i$小的数，则$X_\lambda$表示排列$\lambda$是第$X_\lambda$个排列。（注：这里第几小的数和第几个排列都从0开始标号，计算会比较方便）</p><p>最后我的结果是：排列A的编号是$4,542,892,071,974$，排列B的编号是$254,081,962,595,831$，最终答案取$min{X_A - X_B + 19!, X_B - X_A} = 106,148,357,572,143$即可。</p><h1 id="C-题：内存空间"><a href="#C-题：内存空间" class="headerlink" title="C 题：内存空间"></a>C 题：内存空间</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝最近总喜欢计算自己的代码中定义的变量占用了多少内存空间。</p><p>为了简化问题，变量的类型只有以下三种：<br>int：整型变量，一个 int 型变量占用 4 Byte 的内存空间。<br>long：长整型变量，一个 long 型变量占用 8 Byte 的内存空间。<br>String：字符串变量，占用空间和字符串长度有关，设字符串长度为 L，则字符串占用 L Byte 的内存空间，如果字符串长度为 0 则占用 0 Byte 的内存空间。</p><p>定义变量的语句只有两种形式，第一种形式为：<br><code>type var1=value1,var2=value2...;</code><br>定义了若干个 type 类型变量 var1、var2、…，并且用 value1、value2…初始化，<br>多个变量之间用’,’ 分隔，语句以’;’ 结尾，type 可能是 int、long 或 String。例如 int a=1,b=5,c=6; 占用空间为 12 Byte；long a=1,b=5; 占用空间为 16 Byte；String s1=””,s2=”hello”,s3=”world”; 占用空间为 10 Byte。</p><p>第二种形式为：<br><code>type[] arr1=new type[size1],arr2=new type[size2]...;</code><br>定义了若干 type 类型的一维数组变量 arr1、arr2…，且数组的大小为size1、size2…，多个变量之间用’,’ 进行分隔，语句以’;’ 结尾，type 只可能是 int 或 long。例如 int[] a1=new int[10]; 占用的内存空间为 40Byte；long[] a1=new long[10],a2=new long[10]; 占用的内存空间为160 Byte。</p><p>已知小蓝有 T 条定义变量的语句，请你帮他统计下一共占用了多少内存空间。结果的表示方式为：<code>aGBbMBcKBdB</code>，其中 a、b、c、d 为统计的结果，GB、MB、KB、B 为单位。优先用大的单位来表示，1GB=1024MB，1MB=1024KB，1KB=1024B，其中 B 表示 Byte。如果 a、b、c、d 中的某几个数字为 0，那么不必输出这几个数字及其单位。题目保证一行中只有一句定义变量的语句，且每条语句都满足题干中描述的定义格式，所有的变量名都是合法的且均不重复。题目中的数据很规整，和上述给出的例子类似，除了类型后面有一个空格，以及定义数组时 new 后面的一个空格之外，不会出现多余的空格。</p></blockquote><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含一个整数 T ，表示有 T 句变量定义的语句。<br>接下来 T 行，每行包含一句变量定义语句。</p></blockquote><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个字符串，表示所有语句所占用空间的总大小。</p></blockquote><h2 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th align="left">样例输入</th><th align="left">样例输出</th></tr></thead><tbody><tr><td align="left">1<br>long[] nums=new long[131072];</td><td align="left">1MB</td></tr><tr><td align="left">4<br>int a=0,b=0;<br>long x=0,y=0;<br>String s1=”hello”,s2=”world”;<br>long[] arr1=new long[100000],arr2=new long[100000];</td><td align="left">1MB538KB546B</td></tr></tbody></table><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><blockquote><p>样例 1，占用的空间为 131072 × 8 = 1048576 B，换算过后正好是 1MB，其它三个单位 GB、KB、B 前面的数字都为 0 ，所以不用输出。</p><p>样例 2，占用的空间为 4 × 2 + 8 × 2 + 10 + 8 × 100000 × 2 B，换算后是1MB538KB546B。</p></blockquote><h2 id="规模与约定"><a href="#规模与约定" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于所有评测用例，1 ≤ T ≤ 10，每条变量定义语句的长度不会超过 1000。所有的变量名称长度不会超过 10，且都由小写字母和数字组成。对于整型变量，初始化的值均是在其表示范围内的十进制整数，初始化的值不会是变量。对于 String 类型的变量，初始化的内容长度不会超过 50，且内容仅包含小写字母和数字，初始化的值不会是变量。对于数组类型变量，数组的长度为一个整数，范围为：$[0, 2^{30}]$，数组的长度不会是变量。T 条语句定义的变量所占的内存空间总大小不会超过 1 GB，且大于 0 B。</p></blockquote><h2 id="考场思路-2"><a href="#考场思路-2" class="headerlink" title="考场思路"></a>考场思路</h2><p>这个题，怎么说呢，几乎就是纯模拟吧大概。</p><p>首先每行的首个字符串就是类型说明，然后对于不同的类型找不同的符号就可以了。</p><p>比如int和long型，就找有多少个“,”；数组就找“int[”和“long[”；字符串就找“””就可以了。</p><p>部分代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">','</span> <span class="token operator">||</span> <span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">';'</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_int_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// const char* lst = str + strlen(str);</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"int["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token number">4</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_long</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">','</span> <span class="token operator">||</span> <span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">';'</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_long_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// const char* lst = str + strlen(str);</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"long["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token number">8</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// const char* lst = str + strlen(str);</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'\"'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// fprintf("tmp=%s\n",tmp);</span>        tmp <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">!=</span> <span class="token char">'\"'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="D-题：最大公约数"><a href="#D-题：最大公约数" class="headerlink" title="D 题：最大公约数"></a>D 题：最大公约数</h1><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给定一个数组，每次操作可以选择数组中任意两个相邻的元素 x, y 并将其中的一个元素替换为 gcd(x, y) ，其中 gcd(x, y) 表示 x 和 y 的最大公约数。</p><p>请问最少需要多少次操作才能让整个数组只含 1 。</p></blockquote><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含一个整数 n ，表示数组长度。</p><p>第二行包含 n 个整数 a1, a2, · · · , an，相邻两个整数之间用一个空格分隔。</p></blockquote><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个整数，表示最少操作次数。如果无论怎么操作都无法满足要求，输出 −1。</p></blockquote><h2 id="测试样例-1"><a href="#测试样例-1" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>3<br>4 6 9</td><td>4</td></tr></tbody></table><h2 id="规模与约定-1"><a href="#规模与约定-1" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 30% 的评测用例，$n ≤ 500 ，a_i ≤ 1000$；<br>对于 50% 的评测用例，$n ≤ 5000 ，a_i ≤ 10^6$；<br>对于所有评测用例，$1 ≤ n ≤ 100000 ，1 ≤ a_i ≤ 10^9$。</p></blockquote><h2 id="考场思路-3"><a href="#考场思路-3" class="headerlink" title="考场思路"></a>考场思路</h2><p>可以发现，如果数列中有一个数为1，那么问题就很好解决了：答案即为非1的个数。</p><p>因此本题的关键在于如何最快的弄出一个1。</p><p>由于题目只允许相邻的两个数取gcd，所以如果找到连续k个数gcd为1的话，就可以用k-1次操作把其中一个数换为1，因此答案为：n+k-2。（当然，如果这n个数的gcd为非1，就直接输出-1即可）</p><p>于是问题化为如何找到这个最小的k。</p><p>稍微暴力的做法是，首先求两个两个的gcd，然后求三个三个的gcd（可以发现，三个数的gcd就是相邻两个gcd的gcd），依次下去，每次gcd的数目减小1，于是时间复杂度是$O(\sum_{i=1}^n i)$即$O(n^2)$（由于$a_i$并不大，所以gcd的复杂度（不超过$O(5 \lg n)$，大约就是10倍左右）就忽略了）实现大致如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">focus_solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n<span class="token operator">--</span><span class="token punctuation">;</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于100%的数据，我使用了倍增+二分，复杂度大概是$O(40nlogn)$（倍数是gcd的复杂度），复杂度上肯定是没有问题的。大致的想法就是先预处理出从数量任意一个数起，2的整次幂个数的gcd，这里复杂度就是$O(20nlogn)$。然后对上面说的k进行二分（k最大取n），每次check遍历起点，然后用预处理的数据计算出k个数的gcd，也是$O(20nlogn)$。代码大致如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> pow2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">8192</span><span class="token punctuation">,</span><span class="token number">16384</span><span class="token punctuation">,</span><span class="token number">32768</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">,</span><span class="token number">131072</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> logval <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>pow2<span class="token punctuation">,</span> pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> pow2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// logval = log2(x)向下取整-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> _g <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>_gcd_2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>logval<span class="token punctuation">]</span><span class="token punctuation">,</span> _gcd_2<span class="token punctuation">[</span>r<span class="token operator">-</span>pow2<span class="token punctuation">[</span>logval<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>logval<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// _gcd_2就是预处理数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_g <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max_log <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>pow2<span class="token punctuation">,</span> pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> pow2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> max_log<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>pow2<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>_gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _gcd_2<span class="token punctuation">[</span>i<span class="token operator">+</span>pow2<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>L <span class="token operator">!=</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> R <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> R <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> L <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n <span class="token operator">+</span> L <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="E-题：owo"><a href="#E-题：owo" class="headerlink" title="E 题：owo"></a>E 题：owo</h1><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝很喜欢 owo ，他现在有一些字符串，他想将这些字符串拼接起来，使得最终得到的字符串中出现尽可能多的 owo 。</p><p>在计算数量时，允许字符重叠，即 owowo 计算为 2 个，owowowo 计算为3 个。</p><p>请算出最优情况下得到的字符串中有多少个 owo。</p></blockquote><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含一个整数 n ，表示小蓝拥有的字符串的数量。<br>接下来 n 行，每行包含一个由小写英文字母组成的字符串 si 。</p></blockquote><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出 n 行，每行包含一个整数，表示前 i 个字符串在最优拼接方案中可以得到的 owo 的数量。</p></blockquote><h2 id="测试样例-2"><a href="#测试样例-2" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>3<br>owo<br>w<br>ow</td><td>1<br>1<br>2</td></tr></tbody></table><h2 id="规模与约定-2"><a href="#规模与约定-2" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 10% 的评测用例，$n ≤ 10$；<br>对于 40% 的评测用例，$n ≤ 300$；<br>对于 60% 的评测用例，$n ≤ 5000$；<br>对于所有评测用例，$1 ≤ n ≤ 10^6 ，1 ≤ |s_i| ，\sum|s_i| ≤ 10^6$，其中 $|s_i|$表示字符串$s_i$的长度。</p></blockquote><h2 id="考场思路-4"><a href="#考场思路-4" class="headerlink" title="考场思路"></a>考场思路</h2><p>首先肯定要能计算出每个字符串内部的owo的个数，当然这个是比较好计算的，用kmp或者直接用两个flag就能搞定。</p><p>其实是最重要的，要考虑拼接，不过好在这个owo很短，可用的拼接方式并不多，大致应该只有如下三种：</p><ul><li>以ow结尾+以o开头</li><li>以o结尾+以wo开头</li><li>以o结尾+单独一个字母w+以o开头</li></ul><p>因此我们就统计上面这些可以拼接的字符串的数量就可以了。但是需要注意的是，如果一个字符串既以ow结尾又以o开头，虽然都要计数，但是不能自己和自己拼接在一起，不仅如此，字符串也不能拼接成环。但是这个我在考试的时候想的不多，就没有考虑完全，大概是寄了，因此就不放代码了，如何实现就留给读者思考吧。</p><h1 id="F-题：环境治理"><a href="#F-题：环境治理" class="headerlink" title="F 题：环境治理"></a>F 题：环境治理</h1><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>LQ 国拥有 n 个城市，从 0 到 n − 1 编号，这 n 个城市两两之间都有且仅有一条双向道路连接，这意味着任意两个城市之间都是可达的。每条道路都有一个属性 D ，表示这条道路的灰尘度。当从一个城市 A 前往另一个城市 B 时，可能存在多条路线，每条路线的灰尘度定义为这条路线所经过的所有道路的灰尘度之和，LQ 国的人都很讨厌灰尘，所以他们总会优先选择灰尘度最小的路线。</p><p>LQ 国很看重居民的出行环境，他们用一个指标 P 来衡量 LQ 国的出行环境，P 定义为：<br>$$<br>P = \sum_{i=0}^{n-1}\sum_{j=0}^{n-1}d(i,j)<br>$$<br>其中 d(i, j) 表示城市 i 到城市 j 之间灰尘度最小的路线对应的灰尘度的值。</p><p>为了改善出行环境，每个城市都要有所作为，当某个城市进行道路改善时，会将与这个城市直接相连的所有道路的灰尘度都减少 1，但每条道路都有一个灰尘度的下限值 L，当灰尘度达到道路的下限值时，无论再怎么改善，道路的灰尘度也不会再减小了。</p><p>具体的计划是这样的：<br>第 1 天，0 号城市对与其直接相连的道路环境进行改善；<br>第 2 天，1 号城市对与其直接相连的道路环境进行改善；<br>…<br>第 n 天，n − 1 号城市对与其直接相连的道路环境进行改善；<br>第 n + 1 天，0 号城市对与其直接相连的道路环境进行改善；<br>第 n + 2 天，1 号城市对与其直接相连的道路环境进行改善；<br>…</p><p>LQ 国想要使得 P 指标满足 P ≤ Q。请问最少要经过多少天之后，P 指标可以满足 P ≤ Q。如果在初始时就已经满足条件，则输出 0 ；如果永远不可能满足，则输出 −1。</p></blockquote><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含两个整数$n, Q$，用一个空格分隔，分别表示城市个数和期望达到的$P$指标。</p><p>接下来$n$行，每行包含$n$个整数，相邻两个整数之间用一个空格分隔，其中第$i$行第$j$列的值$D_{ij}$ $(D_{ij} = D_{ji}, D_{ii} = 0)$表示城市$i$与城市$j$之间直接相连的那条道路的灰尘度。</p><p>接下来$n$行，每行包含$n$个整数，相邻两个整数之间用一个空格分隔，其中第$i$行第$j$列的值$L_{ij}$ $(L_{ij} = L_{ji}, L_{ii} = 0)$表示城市$i$与城市$j$之间直接相连的那条道路的灰尘度的下限值。</p></blockquote><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个整数表示答案。</p></blockquote><h2 id="测试样例-3"><a href="#测试样例-3" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>3 10<br>0 2 4<br>2 0 1<br>4 1 0<br>0 2 2<br>2 0 0<br>2 0 0</td><td>2</td></tr></tbody></table><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><blockquote><p>初始时的图如下所示，每条边上的数字表示这条道路的灰尘度：<br><img src="https://s2.loli.net/2022/06/19/wDqNgLBJd9fFKmH.png"><br>此时每对顶点之间的灰尘度最小的路线对应的灰尘度为：<br>$$<br>d(0, 0) = 0, d(0, 1) = 2, d(0, 2) = 3, \<br>d(1, 0) = 2, d(1, 1) = 0, d(1, 2) = 1, \<br>d(2, 0) = 3, d(2, 1) = 1, d(2, 2) = 0.<br>$$<br>初始时的 P 指标为 (2 + 3 + 1) × 2 = 12，不满足 P ≤ Q = 10；<br>第一天，0 号城市进行道路改善，改善后的图示如下：<br><img src="https://s2.loli.net/2022/06/19/ars39hq7ef68Kg1.png"><br>注意到边 (0, 2) 的值减小了 1 ，但 (0, 1) 并没有减小，因为 L0,1 = 2 ，所以<br>(0, 1) 的值不可以再减小了。此时每对顶点之间的灰尘度最小的路线对应的灰尘<br>度为：<br>$$<br>d(0, 0) = 0, d(0, 1) = 2, d(0, 2) = 3, \<br>d(1, 0) = 2, d(1, 1) = 0, d(1, 2) = 1, \<br>d(2, 0) = 3, d(2, 1) = 1, d(2, 2) = 0.<br>$$<br>此时 P 仍为 12。<br>第二天，1 号城市进行道路改善，改善后的图示如下：<br><img src="https://s2.loli.net/2022/06/19/ftncCIoLR38XSWN.png"><br>此时每对顶点之间的灰尘度最小的路线对应的灰尘度为：<br>$$<br>d(0, 0) = 0, d(0, 1) = 2, d(0, 2) = 2, \<br>d(1, 0) = 2, d(1, 1) = 0, d(1, 2) = 0, \<br>d(2, 0) = 2, d(2, 1) = 0, d(2, 2) = 0.<br>$$<br>此时的 P 指标为 (2 + 2) × 2 = 8 &lt; Q ，此时已经满足条件。<br>所以答案是 2。</p></blockquote><h2 id="规模与约定-3"><a href="#规模与约定-3" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 30% 的评测用例，$1 ≤ n ≤ 10 ，0 ≤ L_{ij} ≤ D_{ij} ≤ 10$；<br>对于 60% 的评测用例，$1 ≤ n ≤ 50 ，0 ≤ L_{ij} ≤ D_{ij} ≤ 100000$；<br>对于所有评测用例，$1 ≤ n ≤ 100 ，0 ≤ L_{ij} ≤ D_{ij} ≤ 100000 ，0 ≤ Q ≤ 2^{31} − 1$。</p></blockquote><h2 id="考场思路-5"><a href="#考场思路-5" class="headerlink" title="考场思路"></a>考场思路</h2><p>不得不说这个题长到离谱（其实是样例解释长），所以我最后看的这个题。这个题暴力的话显然就是每天都用Floyd算法求一遍最短路，然后求一遍P就可以了，复杂度上是$O(day \cdot n^3)$，其中Day是需要经历的天数，至于输出-1的情况，完全可以用$L_{ij}$作为边权跑一次Floyd就知道了。问题就是，这个复杂度是无法接受的，甚至连60%的数据都不能通过，只能拿到30%的分。</p><p>这里呢注意到数据规模中$n$是比较小的，但是$D-L$可能是比较大，所以考虑二分答案，理想中复杂度应该是$O(log(\frac12n(D-L))\cdot n^3)$，这样复杂度的话就很可以接受了。这里二分的话最大的天数应该是$\frac12nD=5e6$。check函数的代码大概如下（复杂度是$O(n^2 + n^3)$）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> turn <span class="token operator">=</span> day <span class="token operator">/</span> n<span class="token punctuation">;</span> <span class="token comment">// 每一轮，每条道路灰尘度下降2</span>    day <span class="token operator">%=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> turn<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 如果这一轮城市i还进行了清理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 如果这一轮城市j还进行了清理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 注意灰尘度是有下限的</span>        <span class="token punctuation">}</span>    <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> P <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            P <span class="token operator">+=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>P <span class="token operator">&lt;=</span> Q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="G-题：选素数"><a href="#G-题：选素数" class="headerlink" title="G 题：选素数"></a>G 题：选素数</h1><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝有一个数 x，每次操作小蓝会选择一个小于 x 的素数 p，然后在 x 成为 p 的倍数前不断将 x 加 1，(如果 x 一开始就是 p 的倍数则 x 不变)。</p><p>小乔看到了小蓝进行了 2 次上述操作后得到的结果 n，他想知道 x 在一开始是多少。如果有多种可能，他想知道 x 一开始最小可以是多少，而如果不存在任何解，说明小乔看错了，此时请输出 −1。</p></blockquote><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入一行包含一个整数 n ，表示经过两次操作后 x 的值。</p></blockquote><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个整数表示 x 的初始值。如果有多个解，输出最小的。如果不存在解，请输出 −1 。</p></blockquote><h2 id="测试样例-4"><a href="#测试样例-4" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>22</td><td>8</td></tr></tbody></table><h2 id="规模与约定-4"><a href="#规模与约定-4" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 60% 的评测用例，$1 ≤ n ≤ 5000$；<br>对于所有评测用例，$1 ≤ n ≤ 10^6$。</p></blockquote><h2 id="考场思路-6"><a href="#考场思路-6" class="headerlink" title="考场思路"></a>考场思路</h2><p>这个题的长度就和前面那个题形成了鲜明的对比<span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。经过一番思考，可以发现，如果数$x=p_1^{k_1}p_2^{k_2}\cdots p_m^{k_m}$且其中$p_1 &lt; p_2 &lt; \cdots &lt; p_m$，则$x$的上一个数可能且只可能位于$[x-p_m+1,x-1]$中，且如果$x$是素数，这上一个数不存在。</p><p>发现这一点之后就可以做了，只需要先把$x$质因数分解，然后找出最大的素因子，得到只经过一轮的数，然后在把所有可能的数都再进行一次操作，就可以得到所有符合要求的原始数了。复杂度应该是$O(\sum_{i=\sqrt n}^{n} \sqrt i)$，不过经过计算可知这个复杂度大约是$O(n^{\frac32})$，其实是过不了全部数据的，但是由于大部分数不是质数，都拥有较小的质因子，所以分解质因数的复杂度应当小于$O(\sqrt x)$，所以我大胆猜测是可以过的。</p><p>考试代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> prime_i<span class="token punctuation">;</span> <span class="token comment">// 显然是没有必要的</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prime_i<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp <span class="token operator">/=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">!=</span> x<span class="token punctuation">)</span> prime_i<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tmp==x说明是x质数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prime_i<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_p <span class="token operator">=</span> prime_i<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> anss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        anss <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>anss<span class="token punctuation">,</span> <span class="token function">solve</span><span class="token punctuation">(</span>x <span class="token operator">-</span> i<span class="token punctuation">,</span> depth<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用unsigned其实就是为了取min方便</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> anss<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数调用<code>solve(n,2)</code>然后把返回值转化为<code>int</code>即可。</p><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1><p>其实剩下的三个题我都不会了……<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛" scheme="https://toby-shi-cloud.github.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="算法" scheme="https://toby-shi-cloud.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="蓝桥杯" scheme="https://toby-shi-cloud.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>【Python】使用socket库实现server-client通讯的联机对战游戏（一）</title>
    <link href="https://toby-shi-cloud.github.io/posts/pythonsocket.html"/>
    <id>https://toby-shi-cloud.github.io/posts/pythonsocket.html</id>
    <published>2022-06-16T13:30:00.000Z</published>
    <updated>2022-06-16T14:59:48.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="socket单对单通讯"><a href="#socket单对单通讯" class="headerlink" title="socket单对单通讯"></a>socket单对单通讯</h1><p>socket是Python内建库之一，用途就是网络通讯。作为实验，我们考虑两个Python程序之间的通讯，一个作为服务器，一个作为客户端，客户端向服务器发送一串字符，服务器收到后将原字符串大写后传回，直到客户端发送空信息，服务器退出。</p><p>服务器端代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span> <span class="token comment"># 这个tuple的第一项是ip地址，第二项是端口</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment"># 定义socket类型，网络通信，TCP</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span> <span class="token comment"># 套接字绑定ip和端口</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 开始监听连接请求</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 接受连接请求，conn是一个新的套接字，addr是客户端地址</span>conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">'Hello from the server!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 发送打招呼信息，并且用utf-8编码</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 接受数据并使用utf-8解码</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span> <span class="token comment"># 如果数据为空就退出</span>        conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 把数据大写后返回</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 如果数据传输出错</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭套接字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span> <span class="token comment"># 服务器ip和端口</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment"># 定义socket类型，网络通信，TCP</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span> <span class="token comment"># 尝试连接服务器</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 如果连接失败socket.socket.connect会抛出错误</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 接受服务器的问候</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'&gt;&gt;&gt; '</span><span class="token punctuation">)</span> <span class="token comment"># 此时用户可以在运行客户端的控制台中输入内容</span>        s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将消息发送</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>            <span class="token keyword">break</span> <span class="token comment"># 如果数据为空就退出</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 接受服务器的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 如果数据传输出错</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭套接字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/16/8S4lKr17fpYLNyw.png" alt="运行结果"></p><h1 id="socketserver多对一通讯"><a href="#socketserver多对一通讯" class="headerlink" title="socketserver多对一通讯"></a>socketserver多对一通讯</h1><p>由于我的目的是打算写一个联机对战游戏，那么一个服务器需要同时和多个（至少是两个）客户端建立连接。一个很容易想到的做法就是服务器多线程。好在Python已经帮我们封装好了多线程和socket库——socketserver库。</p><p>socketserver库的用法和socket几乎一模一样，而且由于只有服务器端需要多线程，所以只需要更改server.py即可。</p><p>下面是server.py的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketserverip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">10888</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 重写RequestHandler中的handle方法用来处理请求</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"conn is :"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>request<span class="token punctuation">)</span>  <span class="token comment"># conn</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"addr is :"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span>  <span class="token comment"># addr</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">'Hello from the server!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment"># 处理方面的逻辑都是一样的</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">break</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disconnected with"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span>        <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span>ip_port<span class="token punctuation">,</span> MyServer<span class="token punctuation">)</span> <span class="token comment"># 建立TCP协议套接字</span>        <span class="token comment"># 使用s.serve_forever()接受无穷次连接（需要按下Ctrl+C中断）</span>    <span class="token comment"># 也可以使用一次s.handle_request()接受一次连接</span>    s<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/16/qGRdK1ui4zof2W5.png" alt="Server服务器结果"></p><p><img src="https://s2.loli.net/2022/06/16/Bk8IOVmco4bUhjX.png" alt="Client客户端结果"></p><h1 id="服务器内部数据传输"><a href="#服务器内部数据传输" class="headerlink" title="服务器内部数据传输"></a>服务器内部数据传输</h1><p>现在我们已经解决了服务器和客户端之间的数据传输问题了，但是这又引入了新的问题：服务器用多线程和客户端交流，但是socketserver封装的太好了，想要直接从外部操作各个线程显然不显示，那么如何进行服务器各个线程之间的交流呢？</p><p>请听下回分解……</p><p><span class="github-emoji"><span>😀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
    <category term="网络" scheme="https://toby-shi-cloud.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="server-client" scheme="https://toby-shi-cloud.github.io/tags/server-client/"/>
    
  </entry>
  
  <entry>
    <title>你好博客！Hello Blog!</title>
    <link href="https://toby-shi-cloud.github.io/posts/helloblog.html"/>
    <id>https://toby-shi-cloud.github.io/posts/helloblog.html</id>
    <published>2022-06-14T11:30:00.000Z</published>
    <updated>2022-07-20T12:03:43.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="01-从零开始搭建属于自己的博客"><a href="#01-从零开始搭建属于自己的博客" class="headerlink" title="01 从零开始搭建属于自己的博客"></a>01 从零开始搭建属于自己的博客</h1><p>具体操作见<a href="https://www.cnblogs.com/huanhao/p/prettykde.html">此博客</a></p><p>不过由于我之前弄过一半，所以这一步的操作就省了，因此这里就不记录了。</p><h1 id="02-选择合适的好看的Theme"><a href="#02-选择合适的好看的Theme" class="headerlink" title="02 选择合适的好看的Theme"></a>02 选择合适的好看的Theme</h1><p>经过许多次试错，最终看到了Luckey大佬的<a href="https://www.bilibili.com/video/BV1aV411k7Yq?share_source=copy_web">视频</a>，十分羡慕，于是clone了他的<a href="http://www.luckyzmj.cn/">博客</a>.</p><h1 id="03-博客个性化"><a href="#03-博客个性化" class="headerlink" title="03 博客个性化"></a>03 博客个性化</h1><p>如果说前面的内容都是跟着教程动动手指就可以完成，那么这一步将会是最大的噩梦。</p><p>其中最大的问题就是：我压根没有学过前端，大佬的博客的复杂程度对于我来说简直难以想象。因此这里要特别感谢<a href="https://github.com/LuckyZmj/LuckyBlog">Luckey大佬的教程</a>以及<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery主题的使用手册</a>，中文文档真的对我这种英语白痴非常友好！</p><p>然后我就开始看着各式各样的文档一通乱改，为了降低改动难度，我就把用不到的功能的入口删掉了，但是如果你手动输入争取的url的话其实依然可以看到Luckey大佬的很多让我大为震撼的功能，想看的朋友可以去他的<a href="http://www.luckyzmj.cn/">博客</a>欣赏欣赏。</p><p>我做的比较到大的改动就是升级了这个Theme使用的<a href="https://fontawesome.com/">fontawesome</a>的版本，不过其实只需要在官网下载一个zip然后把里面的东西全部覆盖到<code>~\themes\matery\source\libs\awesome</code>就可以了。（这样做是因为只有新版才支持B站的图标，不过Gitee的图标仍然木有）</p><p>最后比较遗憾的是，不知道为什么我在“视频”栏中嵌入视频失败了，不知道是不是B站嵌入视频已经失效了。</p><h1 id="04-Markdown公式测试"><a href="#04-Markdown公式测试" class="headerlink" title="04 Markdown公式测试"></a>04 Markdown公式测试</h1><p>$$ S_n = \sum_{i=1}^{n} a_i $$<br>$$ \int \cos(x) dx = \sin(x) $$</p><p>这是行内公式：$\lim_{x\rightarrow 0} \frac{x}{\sin x} = 1$</p><p>经过测试，公式内换行不知道为什么没有得到支持。</p><h1 id="05-在忙了一下午之后"><a href="#05-在忙了一下午之后" class="headerlink" title="05 在忙了一下午之后"></a>05 在忙了一下午之后</h1><p>总之到晚上的时候我就已经开始写这篇HelloBlog了，还是很兴奋的，毕竟从未有过写前端的经历，然后几乎是从零开始学习搭建，所以真的非常感谢大佬们的帮助。因此如果有朝一日，我也有能力以后，也一定会向把知识分享出来，供大家学习和参考。</p><p>无限进步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯2022省赛参赛记录</title>
    <link href="https://toby-shi-cloud.github.io/posts/lanqiaocup2022preliminary.html"/>
    <id>https://toby-shi-cloud.github.io/posts/lanqiaocup2022preliminary.html</id>
    <published>2022-04-09T13:00:00.000Z</published>
    <updated>2022-11-08T10:04:46.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第十三届蓝桥杯大赛软件赛省赛C-x2F-C-大学-A-组"><a href="#第十三届蓝桥杯大赛软件赛省赛C-x2F-C-大学-A-组" class="headerlink" title="第十三届蓝桥杯大赛软件赛省赛C/C++ 大学 A 组"></a>第十三届蓝桥杯大赛软件赛省赛C/C++ 大学 A 组</h1><h3 id="本文其他链接"><a href="#本文其他链接" class="headerlink" title="本文其他链接"></a>本文其他链接</h3><p><a href="https://blog.csdn.net/ToAchieveMyDream/article/details/124067956">CSDN</a></p><h3 id="纪念我参加的第一次蓝桥杯"><a href="#纪念我参加的第一次蓝桥杯" class="headerlink" title="纪念我参加的第一次蓝桥杯"></a>纪念我参加的第一次蓝桥杯</h3><blockquote><p>2022年4月9日 9:00 - 13:00<br>这次蓝桥杯因为疫情，在线上举行  </p><p>听学长学姐们说蓝桥杯又叫“送钱杯”，省一有手就行<br>那我就在这里先求一个省一吧！<br>2k 奖学金！求求了！</p></blockquote><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>因为鄙人才学不高，所以这份题解中的解法难免有纰漏之处，还望各路神犇指出，鄙人将感激不尽。</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://pan.baidu.com/s/1XXhdX5x6rntecZ2SFMtmGg?pwd=fl6d">题目pdf</a></p><h2 id="试题A-裁纸刀"><a href="#试题A-裁纸刀" class="headerlink" title="试题A: 裁纸刀"></a>试题A: 裁纸刀</h2><h3 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h3><p>考虑记忆化搜索。<br><del>后来听说怎么剪都是一样的？？？</del><br>记<code>int mem[n][m]</code>为有$n$行$m$列个二维码时，需要剪多少次（不考虑边框）<br>于是递归公式为<br>$$<br>mem[n][m] = \min(\min_{1 \leq i \leq n-1}(mem[i][m]+mem[n-i][m]+1), \min_{1 \leq i \leq m-1}(mem[n][i]+mem[n][m-i]+1))<br>$$<br>最后答案是 $mem[20][22] + 4 = 443$</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> mem<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mem<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mem<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r1 <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        r1 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> <span class="token function">cut</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cut</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r2 <span class="token operator">=</span> inf<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        r2 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>r2<span class="token punctuation">,</span> <span class="token function">cut</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cut</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">-</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mem<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="试题B-灭鼠先锋"><a href="#试题B-灭鼠先锋" class="headerlink" title="试题B: 灭鼠先锋"></a>试题B: 灭鼠先锋</h2><h3 id="我的思路-1"><a href="#我的思路-1" class="headerlink" title="我的思路"></a>我的思路</h3><p>这应该就是一个普通的0/1博弈（这个博弈的名字似乎叫sg博弈）<br>状态一共就$2^8$种，一点也不多。<br>最后答案应该是<code>LLLV</code></p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">rev</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> f<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>st <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rev</span><span class="token punctuation">(</span>st <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>st <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rev</span><span class="token punctuation">(</span>st <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">[</span><span class="token number">0xff</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//这里取负是因为，先手已经下过了，所以就后手赢先手就输，后手输先手就赢</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token number">0b10000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token number">0b11000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token number">0b01000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token number">0b01100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="试题C-求和"><a href="#试题C-求和" class="headerlink" title="试题C: 求和"></a>试题C: 求和</h2><h3 id="我的思路-2"><a href="#我的思路-2" class="headerlink" title="我的思路"></a>我的思路</h3><p>签到题，预处理sum就可以了（而且这题还良心的不会爆long long），复杂度$O(n)$</p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> sum_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        sum_ <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum_ <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="试题D-选数异或"><a href="#试题D-选数异或" class="headerlink" title="试题D: 选数异或"></a>试题D: 选数异或</h2><h3 id="我的思路-3"><a href="#我的思路-3" class="headerlink" title="我的思路"></a>我的思路</h3><p>这个题考场上想了好久好久，最后居然还是只写了一个$O(n^2m)$的暴力，只能得2分，我人傻了  </p><p>之后突然发现可以离线……<br>于是对每个询问的r排序，这个题就解决了</p><p>具体来说，就是开一个<code>map&lt;int,int&gt; mp</code>来存数字x出现的最晚的位置（由于$a_i\leq 2^{20}$所以直接开数组也可以）<br>再令<code>int near</code>为最近的可以满足要求的位置，初始化为0<br>然后从0开始遍历整个数列，每次遍历时更新<code>near = max(near, mp[a[i]^x])</code>，然后更新<code>mp[a[i]] = i</code>，然后处理所有<code>r == i</code>的询问，使得他们的答案<code>ans = (l &gt;= near)</code></p><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">yesno</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"yes\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"no\n"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Ques</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> id<span class="token punctuation">;</span>    <span class="token keyword">bool</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp_1</span><span class="token punctuation">(</span><span class="token keyword">const</span> Ques<span class="token operator">&amp;</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> Ques<span class="token operator">&amp;</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp_2</span><span class="token punctuation">(</span><span class="token keyword">const</span> Ques<span class="token operator">&amp;</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> Ques<span class="token operator">&amp;</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token operator">+</span>m<span class="token punctuation">,</span> cmp_1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> near <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptr <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            near <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>near<span class="token punctuation">,</span> mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">^</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">;</span>            ptr<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span>near <span class="token operator">&gt;=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token operator">+</span>m<span class="token punctuation">,</span> cmp_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">yesno</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="试题E-爬树的甲壳虫"><a href="#试题E-爬树的甲壳虫" class="headerlink" title="试题E: 爬树的甲壳虫"></a>试题E: 爬树的甲壳虫</h2><h3 id="我的思路-4"><a href="#我的思路-4" class="headerlink" title="我的思路"></a>我的思路</h3><p>期望dp<br>其实也不是dp<br>就是一个单纯的递推式：<br>$$E(k) = P(k)*E(0) + (1-P(k))*E(k+1) + 1$$<br>显然要逆向计算。<br>注意到逆向计算时E(0)是未知的，但是始终只会出现一次项<br>不妨直接开一个结构体（或者pair）来表示期望，结构体中就存两个数：<br>一个是E(0)的系数，还有一个是常数<br>最后就递推得到关于E(0)的一个一次方程，就能求出E(0)了</p><p>另外就是常规的小费马定理求分数取模</p><h3 id="我的代码-4"><a href="#我的代码-4" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> modp <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">qpow</span><span class="token punctuation">(</span><span class="token keyword">int</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> base <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token function">qpow</span><span class="token punctuation">(</span>base <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> base <span class="token operator">%</span> modp<span class="token punctuation">,</span> exp <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">qpow</span><span class="token punctuation">(</span>base <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> base <span class="token operator">%</span> modp<span class="token punctuation">,</span> exp <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> P<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ANS</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">,</span> t<span class="token punctuation">;</span> <span class="token comment">// r是系数，t是常数；为什么用这两个字母？我乱选的</span>    <span class="token function">ANS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">ANS</span><span class="token punctuation">(</span><span class="token keyword">int</span> _r<span class="token punctuation">,</span> <span class="token keyword">int</span> _t<span class="token punctuation">)</span> <span class="token punctuation">{</span> r <span class="token operator">=</span> _r<span class="token punctuation">;</span> t <span class="token operator">=</span> _t<span class="token punctuation">;</span> <span class="token punctuation">}</span>    ANS <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> ot<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ANS</span><span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> ot <span class="token operator">%</span> modp<span class="token punctuation">,</span> t <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> ot <span class="token operator">%</span> modp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ANS <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ANS <span class="token operator">&amp;</span>ot<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ANS</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">+</span> ot<span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">,</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> ot<span class="token punctuation">.</span>t<span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token function">qpow</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> modp <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ANS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ANS</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> ans<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> P<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> modp<span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ANS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>t <span class="token operator">*</span> <span class="token number">1ll</span> <span class="token operator">*</span> <span class="token function">qpow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> modp<span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">,</span> modp <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> modp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="试题F-青蛙过河"><a href="#试题F-青蛙过河" class="headerlink" title="试题F: 青蛙过河"></a>试题F: 青蛙过河</h2><h3 id="我的思路-5"><a href="#我的思路-5" class="headerlink" title="我的思路"></a>我的思路</h3><p>显然二分答案，关键是怎么进行check<br>这里我是贪心做的，不知道对不对。<br>也就是说每次都尽量往最远的地方跳</p><h3 id="我的代码-5"><a href="#我的代码-5" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> h_copy<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> far <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 用来记录当前可以到达的最远的地方</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 考试的时候没写！我肯定寄了……</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">+</span> y <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        far <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>far<span class="token punctuation">,</span> i <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>far <span class="token operator">&gt;</span> i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>far<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> cnt<span class="token punctuation">[</span>far<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>far<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>far<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                far<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                cnt<span class="token punctuation">[</span>far<span class="token punctuation">]</span> <span class="token operator">-=</span> h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                h_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><pre><code>2022年4月9日 20:55  写这篇题解的时候发现F题忘记初始化肯定寄了，我瞬间裂开，所以后面的题就以后再说吧</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛" scheme="https://toby-shi-cloud.github.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="算法" scheme="https://toby-shi-cloud.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="蓝桥杯" scheme="https://toby-shi-cloud.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
</feed>
