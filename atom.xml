<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TobyShiの博客</title>
  
  <subtitle>TobyShiの博客</subtitle>
  <link href="https://toby-shi-cloud.github.io/atom.xml" rel="self"/>
  
  <link href="https://toby-shi-cloud.github.io/"/>
  <updated>2022-07-21T15:51:10.614Z</updated>
  <id>https://toby-shi-cloud.github.io/</id>
  
  <author>
    <name>TobyShi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF R 809 (Div.2) 题解</title>
    <link href="https://toby-shi-cloud.github.io/posts/codeforcesr809.html"/>
    <id>https://toby-shi-cloud.github.io/posts/codeforcesr809.html</id>
    <published>2022-07-20T12:00:00.000Z</published>
    <updated>2022-07-21T15:51:10.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><p><a href="https://codeforces.com/contest/1706">试题链接</a></p><p><a href="https://codeforces.com/blog/entry/105008">官方题解</a></p><p>*注意：在本文中，题目大意没有还原题目背景，也没有细节说明，如果您没有看过题目，还请前往<a href="https://codeforces.com/contest/1706">Codeforces官网</a>看</p><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$且只包含$1$和$m$之间的正整数数列$a_1,a_2,\cdots,a_n$，有一个长度为$m$的字符串$s$，初始时串$s$只包含字符<code>B</code></p><p>接下来进行如下$n$次操作：</p><ul><li>在第$i$次操作时$(1\le i \le n)$，你可以选择将$s$串的第$a_i$个字符或者第$(m+1-a_i)$个字符改成<code>A</code>。（注意，你可以对同一个位置进行若干次操作）</li></ul><p>找到$n$次操作后，你能得到的字典序最小的串$s$</p><p>*本题有多组数据$(t\le2000)$，对于每组数据$1\le n,m \le50$</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>签到题。显然数列${a_n}$的顺序与答案没有关系，因此可以考虑贪心，每次操作都优先将靠前的位置换成<code>A</code>，如果靠前的位置已经被更换了，就换另一个，如果两个都被更换过当然这次操作无论如何都没有意义了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> m <span class="token operator">-</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v和m-v+1的操作选择是一样的，所以就取小的存下来</span>            cnt<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 这里我用的桶存ai</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 实际上当i&gt;m/2时cnt[i]就恒为0了</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 优先把靠前的换为A</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>m <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 如果不止1次更换机会，就把靠后的也换掉</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个长度为$n$的数列数列${c_i}$，其值为不超过$n$的正整数。</p><p>现在对每个$c_i$依次进行如下操作：</p><ul><li>对$c_1$，你将它放在$(0,0)$点</li><li>对$c_i(2\le i\le n)$，记$c_{i-1}$放在了$(x,y)$点，则你可以将$c_i$放在$(x+1,y)$或$(x-1,y)$或$(x,y+1)$（但是不能放在$(x,y-1)$）当然前提是这些地方之前没有放置过其他的$c_i$</li></ul><p>若对于某个$(x,y)$和某个$s$，若$(x,y),(x,y+1),\cdots,(x,y+s-1)$被放置了值相同的$c_i$，则定义这些点组成了一个“塔”。定义“塔”的高是$s$，“塔”被放置在了$(x,y)$处，“塔”的颜色为这些相同的$c_i$的值。</p><p>对于每一个不超过$n$的正整数$r$，<strong>独立</strong>的解决如下问题：</p><ul><li>找到你能按规则构造出的，颜色为$r$​的，高度最高的“塔”。</li></ul><p>*本题有多组数据$(t \le 10^4)$，每组数据满足$n \le 10^5$，对于全部数据$\sum n \le 2 \cdot 10^5$</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>注意到题目要求我们<strong>独立</strong>的处理每一个$r$而且只需要找出最高的“塔”，所以我们可以考虑对于固定的$r$，贪心的希望每个$r$都能刚好搭在上一个$r$上。抽象化的，记$c_i=c_j=r(i &lt; j)$，什么情况下$c_i$和$c_j$可以组成一个“塔”呢？</p><p>进过简单的推理可以证明，当且仅当$(j-i)$为奇数时，$c_i$和$c_j$能构成一个“塔”。</p><blockquote><p>必要性证明过程大致如下：</p><p>若$c_i$被放置在$(x,y)$处，则记$Q(c_i)=x+y$</p><p>则根据题意有$Q(c_{i+1})=x+y\pm1$，即$Q(c_{i+1}) \equiv Q(c_i) + 1 \ (mod\ 2)$</p><p>所以$Q(c_j) \equiv Q(c_i) + j - i \ (mod \ 2)$</p><p>因为$c_j$和$c_i$构成“塔”，所以$Q(c_j)-Q(c_i)=1$</p><p>于是有$j-i \equiv 1 \ (mod \ 2)$，即$(j-i)$是奇数</p><p>充分性证明略，因为只需要给出一个简单的构造，这里就留给读者吧~</p></blockquote><p>那么当$(j-i)$是偶数的时候会发生什么情况呢？由于$c_i$下面可能已经成塔了，但是$c_j$并没有，所以当出现$c_k=r$而且$(k-i)$是奇数时（此时显然$(k-j)$也是奇数）将$c_k$放在$c_i$的上面为“塔”填一层楼是更优的。</p><p>因此本题只需要记录第一个$c_i=r$的$i$值，然后之后一旦碰见$c_j=c_i$而且$(j-i)$是奇数时就<code>ans++</code>即可。</p><p>最后可以看出，对于不同的$r$，我们可以同时进行计算，至此本题解决。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                cnt<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的正整数列${h_i}$，你可以花费代价增大其中的值，每花费$1$点代价可以将一个$h_i$增大$1$。</p><p>描述$h_i$是“好看的”，当且仅当$i\neq 1$且$i\neq n$且$h_i &gt; h_{i-1}$且$h_i &gt; h_{i+1}$。</p><p>要求在保证整个数列“好看的”$h_i$最多的情况下花费的最小代价。</p><p>*本题有多组数据$(t \le 10^4)$，对于每组数据$3 \le n \le 10^5$，$h_i \le 10^9$，对于全部数据$\sum n \le 2 \cdot 10^5$</p><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>首先肯定要考虑如何让“好看的”$h_i$最多。根据题意，“好看的”$h_i$无法连续出现，也不能出现在收尾，所以必然可以使得而且最多只能使得$\lfloor\frac{n-1}{2}\rfloor$个$h_i$成为“好看的”。而且当$n$是奇数时很容易解决，因为必然得是所有的$h_{2i}$都是“好看的”。所以接下来重点讨论当$n$是偶数的情况。</p><p>可以注意到，$n$是偶数时，必然存在一个$k$，使得$i&lt;k$时，当$i$是偶数时$h_i$是“好看的”，当$i&gt;k$时，当$i$是奇数时$h_i$是“好看的”。于是，我们可以考虑进行dp。</p><p>设<code>dp[i]</code>使得$h_i$是好看的前提下，保证前$i$个$h_i$中的“看好的”数最多，需要的最少花费，那么最终答案就是<code>min(dp[n-2],dp[n-1])</code>。下面考虑如何转移。进过我们之前的讨论，可以知道，当$i$是偶数时，前面一个好看的数必然是偶数，当$i$是奇数时则既可能是奇数有可能是偶数，于是转移方程如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// w就是变成“好看的”的代价</span><span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">;</span><span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后需要注意一点，本题需要开<code>long long</code></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的正整数列${a_n}$以及正整数$k$，寻找一个长度为$n$，值不超过$k$的正整数列${p_n}$，使得下面这个式子的值最小<br>$$<br>\max_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)-\min_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)<br>$$<br>最后题目只要求输出上面这个式子可能的最小值，不需要输出对应${p_n}$</p><p>*本题分为D1和D2，仅仅是数据范围不同</p><p>*D1范围：有多组数据$(t \le 100)$，对于每组数据$n,k,a_n \le 3000$，且保证${a_n}$单调不减，且对于全部数据$\sum n \le 3000$</p><p>*D2范围：有多组数据$(t \le 100)$，对于每组数据$n,k,a_n \le 10^5$，且保证${a_n}$单调不减，且对于全部数据$\sum n \le 10^5$</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析 1"></a>解析 1</h3><p>先考虑D1怎么做，这里根据范围可以猜想存在$O(n^2)$的做法可以通过D1。显然遍历所有的${p_n}$是非常不现实的，因为复杂度将达到$O(k^n)$，十分恐怖。</p><p>观察要求的式子，如果我们令$M=\max_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)$以及$m=\min_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)$，则我们可以考虑遍历$M$（从$a_n$遍历到$\lfloor\frac{a_n}{k}\rfloor$），然后对于每个$M$尽可能的选取较大的$m$即可。具体做法如下：</p><p>对于固定$M$和每一个$a_i$，为了使得$m$最大，则必须让每个$\lfloor\frac{a_i}{p_i}\rfloor$尽量大，即$p_i$尽量小，即有$\lfloor\frac{a_i}{p_i}\rfloor \le M$但是$\lfloor\frac{a_i}{p_i-1}\rfloor &gt; M$，如果记$a_i = kM + r(0\le r &lt; M)$可以解出$p_i = k (0 \le r &lt; k)$或者$p_i = k + 1 (k \le r &lt; M)$。借此我们就可以以$O(n^2)$的复杂度过D1。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3e3</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">/</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_val <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span> max_val <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> max_val<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> min_val <span class="token operator">=</span> inf<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> max_val<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> p <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> <span class="token punctuation">{</span> min_val <span class="token operator">=</span> inf<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min_val <span class="token operator">&lt;=</span> max_val<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析2"><a href="#解析2" class="headerlink" title="解析2"></a>解析2</h3><p>沿用D1的思路，但是我们希望可以在$O(log n)$的复杂度内找出给定$M$情况下的最大$m$。</p><p>要做到这一点，我们要先回过头来看看式子，$\lfloor\frac{a_i}{p_i}\rfloor \le M$但是$\lfloor\frac{a_i}{p_i-1}\rfloor &gt; M$，但是这次我们不解出了$p_i$而是反而解出$a_i$，于是有$(M+1)(p_i-1)\le a_i &lt; (M+1)p_i$。由于对于相同的$p_i$当然是$a_i$越小才能影响到$m$的值，所以对于每一个$M$，遍历$p$（从1开始直到$(p+1)\cdot(M+1)&gt;a_n$为止），然后对于每一个$p$，可以用二分的方式（因为$a_n$有序）找到第一个不小于$(M+1)(p_i-1)$的$a_i$，用$\lfloor\frac{a_i}{p}\rfloor$更新$m$（取min）。</p><p>于是复杂度来到了$O(\sum\frac{n}{i}log n)$，可以证明$O(\sum\frac{n}{i})=O(nlogn)$所以总的复杂度是$O(nlog^2n)$。但是这个复杂度并不是最优的（虽然对于1e5的数据已经足够了）。我们可以考虑预处理而非每次都二分来寻找$a_i$，这使得复杂度降到$O(nlogn)$。</p><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span> max_val<span class="token punctuation">,</span> min_val<span class="token punctuation">;</span><span class="token keyword">int</span> great_min<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">// 去重，显然重复的ai对本题无影响，当然这个语句本来也不是必须的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>            great_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 预处理，即great_min[x]表示不小于x的最小的ai</span>        <span class="token punctuation">}</span>        max_val <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min_val <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>max_val <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> k<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>max_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 这里i其实是遍历的(p-1)</span>            <span class="token punctuation">{</span>                min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span> great_min<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token punctuation">(</span>max_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">)</span><span class="token punctuation">;</span>            max_val<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个$n$个点$m$条边的无向无权连通图，点编号从1到n，边编号从1到m。</p><p>给出$q$次询问，每次询问包括两个正整数$l$和$r$。你需要找到你一个最小的满足下列要求的$k$：</p><ul><li>对任何满足$l \le a \le b \le r$的点对$(a,b)$，点$a$和点$b$可以只使用前$k$条边（即编号从1到k的边）的情况下连通</li></ul><p>*本题有多组数据$(t \le 1000)$，对每个数据$n\le10^5$，$m,q\le2\cdot10^5$，对全部数据$\sum n\le10^5$，$\sum m,\sum q\le2\cdot10^5$</p><h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><p>本题第一眼看的时候有一种二分答案+可持续化并查集的感觉。然而可惜的是，每次询问不是检查两个点是否连通，而是检查一个区间是否连通。那么提到区间，就可以想到一种做法是倍增。而且我们惊人的发现两个区间的合并是如此的简单，只要有公共点，两个区间合并就是对$k$取max。于是问题转化为如何求得每两个相邻点的$k$。</p><p>转化到这个地步了，当然可以直接二份答案+可持续化并查集，可是复杂度将来到3个log，而且写起来还很麻烦，根本用不着。于是考虑只使用普通的并查集，而且不用路径压缩，而是改为启发式合并的并查集，这样做的好处就是每加一条边的时候，都只检查小集合里面的所有点有没有和相邻的点相连。复杂度是$O(nlogn)$。</p><p>于是本题总复杂度为$O(nlogn+nlogn+qlogn)$即$O((n+q)logn)$</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">debug</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_pow2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">,</span> <span class="token number">65536</span><span class="token punctuation">,</span> <span class="token number">131072</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> forest<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">c_log2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>c_pow2<span class="token punctuation">,</span> c_pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> c_pow2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fa_v <span class="token operator">=</span> fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fa<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> n <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fa<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> pk<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token operator">+</span>c_pow2<span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pk <span class="token operator">=</span> <span class="token function">c_log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>r<span class="token operator">-</span>c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛" scheme="https://toby-shi-cloud.github.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="算法" scheme="https://toby-shi-cloud.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Codeforces" scheme="https://toby-shi-cloud.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>学生评教自动化脚本</title>
    <link href="https://toby-shi-cloud.github.io/posts/evaluation-automation-script.html"/>
    <id>https://toby-shi-cloud.github.io/posts/evaluation-automation-script.html</id>
    <published>2022-07-04T13:00:00.000Z</published>
    <updated>2022-07-04T13:26:26.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">javascript</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token function">ttj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    firrr<span class="token operator">=</span>window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>    firrr<span class="token punctuation">.</span><span class="token function-variable function">alert</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    firrr<span class="token punctuation">.</span><span class="token function-variable function">confirm</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token operator">=</span>firrr<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name^=tabmapzb]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">=</span>firrr<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span.yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> selections <span class="token operator">=</span> firrr<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> selections<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        selections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    firrr<span class="token punctuation">.</span><span class="token function">tj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>firrr<span class="token operator">=</span>window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"firrr.$.onload = ttj()"</span><span class="token punctuation">,</span><span class="token number">1400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>登录<a href="http://jwxt.buaa.edu.cn:8080/ieas2.1">教务系统</a></li><li>请勿更改主题设置</li><li>在“教学评价”中找到“学生评教”</li><li>点击“开始评教”，进入下面这个界面<img src="https://s2.loli.net/2022/07/04/WhLMwfmr4j9qpyO.png"></li><li>按F12打开控制台，并找到Console或者“控制台”</li><li>在控制台中粘贴代码并回车运行</li><li>评教全部完成后刷新网页即可</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯2022决赛参赛记录</title>
    <link href="https://toby-shi-cloud.github.io/posts/lanqiaocup2022final.html"/>
    <id>https://toby-shi-cloud.github.io/posts/lanqiaocup2022final.html</id>
    <published>2022-06-18T13:50:00.000Z</published>
    <updated>2022-06-19T10:24:26.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="A-题：小蓝与钥匙"><a href="#A-题：小蓝与钥匙" class="headerlink" title="A 题：小蓝与钥匙"></a>A 题：小蓝与钥匙</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝是幼儿园的老师，他的班上有 28 个孩子，今天他和孩子们一起进行了一个游戏。</p><p>小蓝所在的学校是寄宿制学校，28 个孩子分别有一个自己的房间，每个房间对应一把钥匙，每把钥匙只能打开自己的门。现在小蓝让这 28 个孩子分别将自己宿舍的钥匙上交，再把这 28 把钥匙随机打乱分给每个孩子一把钥匙，有$28! = 28\times27\times \cdots \times1 $种分配方案。小蓝想知道这些方案中，有多少种方案恰有一半的孩子被分到自己房间的钥匙（即有 14 个孩子分到的是自己房间的钥匙，有 14 个孩子分到的不是自己房间的钥匙）。</p></blockquote><h2 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h2><blockquote><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><h2 id="考场思路"><a href="#考场思路" class="headerlink" title="考场思路"></a>考场思路</h2><p>显然这个题分为两步，一是有14个同学分到了自己的钥匙，二是剩下的14个同学都没有分到自己的钥匙，记方案数为$Q$，则有：<br>$$<br>Q = C_{28}^{14} \cdot D_{14}<br>$$<br>其中$D_{14}$为14的全错位排列。全错位排列也称“欧拉装错信箱问题”，其计算可用容斥原理，公式如下：<br>$$<br>D_n = \sum_{i=0}^{n} (-1)^i \cdot C_n^i \cdot (n-i)!<br>$$<br>或者：<br>$$<br>D_n = n! \cdot \sum_{i=0}^{n} \frac{(-1)^i}{i!}<br>$$<br>于是有方案数$Q=1,286,583,532,342,313,400$</p><h1 id="B-题：排列距离"><a href="#B-题：排列距离" class="headerlink" title="B 题：排列距离"></a>B 题：排列距离</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝最近迷上了全排列，现在他有一个长度为 17 的排列，里面包含的元素有：abcdefghijklnopqr，即 a 至 r 中除了 m 以外的所有小写字母，这 17个字母在任何一个排列中都恰好出现一次。前面几个排列依次是：</p><ul><li><p>第 1 个排列为：abcdefghijklnopqr；</p></li><li><p>第 2 个排列为：abcdefghijklnoprq；</p></li><li><p>第 3 个排列为：abcdefghijklnoqpr；</p></li><li><p>第 4 个排列为：abcdefghijklnoqrp；</p></li><li><p>第 5 个排列为：abcdefghijklnorpq；</p></li><li><p>第 6 个排列为：abcdefghijklnorqp；</p></li><li><p>第 7 个排列为：abcdefghijklnpoqr；</p></li><li><p>第 8 个排列为：abcdefghijklnporq；</p></li><li><p>第 9 个排列为：abcdefghijklnpqor；</p></li><li><p>第 10 个排列为：abcdefghijklnpqro。</p></li></ul><p>对于一个排列，有两种转移操作：<br>1）转移到其下一个排列。如果当前排列已经是最后一个排列，那么下一个排列就是第一个排列。<br>2）转移到其上一个排列。如果当前排列是第一个排列，那么上一个排列就是最后一个排列。<br>小蓝现在有两个排列，分别为排列 A：aejcldbhpiogfqnkr，以及排列B：ncfjboqiealhkrpgd，他现在想知道，在只有上述两种转移操作的前提下，排列 A 最少转移多少次能得到排列 B。</p></blockquote><h2 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h2><blockquote><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><h2 id="考场思路-1"><a href="#考场思路-1" class="headerlink" title="考场思路"></a>考场思路</h2><p>显然只要知道了排列A和排列B分别是第几个排列就可以了。</p><p>因此我们使用康托展开（Cantor expansion）就可以了。若记排列$\lambda$为$a_1,a_2,a_3,\dots,a_n$，则有：<br>$$<br>X_{\lambda} = q_1 \cdot (n-1)! + q_2 \cdot (n-2)! + \cdots + q_n \cdot 0!<br>$$<br>其中$q_i$表示$a_i$在$a_i,a_{i+1},\dots,a_n$中是第$q_i$小的数，则$X_\lambda$表示排列$\lambda$是第$X_\lambda$个排列。（注：这里第几小的数和第几个排列都从0开始标号，计算会比较方便）</p><p>最后我的结果是：排列A的编号是$4,542,892,071,974$，排列B的编号是$254,081,962,595,831$，最终答案取$min{X_A - X_B + 19!, X_B - X_A} = 106,148,357,572,143$即可。</p><h1 id="C-题：内存空间"><a href="#C-题：内存空间" class="headerlink" title="C 题：内存空间"></a>C 题：内存空间</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝最近总喜欢计算自己的代码中定义的变量占用了多少内存空间。</p><p>为了简化问题，变量的类型只有以下三种：<br>int：整型变量，一个 int 型变量占用 4 Byte 的内存空间。<br>long：长整型变量，一个 long 型变量占用 8 Byte 的内存空间。<br>String：字符串变量，占用空间和字符串长度有关，设字符串长度为 L，则字符串占用 L Byte 的内存空间，如果字符串长度为 0 则占用 0 Byte 的内存空间。</p><p>定义变量的语句只有两种形式，第一种形式为：<br><code>type var1=value1,var2=value2...;</code><br>定义了若干个 type 类型变量 var1、var2、…，并且用 value1、value2…初始化，<br>多个变量之间用’,’ 分隔，语句以’;’ 结尾，type 可能是 int、long 或 String。例如 int a=1,b=5,c=6; 占用空间为 12 Byte；long a=1,b=5; 占用空间为 16 Byte；String s1=””,s2=”hello”,s3=”world”; 占用空间为 10 Byte。</p><p>第二种形式为：<br><code>type[] arr1=new type[size1],arr2=new type[size2]...;</code><br>定义了若干 type 类型的一维数组变量 arr1、arr2…，且数组的大小为size1、size2…，多个变量之间用’,’ 进行分隔，语句以’;’ 结尾，type 只可能是 int 或 long。例如 int[] a1=new int[10]; 占用的内存空间为 40Byte；long[] a1=new long[10],a2=new long[10]; 占用的内存空间为160 Byte。</p><p>已知小蓝有 T 条定义变量的语句，请你帮他统计下一共占用了多少内存空间。结果的表示方式为：<code>aGBbMBcKBdB</code>，其中 a、b、c、d 为统计的结果，GB、MB、KB、B 为单位。优先用大的单位来表示，1GB=1024MB，1MB=1024KB，1KB=1024B，其中 B 表示 Byte。如果 a、b、c、d 中的某几个数字为 0，那么不必输出这几个数字及其单位。题目保证一行中只有一句定义变量的语句，且每条语句都满足题干中描述的定义格式，所有的变量名都是合法的且均不重复。题目中的数据很规整，和上述给出的例子类似，除了类型后面有一个空格，以及定义数组时 new 后面的一个空格之外，不会出现多余的空格。</p></blockquote><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含一个整数 T ，表示有 T 句变量定义的语句。<br>接下来 T 行，每行包含一句变量定义语句。</p></blockquote><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个字符串，表示所有语句所占用空间的总大小。</p></blockquote><h2 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th align="left">样例输入</th><th align="left">样例输出</th></tr></thead><tbody><tr><td align="left">1<br>long[] nums=new long[131072];</td><td align="left">1MB</td></tr><tr><td align="left">4<br>int a=0,b=0;<br>long x=0,y=0;<br>String s1=”hello”,s2=”world”;<br>long[] arr1=new long[100000],arr2=new long[100000];</td><td align="left">1MB538KB546B</td></tr></tbody></table><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><blockquote><p>样例 1，占用的空间为 131072 × 8 = 1048576 B，换算过后正好是 1MB，其它三个单位 GB、KB、B 前面的数字都为 0 ，所以不用输出。</p><p>样例 2，占用的空间为 4 × 2 + 8 × 2 + 10 + 8 × 100000 × 2 B，换算后是1MB538KB546B。</p></blockquote><h2 id="规模与约定"><a href="#规模与约定" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于所有评测用例，1 ≤ T ≤ 10，每条变量定义语句的长度不会超过 1000。所有的变量名称长度不会超过 10，且都由小写字母和数字组成。对于整型变量，初始化的值均是在其表示范围内的十进制整数，初始化的值不会是变量。对于 String 类型的变量，初始化的内容长度不会超过 50，且内容仅包含小写字母和数字，初始化的值不会是变量。对于数组类型变量，数组的长度为一个整数，范围为：$[0, 2^{30}]$，数组的长度不会是变量。T 条语句定义的变量所占的内存空间总大小不会超过 1 GB，且大于 0 B。</p></blockquote><h2 id="考场思路-2"><a href="#考场思路-2" class="headerlink" title="考场思路"></a>考场思路</h2><p>这个题，怎么说呢，几乎就是纯模拟吧大概。</p><p>首先每行的首个字符串就是类型说明，然后对于不同的类型找不同的符号就可以了。</p><p>比如int和long型，就找有多少个“,”；数组就找“int[”和“long[”；字符串就找“””就可以了。</p><p>部分代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">','</span> <span class="token operator">||</span> <span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">';'</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_int_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// const char* lst = str + strlen(str);</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"int["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token number">4</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_long</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">','</span> <span class="token operator">||</span> <span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">';'</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>        str<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_long_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// const char* lst = str + strlen(str);</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"long["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token number">8</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve_String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// const char* lst = str + strlen(str);</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">'\"'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// fprintf("tmp=%s\n",tmp);</span>        tmp <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">!=</span> <span class="token string">'\"'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="D-题：最大公约数"><a href="#D-题：最大公约数" class="headerlink" title="D 题：最大公约数"></a>D 题：最大公约数</h1><h2 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给定一个数组，每次操作可以选择数组中任意两个相邻的元素 x, y 并将其中的一个元素替换为 gcd(x, y) ，其中 gcd(x, y) 表示 x 和 y 的最大公约数。</p><p>请问最少需要多少次操作才能让整个数组只含 1 。</p></blockquote><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含一个整数 n ，表示数组长度。</p><p>第二行包含 n 个整数 a1, a2, · · · , an，相邻两个整数之间用一个空格分隔。</p></blockquote><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个整数，表示最少操作次数。如果无论怎么操作都无法满足要求，输出 −1。</p></blockquote><h2 id="测试样例-1"><a href="#测试样例-1" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>3<br>4 6 9</td><td>4</td></tr></tbody></table><h2 id="规模与约定-1"><a href="#规模与约定-1" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 30% 的评测用例，$n ≤ 500 ，a_i ≤ 1000$；<br>对于 50% 的评测用例，$n ≤ 5000 ，a_i ≤ 10^6$；<br>对于所有评测用例，$1 ≤ n ≤ 100000 ，1 ≤ a_i ≤ 10^9$。</p></blockquote><h2 id="考场思路-3"><a href="#考场思路-3" class="headerlink" title="考场思路"></a>考场思路</h2><p>可以发现，如果数列中有一个数为1，那么问题就很好解决了：答案即为非1的个数。</p><p>因此本题的关键在于如何最快的弄出一个1。</p><p>由于题目只允许相邻的两个数取gcd，所以如果找到连续k个数gcd为1的话，就可以用k-1次操作把其中一个数换为1，因此答案为：n+k-2。（当然，如果这n个数的gcd为非1，就直接输出-1即可）</p><p>于是问题化为如何找到这个最小的k。</p><p>稍微暴力的做法是，首先求两个两个的gcd，然后求三个三个的gcd（可以发现，三个数的gcd就是相邻两个gcd的gcd），依次下去，每次gcd的数目减小1，于是时间复杂度是$O(\sum_{i=1}^n i)$即$O(n^2)$（由于$a_i$并不大，所以gcd的复杂度（不超过$O(5 \lg n)$，大约就是10倍左右）就忽略了）实现大致如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">focus_solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n<span class="token operator">--</span><span class="token punctuation">;</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于100%的数据，我使用了倍增+二分，复杂度大概是$O(40nlogn)$（倍数是gcd的复杂度），复杂度上肯定是没有问题的。大致的想法就是先预处理出从数量任意一个数起，2的整次幂个数的gcd，这里复杂度就是$O(20nlogn)$。然后对上面说的k进行二分（k最大取n），每次check遍历起点，然后用预处理的数据计算出k个数的gcd，也是$O(20nlogn)$。代码大致如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> pow2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">8192</span><span class="token punctuation">,</span><span class="token number">16384</span><span class="token punctuation">,</span><span class="token number">32768</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">,</span><span class="token number">131072</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> logval <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>pow2<span class="token punctuation">,</span> pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> pow2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// logval = log2(x)向下取整-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> _g <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>_gcd_2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>logval<span class="token punctuation">]</span><span class="token punctuation">,</span> _gcd_2<span class="token punctuation">[</span>r<span class="token operator">-</span>pow2<span class="token punctuation">[</span>logval<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>logval<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// _gcd_2就是预处理数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_g <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max_log <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>pow2<span class="token punctuation">,</span> pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> pow2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> max_log<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>pow2<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> _gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>_gcd_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _gcd_2<span class="token punctuation">[</span>i<span class="token operator">+</span>pow2<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>L <span class="token operator">!=</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> R <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> R <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> L <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n <span class="token operator">+</span> L <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="E-题：owo"><a href="#E-题：owo" class="headerlink" title="E 题：owo"></a>E 题：owo</h1><h2 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝很喜欢 owo ，他现在有一些字符串，他想将这些字符串拼接起来，使得最终得到的字符串中出现尽可能多的 owo 。</p><p>在计算数量时，允许字符重叠，即 owowo 计算为 2 个，owowowo 计算为3 个。</p><p>请算出最优情况下得到的字符串中有多少个 owo。</p></blockquote><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含一个整数 n ，表示小蓝拥有的字符串的数量。<br>接下来 n 行，每行包含一个由小写英文字母组成的字符串 si 。</p></blockquote><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出 n 行，每行包含一个整数，表示前 i 个字符串在最优拼接方案中可以得到的 owo 的数量。</p></blockquote><h2 id="测试样例-2"><a href="#测试样例-2" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>3<br>owo<br>w<br>ow</td><td>1<br>1<br>2</td></tr></tbody></table><h2 id="规模与约定-2"><a href="#规模与约定-2" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 10% 的评测用例，$n ≤ 10$；<br>对于 40% 的评测用例，$n ≤ 300$；<br>对于 60% 的评测用例，$n ≤ 5000$；<br>对于所有评测用例，$1 ≤ n ≤ 10^6 ，1 ≤ |s_i| ，\sum|s_i| ≤ 10^6$，其中 $|s_i|$表示字符串$s_i$的长度。</p></blockquote><h2 id="考场思路-4"><a href="#考场思路-4" class="headerlink" title="考场思路"></a>考场思路</h2><p>首先肯定要能计算出每个字符串内部的owo的个数，当然这个是比较好计算的，用kmp或者直接用两个flag就能搞定。</p><p>其实是最重要的，要考虑拼接，不过好在这个owo很短，可用的拼接方式并不多，大致应该只有如下三种：</p><ul><li>以ow结尾+以o开头</li><li>以o结尾+以wo开头</li><li>以o结尾+单独一个字母w+以o开头</li></ul><p>因此我们就统计上面这些可以拼接的字符串的数量就可以了。但是需要注意的是，如果一个字符串既以ow结尾又以o开头，虽然都要计数，但是不能自己和自己拼接在一起，不仅如此，字符串也不能拼接成环。但是这个我在考试的时候想的不多，就没有考虑完全，大概是寄了，因此就不放代码了，如何实现就留给读者思考吧。</p><h1 id="F-题：环境治理"><a href="#F-题：环境治理" class="headerlink" title="F 题：环境治理"></a>F 题：环境治理</h1><h2 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>LQ 国拥有 n 个城市，从 0 到 n − 1 编号，这 n 个城市两两之间都有且仅有一条双向道路连接，这意味着任意两个城市之间都是可达的。每条道路都有一个属性 D ，表示这条道路的灰尘度。当从一个城市 A 前往另一个城市 B 时，可能存在多条路线，每条路线的灰尘度定义为这条路线所经过的所有道路的灰尘度之和，LQ 国的人都很讨厌灰尘，所以他们总会优先选择灰尘度最小的路线。</p><p>LQ 国很看重居民的出行环境，他们用一个指标 P 来衡量 LQ 国的出行环境，P 定义为：<br>$$<br>P = \sum_{i=0}^{n-1}\sum_{j=0}^{n-1}d(i,j)<br>$$<br>其中 d(i, j) 表示城市 i 到城市 j 之间灰尘度最小的路线对应的灰尘度的值。</p><p>为了改善出行环境，每个城市都要有所作为，当某个城市进行道路改善时，会将与这个城市直接相连的所有道路的灰尘度都减少 1，但每条道路都有一个灰尘度的下限值 L，当灰尘度达到道路的下限值时，无论再怎么改善，道路的灰尘度也不会再减小了。</p><p>具体的计划是这样的：<br>第 1 天，0 号城市对与其直接相连的道路环境进行改善；<br>第 2 天，1 号城市对与其直接相连的道路环境进行改善；<br>…<br>第 n 天，n − 1 号城市对与其直接相连的道路环境进行改善；<br>第 n + 1 天，0 号城市对与其直接相连的道路环境进行改善；<br>第 n + 2 天，1 号城市对与其直接相连的道路环境进行改善；<br>…</p><p>LQ 国想要使得 P 指标满足 P ≤ Q。请问最少要经过多少天之后，P 指标可以满足 P ≤ Q。如果在初始时就已经满足条件，则输出 0 ；如果永远不可能满足，则输出 −1。</p></blockquote><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入的第一行包含两个整数$n, Q$，用一个空格分隔，分别表示城市个数和期望达到的$P$指标。</p><p>接下来$n$行，每行包含$n$个整数，相邻两个整数之间用一个空格分隔，其中第$i$行第$j$列的值$D_{ij}$ $(D_{ij} = D_{ji}, D_{ii} = 0)$表示城市$i$与城市$j$之间直接相连的那条道路的灰尘度。</p><p>接下来$n$行，每行包含$n$个整数，相邻两个整数之间用一个空格分隔，其中第$i$行第$j$列的值$L_{ij}$ $(L_{ij} = L_{ji}, L_{ii} = 0)$表示城市$i$与城市$j$之间直接相连的那条道路的灰尘度的下限值。</p></blockquote><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个整数表示答案。</p></blockquote><h2 id="测试样例-3"><a href="#测试样例-3" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>3 10<br>0 2 4<br>2 0 1<br>4 1 0<br>0 2 2<br>2 0 0<br>2 0 0</td><td>2</td></tr></tbody></table><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><blockquote><p>初始时的图如下所示，每条边上的数字表示这条道路的灰尘度：<br><img src="https://s2.loli.net/2022/06/19/wDqNgLBJd9fFKmH.png"><br>此时每对顶点之间的灰尘度最小的路线对应的灰尘度为：<br>$$<br>d(0, 0) = 0, d(0, 1) = 2, d(0, 2) = 3, \<br>d(1, 0) = 2, d(1, 1) = 0, d(1, 2) = 1, \<br>d(2, 0) = 3, d(2, 1) = 1, d(2, 2) = 0.<br>$$<br>初始时的 P 指标为 (2 + 3 + 1) × 2 = 12，不满足 P ≤ Q = 10；<br>第一天，0 号城市进行道路改善，改善后的图示如下：<br><img src="https://s2.loli.net/2022/06/19/ars39hq7ef68Kg1.png"><br>注意到边 (0, 2) 的值减小了 1 ，但 (0, 1) 并没有减小，因为 L0,1 = 2 ，所以<br>(0, 1) 的值不可以再减小了。此时每对顶点之间的灰尘度最小的路线对应的灰尘<br>度为：<br>$$<br>d(0, 0) = 0, d(0, 1) = 2, d(0, 2) = 3, \<br>d(1, 0) = 2, d(1, 1) = 0, d(1, 2) = 1, \<br>d(2, 0) = 3, d(2, 1) = 1, d(2, 2) = 0.<br>$$<br>此时 P 仍为 12。<br>第二天，1 号城市进行道路改善，改善后的图示如下：<br><img src="https://s2.loli.net/2022/06/19/ftncCIoLR38XSWN.png"><br>此时每对顶点之间的灰尘度最小的路线对应的灰尘度为：<br>$$<br>d(0, 0) = 0, d(0, 1) = 2, d(0, 2) = 2, \<br>d(1, 0) = 2, d(1, 1) = 0, d(1, 2) = 0, \<br>d(2, 0) = 2, d(2, 1) = 0, d(2, 2) = 0.<br>$$<br>此时的 P 指标为 (2 + 2) × 2 = 8 &lt; Q ，此时已经满足条件。<br>所以答案是 2。</p></blockquote><h2 id="规模与约定-3"><a href="#规模与约定-3" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 30% 的评测用例，$1 ≤ n ≤ 10 ，0 ≤ L_{ij} ≤ D_{ij} ≤ 10$；<br>对于 60% 的评测用例，$1 ≤ n ≤ 50 ，0 ≤ L_{ij} ≤ D_{ij} ≤ 100000$；<br>对于所有评测用例，$1 ≤ n ≤ 100 ，0 ≤ L_{ij} ≤ D_{ij} ≤ 100000 ，0 ≤ Q ≤ 2^{31} − 1$。</p></blockquote><h2 id="考场思路-5"><a href="#考场思路-5" class="headerlink" title="考场思路"></a>考场思路</h2><p>不得不说这个题长到离谱（其实是样例解释长），所以我最后看的这个题。这个题暴力的话显然就是每天都用Floyd算法求一遍最短路，然后求一遍P就可以了，复杂度上是$O(day \cdot n^3)$，其中Day是需要经历的天数，至于输出-1的情况，完全可以用$L_{ij}$作为边权跑一次Floyd就知道了。问题就是，这个复杂度是无法接受的，甚至连60%的数据都不能通过，只能拿到30%的分。</p><p>这里呢注意到数据规模中$n$是比较小的，但是$D-L$可能是比较大，所以考虑二分答案，理想中复杂度应该是$O(log(\frac12n(D-L))\cdot n^3)$，这样复杂度的话就很可以接受了。这里二分的话最大的天数应该是$\frac12nD=5e6$。check函数的代码大概如下（复杂度是$O(n^2 + n^3)$）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> turn <span class="token operator">=</span> day <span class="token operator">/</span> n<span class="token punctuation">;</span> <span class="token comment">// 每一轮，每条道路灰尘度下降2</span>    day <span class="token operator">%=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> turn<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 如果这一轮城市i还进行了清理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 如果这一轮城市j还进行了清理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 注意灰尘度是有下限的</span>        <span class="token punctuation">}</span>    <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> P <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            P <span class="token operator">+=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>P <span class="token operator">&lt;=</span> Q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="G-题：选素数"><a href="#G-题：选素数" class="headerlink" title="G 题：选素数"></a>G 题：选素数</h1><h2 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>小蓝有一个数 x，每次操作小蓝会选择一个小于 x 的素数 p，然后在 x 成为 p 的倍数前不断将 x 加 1，(如果 x 一开始就是 p 的倍数则 x 不变)。</p><p>小乔看到了小蓝进行了 2 次上述操作后得到的结果 n，他想知道 x 在一开始是多少。如果有多种可能，他想知道 x 一开始最小可以是多少，而如果不存在任何解，说明小乔看错了，此时请输出 −1。</p></blockquote><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>输入一行包含一个整数 n ，表示经过两次操作后 x 的值。</p></blockquote><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>输出一行包含一个整数表示 x 的初始值。如果有多个解，输出最小的。如果不存在解，请输出 −1 。</p></blockquote><h2 id="测试样例-4"><a href="#测试样例-4" class="headerlink" title="测试样例"></a>测试样例</h2><table><thead><tr><th>样例输入</th><th>样例输出</th></tr></thead><tbody><tr><td>22</td><td>8</td></tr></tbody></table><h2 id="规模与约定-4"><a href="#规模与约定-4" class="headerlink" title="规模与约定"></a>规模与约定</h2><blockquote><p>对于 60% 的评测用例，$1 ≤ n ≤ 5000$；<br>对于所有评测用例，$1 ≤ n ≤ 10^6$。</p></blockquote><h2 id="考场思路-6"><a href="#考场思路-6" class="headerlink" title="考场思路"></a>考场思路</h2><p>这个题的长度就和前面那个题形成了鲜明的对比<span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。经过一番思考，可以发现，如果数$x=p_1^{k_1}p_2^{k_2}\cdots p_m^{k_m}$且其中$p_1 &lt; p_2 &lt; \cdots &lt; p_m$，则$x$的上一个数可能且只可能位于$[x-p_m+1,x-1]$中，且如果$x$是素数，这上一个数不存在。</p><p>发现这一点之后就可以做了，只需要先把$x$质因数分解，然后找出最大的素因子，得到只经过一轮的数，然后在把所有可能的数都再进行一次操作，就可以得到所有符合要求的原始数了。复杂度应该是$O(\sum_{i=\sqrt n}^{n} \sqrt i)$，不过经过计算可知这个复杂度大约是$O(n^{\frac32})$，其实是过不了全部数据的，但是由于大部分数不是质数，都拥有较小的质因子，所以分解质因数的复杂度应当小于$O(\sqrt x)$，所以我大胆猜测是可以过的。</p><p>考试代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> prime_i<span class="token punctuation">;</span> <span class="token comment">// 显然是没有必要的</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prime_i<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp <span class="token operator">/=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">!=</span> x<span class="token punctuation">)</span> prime_i<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tmp==x说明是x质数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prime_i<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_p <span class="token operator">=</span> prime_i<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> anss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        anss <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>anss<span class="token punctuation">,</span> <span class="token function">solve</span><span class="token punctuation">(</span>x <span class="token operator">-</span> i<span class="token punctuation">,</span> depth<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用unsigned其实就是为了取min方便</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> anss<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数调用<code>solve(n,2)</code>然后把返回值转化为<code>int</code>即可。</p><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1><p>其实剩下的三个题我都不会了……<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛" scheme="https://toby-shi-cloud.github.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="蓝桥杯" scheme="https://toby-shi-cloud.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="算法" scheme="https://toby-shi-cloud.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Python】使用socket库实现server-client通讯的联机对战游戏（一）</title>
    <link href="https://toby-shi-cloud.github.io/posts/pythonsocket.html"/>
    <id>https://toby-shi-cloud.github.io/posts/pythonsocket.html</id>
    <published>2022-06-16T13:30:00.000Z</published>
    <updated>2022-06-16T14:59:48.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="socket单对单通讯"><a href="#socket单对单通讯" class="headerlink" title="socket单对单通讯"></a>socket单对单通讯</h1><p>socket是Python内建库之一，用途就是网络通讯。作为实验，我们考虑两个Python程序之间的通讯，一个作为服务器，一个作为客户端，客户端向服务器发送一串字符，服务器收到后将原字符串大写后传回，直到客户端发送空信息，服务器退出。</p><p>服务器端代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span> <span class="token comment"># 这个tuple的第一项是ip地址，第二项是端口</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment"># 定义socket类型，网络通信，TCP</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span> <span class="token comment"># 套接字绑定ip和端口</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 开始监听连接请求</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 接受连接请求，conn是一个新的套接字，addr是客户端地址</span>conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">'Hello from the server!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 发送打招呼信息，并且用utf-8编码</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 接受数据并使用utf-8解码</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span> <span class="token comment"># 如果数据为空就退出</span>        conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 把数据大写后返回</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 如果数据传输出错</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭套接字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span> <span class="token comment"># 服务器ip和端口</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token comment"># 定义socket类型，网络通信，TCP</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span> <span class="token comment"># 尝试连接服务器</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 如果连接失败socket.socket.connect会抛出错误</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 接受服务器的问候</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'&gt;&gt;&gt; '</span><span class="token punctuation">)</span> <span class="token comment"># 此时用户可以在运行客户端的控制台中输入内容</span>        s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将消息发送</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>            <span class="token keyword">break</span> <span class="token comment"># 如果数据为空就退出</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment"># 接受服务器的结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> <span class="token comment"># 如果数据传输出错</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭套接字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/16/8S4lKr17fpYLNyw.png" alt="运行结果"></p><h1 id="socketserver多对一通讯"><a href="#socketserver多对一通讯" class="headerlink" title="socketserver多对一通讯"></a>socketserver多对一通讯</h1><p>由于我的目的是打算写一个联机对战游戏，那么一个服务器需要同时和多个（至少是两个）客户端建立连接。一个很容易想到的做法就是服务器多线程。好在Python已经帮我们封装好了多线程和socket库——socketserver库。</p><p>socketserver库的用法和socket几乎一模一样，而且由于只有服务器端需要多线程，所以只需要更改server.py即可。</p><p>下面是server.py的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketserverip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">10888</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 重写RequestHandler中的handle方法用来处理请求</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"conn is :"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>request<span class="token punctuation">)</span>  <span class="token comment"># conn</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"addr is :"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span>  <span class="token comment"># addr</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">'Hello from the server!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment"># 处理方面的逻辑都是一样的</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">break</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disconnected with"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span>        <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>ThreadingTCPServer<span class="token punctuation">(</span>ip_port<span class="token punctuation">,</span> MyServer<span class="token punctuation">)</span> <span class="token comment"># 建立TCP协议套接字</span>        <span class="token comment"># 使用s.serve_forever()接受无穷次连接（需要按下Ctrl+C中断）</span>    <span class="token comment"># 也可以使用一次s.handle_request()接受一次连接</span>    s<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://s2.loli.net/2022/06/16/qGRdK1ui4zof2W5.png" alt="Server服务器结果"></p><p><img src="https://s2.loli.net/2022/06/16/Bk8IOVmco4bUhjX.png" alt="Client客户端结果"></p><h1 id="服务器内部数据传输"><a href="#服务器内部数据传输" class="headerlink" title="服务器内部数据传输"></a>服务器内部数据传输</h1><p>现在我们已经解决了服务器和客户端之间的数据传输问题了，但是这又引入了新的问题：服务器用多线程和客户端交流，但是socketserver封装的太好了，想要直接从外部操作各个线程显然不显示，那么如何进行服务器各个线程之间的交流呢？</p><p>请听下回分解……</p><p><span class="github-emoji"><span>😀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
    <category term="网络" scheme="https://toby-shi-cloud.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="server-client" scheme="https://toby-shi-cloud.github.io/tags/server-client/"/>
    
  </entry>
  
  <entry>
    <title>你好博客！Hello Blog!</title>
    <link href="https://toby-shi-cloud.github.io/posts/helloblog.html"/>
    <id>https://toby-shi-cloud.github.io/posts/helloblog.html</id>
    <published>2022-06-14T11:30:00.000Z</published>
    <updated>2022-07-20T12:03:43.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="01-从零开始搭建属于自己的博客"><a href="#01-从零开始搭建属于自己的博客" class="headerlink" title="01 从零开始搭建属于自己的博客"></a>01 从零开始搭建属于自己的博客</h1><p>具体操作见<a href="https://www.cnblogs.com/huanhao/p/prettykde.html">此博客</a></p><p>不过由于我之前弄过一半，所以这一步的操作就省了，因此这里就不记录了。</p><h1 id="02-选择合适的好看的Theme"><a href="#02-选择合适的好看的Theme" class="headerlink" title="02 选择合适的好看的Theme"></a>02 选择合适的好看的Theme</h1><p>经过许多次试错，最终看到了Luckey大佬的<a href="https://www.bilibili.com/video/BV1aV411k7Yq?share_source=copy_web">视频</a>，十分羡慕，于是clone了他的<a href="http://www.luckyzmj.cn/">博客</a>.</p><h1 id="03-博客个性化"><a href="#03-博客个性化" class="headerlink" title="03 博客个性化"></a>03 博客个性化</h1><p>如果说前面的内容都是跟着教程动动手指就可以完成，那么这一步将会是最大的噩梦。</p><p>其中最大的问题就是：我压根没有学过前端，大佬的博客的复杂程度对于我来说简直难以想象。因此这里要特别感谢<a href="https://github.com/LuckyZmj/LuckyBlog">Luckey大佬的教程</a>以及<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery主题的使用手册</a>，中文文档真的对我这种英语白痴非常友好！</p><p>然后我就开始看着各式各样的文档一通乱改，为了降低改动难度，我就把用不到的功能的入口删掉了，但是如果你手动输入争取的url的话其实依然可以看到Luckey大佬的很多让我大为震撼的功能，想看的朋友可以去他的<a href="http://www.luckyzmj.cn/">博客</a>欣赏欣赏。</p><p>我做的比较到大的改动就是升级了这个Theme使用的<a href="https://fontawesome.com/">fontawesome</a>的版本，不过其实只需要在官网下载一个zip然后把里面的东西全部覆盖到<code>~\themes\matery\source\libs\awesome</code>就可以了。（这样做是因为只有新版才支持B站的图标，不过Gitee的图标仍然木有）</p><p>最后比较遗憾的是，不知道为什么我在“视频”栏中嵌入视频失败了，不知道是不是B站嵌入视频已经失效了。</p><h1 id="04-Markdown公式测试"><a href="#04-Markdown公式测试" class="headerlink" title="04 Markdown公式测试"></a>04 Markdown公式测试</h1><p>$$ S_n = \sum_{i=1}^{n} a_i $$<br>$$ \int \cos(x) dx = \sin(x) $$</p><p>这是行内公式：$\lim_{x\rightarrow 0} \frac{x}{\sin x} = 1$</p><p>经过测试，公式内换行不知道为什么没有得到支持。</p><h1 id="05-在忙了一下午之后"><a href="#05-在忙了一下午之后" class="headerlink" title="05 在忙了一下午之后"></a>05 在忙了一下午之后</h1><p>总之到晚上的时候我就已经开始写这篇HelloBlog了，还是很兴奋的，毕竟从未有过写前端的经历，然后几乎是从零开始学习搭建，所以真的非常感谢大佬们的帮助。因此如果有朝一日，我也有能力以后，也一定会向把知识分享出来，供大家学习和参考。</p><p>无限进步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
