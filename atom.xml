<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TobyShiの博客</title>
  
  <subtitle>TobyShiの博客</subtitle>
  <link href="https://toby-shi-cloud.github.io/atom.xml" rel="self"/>
  
  <link href="https://toby-shi-cloud.github.io/"/>
  <updated>2023-04-15T13:06:31.091Z</updated>
  <id>https://toby-shi-cloud.github.io/</id>
  
  <author>
    <name>TobyShi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OO Unit 2</title>
    <link href="https://toby-shi-cloud.github.io/posts/oounit2.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oounit2.html</id>
    <published>2023-04-15T11:00:00.000Z</published>
    <updated>2023-04-15T13:06:31.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个单元任务量很大，Bug 也很多，让人心累。不过呢确实学到了很多东西，从 Java 多线程，到 C++ 虚类，继承，多态，再到 Html，python flask，都可以有涉及。</p><h2 id="本单元任务简介"><a href="#本单元任务简介" class="headerlink" title="本单元任务简介"></a>本单元任务简介</h2><p>第一次作业：本次作业的基本目标是模拟<strong>多线程实时电梯系统</strong>，熟悉线程的创建、运行等基本操作，熟悉多线程程序的设计方法。</p><p>第二次作业：在第一次作业的基础上，掌握线程安全知识并解决线程安全问题，同时在架构上围绕线程之间的协同设计层次架构。</p><p>第三次作业：在前两次作业的基础上，掌握线程之间的交互，强化线程之间的协同设计层次架构。</p><h2 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h2><p><code>Sequence Diagrams</code> 时序图：</p><p><a href="https://mermaid.live/edit#pako:eNqdWNuO4jgQ_ZUoo5F6JBrlfuFhHqC7VyP17GVAO9KKFydxwGrHZh1nptlW__vaCZDYucCukRCOz6kqH5fLJm9mSjNoLswS_l1BksIHBHYMFFtiiIYpPRhfASLGs_jVPJPtCzlUfLNnEGT3nz__gmkC8B8VrODC-L0q98Y3aazkLWF9LDksVpRwRjGGrMdC6YtgqaTa-4oWwhc0AMmMB1QeAE_3LWTQtjCuP1tc7Hyj4vuKgf6U2jkZSyBC_b6HxFhW5fGqpUcMfwBO2clWfwqQZG3njJ4ycdJKU3iA2aHqSmAopdBtdJd1hCyTgcuE-EI4ZKw68CvBjyZHI-TdxSBlxoYBUuaQfWpsXpSZSLe1ABkrTEtorNGOANwwOpj7voLfAeJGLhw-Fgd-7PsYTKART9eX_FbiiOID9KGIh6gbyApEgMx3c2YWogdQJvb6mzSwNfkeFnBrLsTPDOagwnxrzjpDfwKGQIJhKTFvjdOtmYhl2zFaicWpqT_3SDhoiHL8wFAB2HFFMWUN4sPj6nH19NTBlDClJNNQuWhZ15JIMI5U0L7Ed5E1M2zL-jgz4mDuhJ5vxZHlxh8_9YNYUpZBpvEdTxgIJD8a5V8CHLQQXAy4c9-JPdsOAy9UDJxjH-RH1wM4TWADX3lXI9u1XcsaClRHWqI59kBEGpDtkrt47lunZgtVR3vdADEisOvPrZviTw1IHRWZSJYvu-kEaQG93EhqXe3TcOyG1sOyN-ychoFoinfAGP25Fxtncga52EpPoED42CC2WzErBpMq3UNuFKXsz4wfkGWAgJkhdwvW6Gv0z2mH2cHhtSsfSCBealvpA4zkpwMj4nCekKkerqc6JkSKK1Fm2ISSZ0TXTE-wU314RuRletERx3B81WG2g8-3zRykoph1g6q3rh_PAyewg8hxPHdmiG4YBr4buLYTyf0UzmPLjgMrjDxX2U-NuXEl63FtayRYRKljntW83zF47OZtXaHHBWjGN5Nbo0kN-iqinSyiF9xgkfvfStVmryghb2ZXIIRy2Iusn1g1TJ2oSFAfZBrm-tIgcfwhSvo-gyAYRmpuPflRalBzI_61KhLFon7iiWLVtyfqKrizLUeeVeLL8f2ZYc29WElKzNdD3CsOnFYoTzkMOChf-vP3XS9PUh2mTj4CsZVlGkZq_ox2ez4R2hl3A-QBsJeJJTzDfqt4iTJ4A3KFxU1YXlDUc8-1A1dfcLi5TZoOWBUoydMwzzvIHUPd0wNLnbRikFEyYGoSqUeo4VKGeH8WeR6JpsPUbITK4tIMHLVCpiLqIjCxBOLqX5dTRUzfEU0H6bWuh0oxKEuJGrvi5AjjzfEArbFCeAbYY0fcGeC09dG1vOu3yDPPbXm20_JGL39nntfhhcHt_vyWd_8f3AWdG-btzsJOkFE06k3S3rfkXfyRABWn6yNJzQVnFZyZ1SET_zFOLw7MRQ5weXn6mCFxaF4eHgD5i9IWBOvhr80riPpNxPu_XNQFBA"><img src="https://mermaid.ink/img/pako:eNqdWNuO4jgQ_ZUoo5F6JBrlfuFhHqC7VyP17GVAO9KKFydxwGrHZh1nptlW__vaCZDYucCukRCOz6kqH5fLJm9mSjNoLswS_l1BksIHBHYMFFtiiIYpPRhfASLGs_jVPJPtCzlUfLNnEGT3nz__gmkC8B8VrODC-L0q98Y3aazkLWF9LDksVpRwRjGGrMdC6YtgqaTa-4oWwhc0AMmMB1QeAE_3LWTQtjCuP1tc7Hyj4vuKgf6U2jkZSyBC_b6HxFhW5fGqpUcMfwBO2clWfwqQZG3njJ4ycdJKU3iA2aHqSmAopdBtdJd1hCyTgcuE-EI4ZKw68CvBjyZHI-TdxSBlxoYBUuaQfWpsXpSZSLe1ABkrTEtorNGOANwwOpj7voLfAeJGLhw-Fgd-7PsYTKART9eX_FbiiOID9KGIh6gbyApEgMx3c2YWogdQJvb6mzSwNfkeFnBrLsTPDOagwnxrzjpDfwKGQIJhKTFvjdOtmYhl2zFaicWpqT_3SDhoiHL8wFAB2HFFMWUN4sPj6nH19NTBlDClJNNQuWhZ15JIMI5U0L7Ed5E1M2zL-jgz4mDuhJ5vxZHlxh8_9YNYUpZBpvEdTxgIJD8a5V8CHLQQXAy4c9-JPdsOAy9UDJxjH-RH1wM4TWADX3lXI9u1XcsaClRHWqI59kBEGpDtkrt47lunZgtVR3vdADEisOvPrZviTw1IHRWZSJYvu-kEaQG93EhqXe3TcOyG1sOyN-ychoFoinfAGP25Fxtncga52EpPoED42CC2WzErBpMq3UNuFKXsz4wfkGWAgJkhdwvW6Gv0z2mH2cHhtSsfSCBealvpA4zkpwMj4nCekKkerqc6JkSKK1Fm2ISSZ0TXTE-wU314RuRletERx3B81WG2g8-3zRykoph1g6q3rh_PAyewg8hxPHdmiG4YBr4buLYTyf0UzmPLjgMrjDxX2U-NuXEl63FtayRYRKljntW83zF47OZtXaHHBWjGN5Nbo0kN-iqinSyiF9xgkfvfStVmryghb2ZXIIRy2Iusn1g1TJ2oSFAfZBrm-tIgcfwhSvo-gyAYRmpuPflRalBzI_61KhLFon7iiWLVtyfqKrizLUeeVeLL8f2ZYc29WElKzNdD3CsOnFYoTzkMOChf-vP3XS9PUh2mTj4CsZVlGkZq_ox2ez4R2hl3A-QBsJeJJTzDfqt4iTJ4A3KFxU1YXlDUc8-1A1dfcLi5TZoOWBUoydMwzzvIHUPd0wNLnbRikFEyYGoSqUeo4VKGeH8WeR6JpsPUbITK4tIMHLVCpiLqIjCxBOLqX5dTRUzfEU0H6bWuh0oxKEuJGrvi5AjjzfEArbFCeAbYY0fcGeC09dG1vOu3yDPPbXm20_JGL39nntfhhcHt_vyWd_8f3AWdG-btzsJOkFE06k3S3rfkXfyRABWn6yNJzQVnFZyZ1SET_zFOLw7MRQ5weXn6mCFxaF4eHgD5i9IWBOvhr80riPpNxPu_XNQFBA?type=jpg"></a></p><h2 id="寻路算法分析"><a href="#寻路算法分析" class="headerlink" title="寻路算法分析"></a>寻路算法分析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Route</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token class-name">Passenger</span> p<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> accessList<span class="token punctuation">,</span> <span class="token keyword">int</span> startAccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">isArrived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// already arrived</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canAccess</span><span class="token punctuation">(</span>startAccess<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cannot access</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VisitedFloor</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canAccess</span><span class="token punctuation">(</span>startAccess<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// directly</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">VisitedFloor</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisitedFloor</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>first<span class="token punctuation">.</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canAccess</span><span class="token punctuation">(</span>startAccess<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>o <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VisitedFloor</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">VisitedFloor</span> cur <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canAccess</span><span class="token punctuation">(</span>accessList<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>cur<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Passenger</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>first<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span>                             cur<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>via<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canAccess</span><span class="token punctuation">(</span>accessList<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>cur<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VisitedFloor</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cannot access</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对每个请求，对每个电梯作为起始电梯进行广搜，返回乘坐该电梯需要的最小换乘次数以及到达所需楼层所要经过的楼层。</p><p>在 <code>SystemController</code> 中，按照一定的权重给每个电梯一个代价估值，然后选乘代价最小的电梯。为避免一个乘客在一个电梯中来回上下，我为乘客添加了曾经乘坐过的电梯队列，将乘坐过的电梯按照时间顺序依次抬高代价。</p><p>为避免静态分配导致后续加入的电梯没有任何工作可做，当电梯队列人数较多时，决定让新加入的乘客等待，延迟加入队列：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ElevatorQueue<span class="token punctuation">.</span>WaitException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">Global</span><span class="token punctuation">.</span>globalQueue<span class="token punctuation">.</span><span class="token function">pushFront</span><span class="token punctuation">(</span>passenger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过这也是强测挂掉的原因。虽然有些奇怪，因为乘客数最多不会超过 100 人，所以依照此法开的线程数并不会太多。可能是强测波动原因导致新建线程被阻止而造成了乘客丢失，最后 RTLE。</p><h2 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h2><p>第一次作业因为二分查找写错了导致电梯请求队列变得无序，进而电梯接人策略出现严重问题，浪费大量时间，导致 RTLE。</p><p>第二次作业没有新的 Bug。</p><p>第三次作业因为开的线程过多被评测机禁止而导致乘客丢失，最后因为检测到请求未完成而一直等待已经丢失的东西而 RTLE。</p><p>互测刀中深搜写的复杂度过高而 CTLE 的。以及随缘写了一些代码而出现大面积漏洞 WA 的。</p><h2 id="评测机"><a href="#评测机" class="headerlink" title="评测机"></a>评测机</h2><p>我搭建了一个线上的网页 “评测机”。准确来说，它并不是评测机，因为它只要求使用者上传对应输出，而无需上传源代码进行评测。</p><p>评测机网页前端搭建在 GitHub 我的博客上，当然这是因为可以借用我的博客的风格，不至于太简陋，另外也是免费的。</p><p>评测机评测后端位于 Mac Mini 上，使用 cpolar 进行了内网穿透。与前端通信使用的 Python + Flask，而评测使用的是 cpp 写的 checker。</p><p>评测机数据库位于 Leancloud，免费，而且有完备的 Python API，虽然有 API 调用次数限制，但是这样的小网站，想必是不可能超过限制的。</p><p>心得：学到很多东西，另外看到很多人使用也很有成绩感。当你不那么注重卷绩点或者分数的时候，多做做额外的工作，真的会很有收获。反对内卷，从我做起。</p><h3 id="访问量"><a href="#访问量" class="headerlink" title="访问量"></a>访问量</h3><blockquote><p>以下是单纯的成就感时间：</p></blockquote><p>Lean Cloud API 访问次数统计：<img src="https://s2.loli.net/2023/04/15/i6zutDYdFhLGHEn.png" alt="Lean Cloud API 访问次数统计"></p><p>博客访问次数统计：<img src="https://s2.loli.net/2023/04/15/nCEPsd1ke5XSMgO.png" alt="Google Analytics"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Operator System Lab 2 上机实验回顾</title>
    <link href="https://toby-shi-cloud.github.io/posts/oslab2.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oslab2.html</id>
    <published>2023-04-03T16:00:00.000Z</published>
    <updated>2023-04-04T02:12:21.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Exam"><a href="#Exam" class="headerlink" title="Exam"></a>Exam</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>实现函数 <code>u_int&nbsp;page_perm_stat(Pde *pgdir,&nbsp;struct&nbsp;Page *pp, u_int perm_mask)</code> 。</p><p>函数介绍：遍历以 <code>pgdir</code> 为页目录基地址的整个二级页表，找到指向 <code>pp</code> 的且权限至少为 <code>perm_mask</code> 页表项个数，并输出找到的个数。</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">u_int <span class="token function">page_perm_stat</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp<span class="token punctuation">,</span> u_int perm_mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>u_int count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pde <span class="token operator">*</span>pgdir_entryp <span class="token operator">=</span> pgdir <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte_entryp <span class="token operator">=</span> pte <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte_entryp <span class="token operator">&amp;</span> perm_mask<span class="token punctuation">)</span> <span class="token operator">==</span> perm_mask<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pa2page</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> pp<span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><code>u_int count = 0;</code> 定义了一个用于计数的变量。</li><li><code>for (u_int i = 0; i &lt; (1u &lt;&lt; 10); i++)</code> 这层循环遍历页目录下的所有页表项。</li><li><code>Pde *pgdir_entryp = pgdir + i;</code> 这是页目录下的页表项。</li><li><code>if (*pgdir_entryp &amp; PTE_V)</code> 如果这个页表项是有效的。</li><li><code>Pte *pte = (Pte *) KADDR(PTE_ADDR(*pgdir_entryp));</code> <code>PTE_ADDR</code> 取高 20 位，然后 <code>KADDR</code> 把物理地址转换为虚拟地址，于是得到 (二级) 页表基地址。</li><li><code>for (u_int j = 0; j &lt; (1u &lt;&lt; 10); j++)</code> 遍历整个页表。</li><li><code>Pte *pte_entryp = pte + j;</code> 这是一个页表项。</li><li><code>(*pte_entryp &amp; PTE_V)</code> 判断页表项是否有效。</li><li><code>(*pte_entryp &amp; perm_mask) == perm_mask</code> 判断页表项是否包含相应权限。</li><li><code>pa2page(PTE_ADDR(*pte_entryp)) == pp</code> 判断是否指向指定页表，<code>pa2page</code> 把物理地址转换为页表控制结构体。</li></ol><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>实现内存交换机制。不限制策略和效率。</p><p>指定位于 $[0x3900000, 0x3910000)$ 的 16 个物理页作为可交换内存。使用 <code>swap_alloc</code> 申请可交换内存，如果可交换内存全部已满，则将一个页面换出到外存。使用 <code>swap_lookup</code> 查找虚拟地址对应物理内存，如果该内存已被换出，则需要换入。</p><p>这里课程组使用了一个 <code>u_char</code> 数组模拟外存，总计有 64 个外存页。我们只需要调用 <code>disk_alloc</code> 和 <code>disk_free</code> 就可以申请和释放外存了。</p><p>题目为填空题，已有代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;swap.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Page_list</span> page_free_swapable_list<span class="token punctuation">;</span><span class="token keyword">static</span> u_char <span class="token operator">*</span><span class="token function">disk_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disk_free</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span>pdisk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">LIST_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> SWAP_PAGE_BASE<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SWAP_PAGE_END<span class="token punctuation">;</span> i <span class="token operator">+=</span> BY2PG<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_INSERT_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">,</span> pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Interface for 'Passive Swap Out'</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span><span class="token function">swap_alloc</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Step 1: Ensure free page</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LIST_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Your Code Here (1/3) */</span><span class="token punctuation">}</span><span class="token comment">// Step 2: Get a free page and clear it</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">LIST_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">page2kva</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Interfaces for 'Active Swap In'</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">is_swapped</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Your Code Here (2/3) */</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Your Code Here (3/3) */</span><span class="token punctuation">}</span>Pte <span class="token function">swap_lookup</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Step 1: If corresponding page is swapped out, swap it in</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_swapped</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">swap</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Step 2: Look up page table element.</span>Pte <span class="token operator">*</span>ppte<span class="token punctuation">;</span><span class="token function">page_lookup</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ppte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Step 3: Return</span><span class="token keyword">return</span> ppte <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">*</span>ppte<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Disk Simulation (Do not modify)</span>u_char swap_disk<span class="token punctuation">[</span>SWAP_DISK_NPAGE <span class="token operator">*</span> BY2PG<span class="token punctuation">]</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span>BY2PG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u_char swap_disk_used<span class="token punctuation">[</span>SWAP_DISK_NPAGE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> u_char <span class="token operator">*</span><span class="token function">disk_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> alloc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>alloc <span class="token operator">&lt;</span> SWAP_DISK_NPAGE <span class="token operator">&amp;&amp;</span> swap_disk_used<span class="token punctuation">[</span>alloc<span class="token punctuation">]</span><span class="token punctuation">;</span> alloc<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">assert</span><span class="token punctuation">(</span>alloc <span class="token operator">&lt;</span> SWAP_DISK_NPAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>swap_disk_used<span class="token punctuation">[</span>alloc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>swap_disk<span class="token punctuation">[</span>alloc <span class="token operator">*</span> BY2PG<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disk_free</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span>pdisk<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> offset <span class="token operator">=</span> pdisk <span class="token operator">-</span> swap_disk<span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>offset <span class="token operator">%</span> BY2PG <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>swap_disk_used<span class="token punctuation">[</span>offset <span class="token operator">/</span> BY2PG<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存交换流程：</p><ol><li>换入过程：<ol><li>申请一个可交换内存页（使用 <code>swap_alloc</code>）</li><li>将换出到外存的数据全部拷贝到新申请到的页</li><li>将所有指向该外存的页表项全部指向新内存页</li><li>将所有指向该外存的页表项的 <code>PTE_V</code> 置 <code>1</code>，<code>PTE_SWP</code> 置 <code>0</code></li><li>释放外存页</li></ol></li><li>换出过程：<ol><li>选择一个要换出的内存页（任何策略都可以接受）</li><li>申请一个新的外存页（使用 <code>disk_alloc</code>）</li><li>将所有指向该内存页的页表项全部指向新外存页</li><li>将所有指向该内存页的页表项的 <code>PTE_V</code> 置 <code>0</code>，<code>PTE_SWP</code> 置 <code>1</code></li><li>复制内存页的全部数据到外存</li><li>释放内存页，并将其插入空闲页表队列</li></ol></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Your-Code-Here-1-x2F-3"><a href="#Your-Code-Here-1-x2F-3" class="headerlink" title="Your Code Here (1/3)"></a>Your Code Here (1/3)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span><span class="token function">swap_alloc</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Step 1: Ensure free page</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LIST_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// random chose one page to swap out</span>        u_long pa <span class="token operator">=</span> <span class="token number">0x3900000</span> <span class="token operator">+</span> <span class="token punctuation">(</span>asid <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> BY2PG<span class="token punctuation">;</span> <span class="token comment">// chose page (asid % 16)</span>        u_long da <span class="token operator">=</span> <span class="token punctuation">(</span>u_long<span class="token punctuation">)</span> <span class="token function">disk_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alloc a disk page</span>        <span class="token function">page_swap_out_lookup</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update page table entries</span>        <span class="token comment">// note: copy memory should use va, thus using KADDR to convert</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy memory</span>        <span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get page</span>        pp<span class="token operator">-&gt;</span>pp_ref <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// no looger use</span>        <span class="token function">page_free</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// free page</span>        <span class="token function">LIST_INSERT_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">,</span> pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// insert to head</span>    <span class="token punctuation">}</span>    <span class="token comment">// Step 2: Get a free page and clear it</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">LIST_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">page2kva</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Your-Code-Here-2-x2F-3"><a href="#Your-Code-Here-2-x2F-3" class="headerlink" title="Your Code Here (2/3)"></a>Your Code Here (2/3)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">is_swapped</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// note: you can refer to va2pa in pmap.h</span>    pgdir <span class="token operator">=</span> <span class="token operator">&amp;</span>pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// get pgdir entry</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// not valid</span>    Pte <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get page table entry</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pte<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pte<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_SWP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// swapped</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// not swapped</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Your-Code-Here-3-x2F-3"><a href="#Your-Code-Here-3-x2F-3" class="headerlink" title="Your Code Here (3/3)"></a>Your Code Here (3/3)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">swap_alloc</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alloc a new page</span>    Pte <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get pte of va</span>    u_long da <span class="token operator">=</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pte<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get da what pte point to</span>    u_long kva <span class="token operator">=</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token function">page2kva</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get kva of the new page</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>kva<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>da<span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy from disk to the new page</span>    u_long pa <span class="token operator">=</span> <span class="token punctuation">(</span>u_long<span class="token punctuation">)</span> <span class="token function">page2pa</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get pa of the new page</span>    <span class="token function">page_swap_in_lookup</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update page table entries</span>    <span class="token function">disk_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span>da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// free disk memory</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Tool-Functions"><a href="#Tool-Functions" class="headerlink" title="Tool Functions"></a>Tool Functions</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// note: these are similar to page_perm_stat in Lab2-exam.</span><span class="token comment">/* Overview: *   Walk through all the page table entries of pgdir *   to find all the entries that point to pa *   and change these entries to satify swap outs. */</span><span class="token keyword">void</span> <span class="token function">page_swap_out_lookup</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long pa<span class="token punctuation">,</span> u_long da<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pde <span class="token operator">*</span>pgdir_entryp <span class="token operator">=</span> pgdir <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte_entryp <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte <span class="token operator">=</span> pte_entryp <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// point to da</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token operator">~</span>PTE_V<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_SWP<span class="token punctuation">;</span> <span class="token comment">// modify term</span>u_long va <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>j <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">tlb_invalidate</span><span class="token punctuation">(</span>asid<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invalidate TLB</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* Overview: *   Walk through all the page table entries of pgdir *   to find all the entries that point to da *   and change these entries to satify swap ins. */</span><span class="token keyword">void</span> <span class="token function">page_swap_in_lookup</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long pa<span class="token punctuation">,</span> u_long da<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pde <span class="token operator">*</span>pgdir_entryp <span class="token operator">=</span> pgdir <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte_entryp <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte <span class="token operator">=</span> pte_entryp <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_SWP<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// point to pa</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token operator">~</span>PTE_SWP<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_V<span class="token punctuation">;</span> <span class="token comment">// modify term</span>u_long va <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>j <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">tlb_invalidate</span><span class="token punctuation">(</span>asid<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invalidate TLB</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实整篇写下来也没有什么难度。可是在考场上要一下写那么多内核代码还是很困难的。特别是你不理解每个变量名是什么意思的时候。另外善用 <code>pmap.h</code> 和 <code>mmu.h</code> 中的地址相关宏也是很重要的。</p><ol><li><code>PDX(va)</code> 页目录偏移量，即 <code>((((u_long)(va)) &gt;&gt; 22) &amp; 0x03FF)</code></li><li><code>PTX(va)</code> 页表偏移量，即 <code>((((u_long)(va)) &gt;&gt; 12) &amp; 0x03FF)</code></li><li><code>PTE_ADDR(pte)</code> 获取页表项中的物理地址，即 <code>((u_long)(pte) &amp; ~0xFFF)</code>，也就是获取高 20 位</li><li><code>PADDR(kva)</code> <code>kseg0</code> 处虚拟地址 → 物理地址，即 <code>(kva - ULIM)</code>，<code>ULIM</code> 是 <code>0x80000000</code></li><li><code>KADDR(pa)</code>  物理地址 → <code>kseg0</code> 处虚拟地址，即 <code>(kva + ULIM)</code>，<code>ULIM</code> 是 <code>0x80000000</code></li><li><code>u_long va2pa(Pde *pgdir, u_long va)</code> 查页表，虚拟地址 → 物理地址</li><li><code>struct Page *pa2page(u_long pa)</code> 物理地址 → 页控制块</li><li><code>u_long page2pa(struct Page *pp)</code> 页控制块 → 物理地址</li><li><code>u_long page2kva(struct Page *pp)</code> 页控制块 → <code>kseg0</code> 处虚拟地址</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="操作系统" scheme="https://toby-shi-cloud.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="OS" scheme="https://toby-shi-cloud.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented 2023 第一单元总结</title>
    <link href="https://toby-shi-cloud.github.io/posts/oounit1.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oounit1.html</id>
    <published>2023-03-18T20:00:00.000Z</published>
    <updated>2023-03-18T20:00:10.189Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一单元作业主要要求是进行表达式化简。一共三次作业。第一次是较为简单的表达式，只涉及一层括号，加减乘和乘方。第二次作业增加了三角函数和嵌套括号。第三次作业增加了求导因子。</p><p>总结一下我的成果，很高兴在没有出现任何 Bug 的情况下通关第一单元，当然这很大程度上要归功于搭建了评测机。搭建一个好的评测机，一个人的努力是不够的，所以我在 GitHub 上开了一个私有的仓困，并邀请了几个朋友一起参与开发。当然了最后还是我写了绝大部分，有的朋友只是在白嫖，甚至还有的连白嫖都没有学会。但是也要感谢所有做出贡献的朋友，帮我发现了几个 Bug，还让我成功的 Hack 到了房友。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>一个好的架构是整个项目成功的关键。<a href="https://toby-shi-cloud.github.io/posts/oohw1.html">第一次作业</a>时我的架构就不太理想，十分混乱。于是在第二次作业中狠心重构。于是在效率和复杂度上都得到了极大层度的提升。</p><p>老师说很多同学的 Bug 都是因为深浅拷贝处理不当。所以我重构后的第二次作业，不再进行任何拷贝，一是减少了深拷贝开销，而是也不需要考虑拷贝出错的问题。</p><p>下面是我的架构的 UML 图：</p><p><img src="https://s2.loli.net/2023/03/19/ADxSkIsu1y25cr3.png" alt="UML"></p><p>简而言之，我所有的表达式相关类都是不可被 public 方法修改的，所有计算都将生成新的表达式。这样就不存在拷贝的问题了。当然了频繁运算会带来海量开销，所以我引入了 <code>ExpressionBuilder</code> 类，可以支持表达式加法，方法是直接修改，而不是拷贝。<code>Expression</code> 和 <code>ExpressionBuilder</code> 之间的关系是仿照 <code>String</code> 和 <code>StrinBuilder</code> 建立的。</p><p>另外，为了方便三角函数化简的实现，我的表达式存储方式是 <code>整式*若干项三角函数+...+整式*若干项三角函数</code>，这样就可以把三角函数单独拿出来化简了。</p><h2 id="评测机"><a href="#评测机" class="headerlink" title="评测机"></a>评测机</h2><p>使用 sympy 进行评测。使用递归下降和正则表达式 check 表达式的合法性。使用递归下降 generate 数据。这些都是较为常规的思路，就不再赘述了。</p><p>特别的一点是，我挑选出几十组特殊的数据，然后每次在本地评测后都将评测记录上传到云端，然后从云端索取当前最好的有效长度，以此为依据计算性能分。这在第一次作业还是发挥了一些作用，后续作业中，由于我们开发小组的集体摆烂式优化，所以大家都没那么在乎性能分，这个功能也就没有发挥出太大作用了。</p><h2 id="得分"><a href="#得分" class="headerlink" title="得分"></a>得分</h2><ul><li>作业 1，强测 100 分，互测 +0 分；</li><li>作业 2，强测 97.9019 分，互测 8.5 分；</li><li>作业 3，强测 94.5088 分，互测 10.5 分。</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p><img src="https://s2.loli.net/2023/03/18/SsZax1IyVFAXMDl.png" alt="Contributors"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac launchctl 自动后台任务</title>
    <link href="https://toby-shi-cloud.github.io/posts/mac-launchctl-auto-background-task.html"/>
    <id>https://toby-shi-cloud.github.io/posts/mac-launchctl-auto-background-task.html</id>
    <published>2023-03-10T11:00:00.000Z</published>
    <updated>2023-03-10T18:19:43.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从有了一个 mac mini 后，我就有了一个可以长时间不关机，不移动，不睡眠的主机，或者说，我可以把它当做一个私有的微型服务器。 正如前文所言，这个服务器将会至少运行 Alist 云盘，当然也可以顺便远程 ssh 用于跑代码。</p><p>由于在这个过程中踩了好一些坑，遂写本文记录。</p><h2 id="ssh-排雷"><a href="#ssh-排雷" class="headerlink" title="ssh 排雷"></a>ssh 排雷</h2><p>mac 是有集成 ssh 的，所以只需要在系统设置中打开 22 端口的远程登录权限就可以 ssh 连接上了。</p><p>可是因为我 ssh 连接 GitHub 的时候遇到了 <code>kex_exchange_identification error</code>，所以尝试了更改 sshd 的配置。不过有一回改配置改炸掉了，GitHub 能连接上了，但是其他设备连接本机却出现了 <code>kex_exchange_identification error: connection reset</code>。</p><p>我尝试了很多种方法，包括检查白名单黑名单等等，Google 和 StackOverflow 都搜索过，但是一直没有解决问题。</p><p>后来偶然有一天我想到，如果能直接输出 ssh 的日志不就能知道有什么问题了吗！</p><p>果然，我在 Stack Overflow 上搜索 <code>mac ssh log</code>，找到了 <a href="https://stackoverflow.com/questions/43382825/where-to-find-sshd-logs-on-macos-sierra">logging - Where to find sshd logs on MacOS sierra - Stack Overflow</a>。第一高赞回答 (by <a href="https://stackoverflow.com/users/10900895/jerrythea">jerrythea</a>) 就完美解决了我的问题。</p><p>当我获取到日志信息后，立马就发现了问题所在：sshd_config 配置重复定义了一个量！删掉这一行后，ssh 立马恢复正常！</p><h2 id="launchctl-排雷"><a href="#launchctl-排雷" class="headerlink" title="launchctl 排雷"></a>launchctl 排雷</h2><p>在上一篇文章配置 Alist 的时候，配置了守护进程，不过我确实觉得那个守护进程好像根本没有作用。于是就长期把 Alist 挂在前台（我还以为只能这样）。</p><p>后来我在设置一个定时任务的时候，就发现了大问题。不仅定时无效，而且 <code>launchctl start</code> 也不能正常运行。</p><p>遂上网搜索，在知乎上找到一篇非常完美的回答 <a href="https://zhuanlan.zhihu.com/p/388287366">Mac 使用 Launchctl 设置后台定时任务无效的解决方法 - 知乎</a>。其中最最关键的一步就是下载一个 <code>launchcontrol</code> 检测和管理所有的 <code>launchctl tasks</code>。</p><p>使用 mac 的 homebrew 安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> launchcontrol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>又是瞬间发现问题瞬间觉悟！</p><p>这下我不仅定时任务成功了，Alist 也不用挂前台了，cpolar 也可以长期运行了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://stackoverflow.com/questions/43382825/where-to-find-sshd-logs-on-macos-sierra">logging - Where to find sshd logs on MacOS sierra - Stack Overflow</a></li><li><a href="https://zhuanlan.zhihu.com/p/388287366">Mac 使用 Launchctl 设置后台定时任务无效的解决方法 - 知乎</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Shell" scheme="https://toby-shi-cloud.github.io/categories/Shell/"/>
    
    
    <category term="Apple" scheme="https://toby-shi-cloud.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented 2023 作业 1</title>
    <link href="https://toby-shi-cloud.github.io/posts/oohw1.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oohw1.html</id>
    <published>2023-02-28T07:00:00.000Z</published>
    <updated>2023-02-28T07:16:40.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于目前距离第一单元作业结束还有很久很久，所以本文会较为简略的描述我的思路架构和测试。还请诸位谅解。</p><h2 id="思路和架构"><a href="#思路和架构" class="headerlink" title="思路和架构"></a>思路和架构</h2><p>总体而言，思路和架构都可以大部分模仿 Training （两个 Training，一个是 正则表达式/逆波兰表达式，一个是 递归下降）我模仿的第二个。我的思路是一个 Lexer 分析 Token， 一个 Parser 解析字符串，最后 Simplifie 一下表达式就可以了。</p><h3 id="主要类结构"><a href="#主要类结构" class="headerlink" title="主要类结构"></a>主要类结构</h3><ol><li>BaseExpr - interface - 基类。</li><li>Expression - 存储由 Parser 分析而来的，由 Term 构成的表达式</li><li>Term - 储存由 Parser 分析而来的，由 Factor 构成的表达式</li><li>Factor - 储存由 Parser 分析而来的，由 <code>base ** index</code> 构成，其中 base 可能是 Expression，Constant，或 Variable。</li><li>Lexer - 词法分析</li><li>Parser - 表达式解析</li><li>Simple - 化简表达式</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>自动化测试真好用。所以强烈建议大家都去自己写一下。如果自己不能写的话，记得请一个会写的大佬吃饭（确信）。</p><h3 id="正确性测试"><a href="#正确性测试" class="headerlink" title="正确性测试"></a>正确性测试</h3><p>第一单元作业是表达式化简。人生苦短，我用 Python。<code>sympy</code> 库可以非常非常方便的帮助你验证两个表达式是否是等价的（唯一需要注意的是需要去除前导零）。</p><p>这里就贴个代码给大家参考参考吧（应该很好理解吧？）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_leading_zero</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Delete leading zero"""</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\D)0+(\d)'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\g&lt;1&gt;\g&lt;2&gt;'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    s1 - input str; s2 - output str;    return True if s1 == s2 else False    """</span>    <span class="token keyword">if</span> <span class="token string">'('</span> <span class="token keyword">in</span> s2 <span class="token keyword">or</span> <span class="token string">')'</span> <span class="token keyword">in</span> s2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ifunc <span class="token operator">=</span> sympy<span class="token punctuation">.</span>sympify<span class="token punctuation">(</span>parse_leading_zero<span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span>        ofunc <span class="token operator">=</span> sympy<span class="token punctuation">.</span>sympify<span class="token punctuation">(</span>parse_leading_zero<span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> ifunc<span class="token punctuation">.</span>equals<span class="token punctuation">(</span>ofunc<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span> <span class="token comment"># sympify error</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能分测试"><a href="#性能分测试" class="headerlink" title="性能分测试"></a>性能分测试</h3><p>本次作业性能分可以理解为输出的化简后表达式越短分越高。不过由于你的表达式是否短取决于是否有其他同学比你更短。所以我们需要一个数据库保存大家测试的结果，然后找出每组数据最短的表达式的长度是多少，借此评估性能分。</p><p>这里我采用了 Lean Cloud 的免费数据库来储存数据，然后将测试脚本发给多人进行测试，这样下来，大家都知道自己的性能分处于什么水平了（当然这要求你的朋友们中都是些大佬）。</p><p>获得到得分后的计算就按照指导书中所述就可以啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_grade</span><span class="token punctuation">(</span>lp<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> lmin<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> lp <span class="token operator">/</span> lmin    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> base    <span class="token keyword">elif</span> x <span class="token operator">&gt;=</span> <span class="token number">1.5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0.0</span> <span class="token operator">*</span> base    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">31.8239</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">155.9038</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">279.2180</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">214.0743</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">57.9370</span><span class="token punctuation">)</span> <span class="token operator">*</span> base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lean Cloud 的使用方法可以参考官方文档，这里就不详细介绍了。大家也可以使用其他数据库。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> leancloudleancloud<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token string">'appID'</span><span class="token punctuation">,</span> <span class="token string">'appKey'</span><span class="token punctuation">)</span>HW1 <span class="token operator">=</span> leancloud<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'HW1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>sh<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query <span class="token operator">=</span> HW1<span class="token punctuation">.</span>query    query<span class="token punctuation">.</span>equal_to<span class="token punctuation">(</span><span class="token string">'hash'</span><span class="token punctuation">,</span> sh<span class="token punctuation">)</span>    data_list <span class="token operator">=</span> query<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        last_length <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'lmin'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> last_length <span class="token operator">&gt;</span> length<span class="token punctuation">:</span>            data<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'lmin'</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> length        <span class="token keyword">return</span> last_length    <span class="token keyword">else</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> HW1<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'hash'</span><span class="token punctuation">,</span> sh<span class="token punctuation">)</span>        data<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'lmin'</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>        data<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h3><p>随机生成器通常就按照指导书上的介绍一一生成就可以了。框架如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Generators</span><span class="token keyword">def</span> <span class="token function">white_space_term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX_SINGLE_WHITE_SPACE_LENGTH<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>choice<span class="token punctuation">(</span>WHITE_SPACE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">integer_with_leading_zeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> MAX_INTEGER_LENGTH<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>choice<span class="token punctuation">(</span>DIGIT<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">integer_with_signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> choice<span class="token punctuation">(</span>PLUS_MINUS <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> integer_with_leading_zeros<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exponent</span><span class="token punctuation">(</span>smaller<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> smaller<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'**'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>INDEX<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'**'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>INDEX<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">power_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> PROBABILITY_OF_POWER_WITHOUT_EXPONENT<span class="token punctuation">:</span>        <span class="token keyword">return</span> choice<span class="token punctuation">(</span>VARIABLES<span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> exponent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> choice<span class="token punctuation">(</span>VARIABLES<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">expression_factor</span><span class="token punctuation">(</span>brackets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> PROBABILITY_OF_EXPRESSION_WITHOUT_EXPONENT<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> expression<span class="token punctuation">(</span>brackets <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> exponent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> expression<span class="token punctuation">(</span>brackets <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token keyword">def</span> <span class="token function">factor</span><span class="token punctuation">(</span>brackets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> brackets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">&lt;</span> PROBABILITY_OF_CONSTANT_FACTOR<span class="token punctuation">:</span>            <span class="token keyword">return</span> integer_with_signal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> res <span class="token operator">&lt;</span> PROBABILITY_OF_CONSTANT_FACTOR <span class="token operator">+</span> PROBABILITY_OF_VARIABLE_FACTOR<span class="token punctuation">:</span>            <span class="token keyword">return</span> power_function<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> expression_factor<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> PROBABILITY_OF_CONSTANT_FACTOR \                <span class="token operator">/</span> <span class="token punctuation">(</span>PROBABILITY_OF_CONSTANT_FACTOR <span class="token operator">+</span> PROBABILITY_OF_VARIABLE_FACTOR<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> integer_with_signal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> power_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">term</span><span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> factors<span class="token operator">=</span>MAX_FACTOR_PER_TERM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">/</span> factors<span class="token punctuation">:</span>        <span class="token keyword">return</span> choice<span class="token punctuation">(</span>PLUS_MINUS <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> factor<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> term<span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> factors <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> factor<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">expression</span><span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> terms<span class="token operator">=</span>MAX_TERM_PER_EXPRESSION<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">/</span> terms<span class="token punctuation">:</span>        <span class="token keyword">return</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>PLUS_MINUS <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> term<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> expression<span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> terms <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>PLUS_MINUS<span class="token punctuation">)</span> \               <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> term<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强测和互测"><a href="#强测和互测" class="headerlink" title="强测和互测"></a>强测和互测</h2><p>强测和互测均没有出现 bug。甚至更离谱的是，互测整个 room 都没有发现 bug。</p><p>不过根据其他同学反馈的信息，有一些数据值得一试：</p><ol><li><code>-1</code>（单独的数字）</li><li><code>0*x**0</code>（零的零次幂以及零乘以零次幂）</li><li><code>1+2+3\t  \t \t\t</code>（尾随空白符）</li><li><code>(x+y+z)**8</code>（几千项的展开）</li><li><code>---1</code>（多重符号）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用 Alist 和 IPV6 搭建私有云盘</title>
    <link href="https://toby-shi-cloud.github.io/posts/alist-with-ipv6.html"/>
    <id>https://toby-shi-cloud.github.io/posts/alist-with-ipv6.html</id>
    <published>2023-02-21T12:00:00.000Z</published>
    <updated>2023-02-21T15:00:59.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>拥有多个设备的人总是会担心数据同步问题，这也是为什么Apple生态显得那么的出色。可是当你既拥有Windows又拥有Mac的时候，文件同步就困难了起来，特别是两台电脑还不在同一个局域网内时。</p><p>因此我虽然很早就在考虑搭建云盘，但是直到我拥有了Mac我才觉得这件事情非常非常急迫。于是我花了一个下午找到了一个合适的开源私有云——Alist。</p><p>当然仅搭建了一个网站是不够的，还需要做内网穿透，我尝试了cpolar，但是速度实在太慢了。不过好在我们学校校园网有IPV6，这就是得设备之间的直连成为可能。</p><p>下图是完工后的样子。真好看啊。</p><p><img src="https://s2.loli.net/2023/02/21/1NHDF4RBWeVPSM8.png"></p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>整个搭建的过程算是十分的轻松加愉快的。因为Alist的官方文档实在是太详细了。</p><p>Alist官网：<a href="https://alist.nn.ci/">https://alist.nn.ci</a></p><p>Alist官方文档：<a href="https://alist.nn.ci/guide/">https://alist.nn.ci/guide/</a></p><p>Alist官方GitHub Release：<a href="https://github.com/Xhofe/alist/releases">https://github.com/Xhofe/alist/releases</a></p><p>安装流程如下：</p><ol><li><p>前往官方<a href="https://github.com/Xhofe/alist/releases">GitHub Release</a>下载最新版。</p><blockquote><p>Mac的话下载Darwin版的，M系列芯片选arm64，Intel芯片选amd64</p><p>安装在服务器或者linux上就选linux的就好</p><p>Windows的也有对应的版本</p></blockquote></li><li><p>对着<a href="https://alist.nn.ci/guide/install/manual.html">教程</a>run一边。</p></li><li><p>Daemon是守护进程的意思，避免进程被杀死，推荐也弄一弄。</p></li><li><p>打开<a href="http://localhost:5244，登陆admin账号开始配置。">http://localhost:5244，登陆admin账号开始配置。</a></p></li><li><p>首先当然是进行存储的配置，安装教程Storage相关的内容配置就可以啦。</p></li></ol><p><img src="https://s2.loli.net/2023/02/21/Uvkx21BqEfZ7Plp.png"></p><ol start="6"><li>然后“索引”可以配置一下，这样可以Ctrl+K或者Command+K搜索。</li><li>最后点击主页就可以开始使用了！</li></ol><h2 id="内网穿透和IPV6"><a href="#内网穿透和IPV6" class="headerlink" title="内网穿透和IPV6"></a>内网穿透和IPV6</h2><p>然而云盘搭建好后，其他电脑还是无法访问。因为两个电脑不在同一个局域网内，服务端又没有公网IP。</p><p>那么就有两种选择，一种是内网穿透，另一种是IPV6直连。</p><p>先说内网穿透，我尝试了免费的内网穿透工具cpolar，成功了，但是效果不太理想，因为cpolar的带宽实在是太低了，用作网页还好，用作云盘……100kb的速度实在不能接受，比度盘还差劲。</p><p>剩下的就是IPV6，这个很简单，IPV6是给每个电脑都分配了唯一地址，所以直接查到本机的IPV6地址就可以访问了。如果你的地址是2aaa:bbb:ccc:ddd:eee:fff:555:666，那么在地址栏输入http://[2aaa:bbb:ccc:ddd:eee:fff:555:666]:5244这样的就可以啦。</p><p>不过我听说需要配置一下光猫的防火墙才行。不过我两台电脑都在校园网里面就不用管这个了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="私有云" scheme="https://toby-shi-cloud.github.io/categories/%E7%A7%81%E6%9C%89%E4%BA%91/"/>
    
    
    <category term="私有云" scheme="https://toby-shi-cloud.github.io/tags/%E7%A7%81%E6%9C%89%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>你好博客 2 ？Hello Again?</title>
    <link href="https://toby-shi-cloud.github.io/posts/helloblog2.html"/>
    <id>https://toby-shi-cloud.github.io/posts/helloblog2.html</id>
    <published>2023-01-02T08:00:00.000Z</published>
    <updated>2023-01-02T09:35:31.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次改动的主要目的是提供一个 oopre 的题面查看和数据下载的方式。正好借此机会进一步的了解 hexo 博客的构建机制，为未来的改动打下基础。</p><h2 id="想要做的事儿"><a href="#想要做的事儿" class="headerlink" title="想要做的事儿"></a>想要做的事儿</h2><p>想法是开一个子页面 oopre，然后 index 就是一个介绍，给出每次作业的链接。然后其下的页面就是每次作业，再在每次作业最后加上一个下载数据链接即可。</p><h2 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h2><p>这下我基本上是理解了 hexo 的构建思路。首先就是所有的东西都储存在 source 这个目录下（当然可以在 hexo 的 config 里面更改），然后渲染后的成品放在 public 目录下，最后 push 到 github 时，把 public 目录下的东西覆盖 .deploy_git 然后发布即可。所以实际上 github 仓库内容是和 .deploy_git 目录同步的，.deploy_git又是来自 public 的，public 则是由 source 渲染得到的。</p><p>下面重点说一下渲染过程。首先检查 hexo 的 config 下的 <code>skip_render</code> 变量，这个数组里面的内容是绝对不用渲染，会直接复制进 public 目录。（小贴士：** 表示递归遍历文件夹下所有文件和文件夹）然后其他在 source 目录下的文件均会被渲染。渲染方式是首先看 md 文件头部有没有 <code>layout</code> 变量，有 <code>layout</code> 的，在主题目录里的 <code>layout</code> 目录下找到对应的 layout 文件渲染，否则一律按照 posts 渲染。至于 source 目录里两个下划线开头的目录，显然有特殊用处的嘛……</p><p>理解这些简单 Hexo 渲染流程之后，魔改就比较简单了，虽然我还不是很会写网页……</p><h2 id="关于这次的改动"><a href="#关于这次的改动" class="headerlink" title="关于这次的改动"></a>关于这次的改动</h2><p>这次的改动的话主要是新增了 oopre 相关的几个 ejs 文件。</p><ol><li>用于 index 的 <code>oopre.ejs</code>，这个主要功能是网页重定向，重定向至介绍 oopre 的那篇博客。</li><li>用于展示题面的 <code>oopre_hw.ejs</code>，主要由 <code>post.ejs</code> 复制而来，主要改动就是去除了一些不需要的判断语句，另外把内容页换成了 <code>oopre-detail-toc.ejs</code>。</li><li><code>_partial/oopre-detail-toc.ejs</code>，从 <code>_partial/post-detail-toc.ejs</code> 复制而来。主要改动就是把 <code>_partial/post-detail.ejs</code> 换成了 <code>_partial/oopre-detail.ejs</code>。</li><li><code>_partial/oopre-detail.ejs</code>，改动主要是 tag 和 category 恒定为 <code>oopre</code>，然后超链接恒为 <code>/oopre</code>。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>网页重定向：<a href="https://blog.csdn.net/penngrove/article/details/6933860">https://blog.csdn.net/penngrove/article/details/6933860</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="网页" scheme="https://toby-shi-cloud.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>2022年 C++（即oopre）作业自测</title>
    <link href="https://toby-shi-cloud.github.io/posts/oopre2022selftest.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oopre2022selftest.html</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-01-03T06:13:21.557Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言-amp-注意事项"><a href="#前言-amp-注意事项" class="headerlink" title="前言 &amp; 注意事项"></a>前言 &amp; 注意事项</h2><ol><li><p>所有数据均为官方输入+我的 AC 输出。</p></li><li><p>由于第一单元输出的浮点数采用<strong>误差比较</strong>，所以您的答案和我不同也可能是正确的。</p><blockquote><p>您可以考虑自行写一个评测机进行误差比较。</p></blockquote></li><li><p>数据可能不全。通过所有测试点也并不代表您的程序没有问题。</p></li><li><p>本网站没有设置任何自动化评测。</p></li><li><p>推荐大家同时熟悉 Git 的使用。</p></li><li><p>请养成良好的代码风格。这是有分的！</p></li></ol><h2 id="作业框架-amp-题面导航"><a href="#作业框架-amp-题面导航" class="headerlink" title="作业框架 &amp; 题面导航"></a>作业框架 &amp; 题面导航</h2><p>作业分为四个单元，第零单元，第一单元，第二单元，第三单元，其中第一和第二单元均有三次练习，为迭代开发。</p><table>    <tbody><tr> <th> 第零单元 </th> <td> 作业 0 </td> <td> <a href="../oopre/hw0"> hw0 </a> </td> </tr>    <tr> <th rowspan="3"> 第一单元 </th> <td> 作业 1 </td> <td> <a href="../oopre/hw1"> hw1 </a> </td> </tr>    <tr> <td> 作业 2 </td> <td> <a href="../oopre/hw2"> hw2 </a> </td> </tr>    <tr> <td> 作业 3 </td> <td> <a href="../oopre/hw3"> hw3 </a> </td> </tr>    <tr> <th rowspan="3"> 第二单元 </th> <td> 作业 4 </td> <td> <a href="../oopre/hw4"> hw4 </a> </td> </tr>    <tr> <td> 作业 5 </td> <td> <a href="../oopre/hw5"> hw5 </a> </td> </tr>    <tr> <td> 作业 6 </td> <td> <a href="../oopre/hw6"> hw6 </a> </td> </tr>    <tr> <th> 第三单元 </th> <td> 作业 7 </td> <td> <a href="../oopre/hw7"> hw7 </a> </td> </tr></tbody></table><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li><p><code>IDEA</code> 打不开，提示 <code>Internet Error</code>，试试管理员模式运行这个：</p><pre class="line-numbers language-none"><code class="language-none">net stop winnatnet start winnat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关于课程资料：<a href="../oopre/data/course_system_guidebook.zip">下载链接</a></p></li><li><p>这里有一个简单的 <code>Python</code> 评测机供参考：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>src1<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> src2<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    function check - this function is to check whether src2 is the same as src1 within acceptable error.        param src1 - standard answer split by '\\n'    param src2 - your answer split by '\\n'    '''</span>    <span class="token keyword">while</span> src1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        src1 <span class="token operator">=</span> src1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> src2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        src2 <span class="token operator">=</span> src2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>src1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>src2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Your answer is too long/short.'</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>src1<span class="token punctuation">,</span> src2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Your answer is too long/short on line </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span>        <span class="token keyword">for</span> e1<span class="token punctuation">,</span> e2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> e1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">','</span> <span class="token keyword">or</span> e1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> e1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> e2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Your answer differs from the standard answer on line </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span>                e1 <span class="token operator">=</span> e1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                e2 <span class="token operator">=</span> e2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> e1 <span class="token operator">==</span> e2<span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                n1 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>                n2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1e-5</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>            <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Your answer differs from the standard answer on line </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span>    <span class="token keyword">return</span> <span class="token string">'Your answer is correct!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计组实验的回顾</title>
    <link href="https://toby-shi-cloud.github.io/posts/coreview.html"/>
    <id>https://toby-shi-cloud.github.io/posts/coreview.html</id>
    <published>2022-12-17T16:00:00.000Z</published>
    <updated>2022-12-29T07:57:31.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="「总结」"><a href="#「总结」" class="headerlink" title="「总结」"></a>「总结」</h2><p><img src="https://s2.loli.net/2022/12/29/rDpC9cK2unPEgFT.png"></p><p>清一色的「通过」。</p><p>可惜没有考 P8。还是太摆烂啦！</p><p>虚假的原因：考期了。</p><p>真实的原因：肝原！</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="快速变换模块声明为模块实例"><a href="#快速变换模块声明为模块实例" class="headerlink" title="快速变换模块声明为模块实例"></a>快速变换模块声明为模块实例</h3><p>从使用 Verilog 搭建 CPU 开始，我们就会遇到许多很长很长的模块定义，这个时候由于除了虚拟机上的 Sublime 以外，都没有自动生成模块实例的方式，手动将 <code>input [31:0] addr</code> 之类的模块声明转换为 <code>.addr(addr)</code> 之类的实例声明很困难。有没有什么快速的方案呢？当然是有的。使用正则表达式替换即可。</p><p>如在 VSCode 中：<br>查找 <code>(input|output)\s*(\[.*?\])?\s*(\w+?)(,|\n)</code> 替换为 <code>.$3($3)$4</code> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>BUAA Tools 使用文档</title>
    <link href="https://toby-shi-cloud.github.io/posts/buaatoolsusage.html"/>
    <id>https://toby-shi-cloud.github.io/posts/buaatoolsusage.html</id>
    <published>2022-11-19T15:30:00.000Z</published>
    <updated>2022-11-26T13:32:07.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本使用指南以 iPad 界面为主。在 iPhone 上使用体验略有不同。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p>如下图所示，登录界面简单而明显。输入您的统一身份认证的学号和密码即可登录。</p><p><img src="https://s2.loli.net/2022/11/19/Nv69iU8puTFcJeq.jpg"></p><p><strong>Feature</strong></p><ul><li>对于密码错误和网络错误都会给予相应的提示。</li><li>可以使用 iCloud 钥匙串自动填充学号密码。</li><li>仅首次启动或手动退出登录后需要登录，再次启动 App 可以自动登录。</li></ul><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>左侧导航栏会显示信息概览。默认顺序依次为 校园网流量，TD 次数，校园卡余额，健康打卡状态，核酸排队情况。</p><p><img src="https://s2.loli.net/2022/11/20/LYPOgs2BD7R6vlt.png"></p><p><strong>Feature</strong></p><ul><li>导航栏可以简单概览目前状态。</li><li>点击导航栏可以查看详细页面。</li><li>导航栏顺序可以设置。</li></ul><h3 id="详细视图"><a href="#详细视图" class="headerlink" title="详细视图"></a>详细视图</h3><p>大部分视图即为对应的官网。这里以点击每日健康打开为例。</p><p><img src="https://s2.loli.net/2022/11/20/N9DizKRXYkrVoCc.png"></p><p><strong>Feature</strong></p><ul><li>会主动询问是否允许访问位置。</li><li>拥有与微信小程序或智慧北航一致的行为。</li><li>可以交互的真实网页。</li></ul><h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p>可以调整视图顺序和对一些特定视图进行设置。设置界面由右上角任务图像唤出。</p><p><img src="https://s2.loli.net/2022/11/20/wYbV4vImtThN5Cq.png"></p><p><strong>Feature</strong></p><ul><li>自由调整其中的任何设置。</li><li>醒目的退出登录标识。</li><li>可以取消设置。</li></ul><h3 id="其他-Feature"><a href="#其他-Feature" class="headerlink" title="其他 Feature"></a>其他 <strong>Feature</strong></h3><ul><li>自由的在深色主题和浅色主题之间切换（跟随系统）。</li><li>自适应屏幕大小变化（支持台前调度的各个大小）。</li><li>可在  iPhone，iPad，以及 Mac 上运行。[^1]</li></ul><p>[^1]: 仅支持 iOS 16，iPadOS 16，或 macOS 13 及以上</p><p><img src="https://s2.loli.net/2022/11/20/bkFj7oVvKGdsqAy.png"></p><p><img src="https://s2.loli.net/2022/11/20/Lh62XHpnR1FPWkQ.jpg"></p><h2 id="从源代码安装"><a href="#从源代码安装" class="headerlink" title="从源代码安装"></a>从源代码安装</h2><ol><li>打开 <code>Xcode</code> 点击<code>Xcode-Preferences</code>或者使用快捷键<code>command+,</code>打开偏好设置，在 <code>Accounts</code> 中添加自己的 <code>AppleID</code>，添加成功后关闭偏好设置。</li><li>在左侧视图中点击App的名称，选中<code>signing &amp; Capabilities</code>，在 <code>Signing</code> 栏的 <code>Development Team</code> 中选中自己 <code>AppleID</code> 的名字。</li><li>鼠标悬停在中间正上方，会出现为什么构建应用程序，选中Any iOS Device，然后点击菜单栏<code>Product-Archive</code>。</li><li>在弹出菜单出选择 <code>Distribute App</code>，选择 <code>Development</code>，然后一路 <code>Next</code> 下去，就可以看到在相同目录下生成了一个文件夹，点开文件夹，就可以得到由你自己签名的 <code>ipa</code> 安装包。</li><li>自签安装包是可以安装使用的，但是有效期只有 7 天。因此可以考虑使用 <code>AltStore</code> 等自签工具来完成续签。<code>AltStore</code> 使用方法详见<a href="https://altstore.io/">官网</a>。</li></ol><h2 id="从-ipa-安装"><a href="#从-ipa-安装" class="headerlink" title="从 ipa 安装"></a>从 ipa 安装</h2><ol start="0"><li>安装前请确保您的设备在 iOS 16，iPadOS 16，或 macOS 13 及以上</li><li>从 <a href="https://github.com/Toby-Shi-cloud/BUAA-Tools/releases/">GitHub</a> 上下载 最新 ipa 文件，或者直接点击<a href="https://github.com/Toby-Shi-cloud/BUAA-Tools/releases/download/v1.0/BUAA-Tools.ipa">此链接</a>下载 1.0 版本</li><li>推荐使用 <a href="https://altstore.io/">AltSotre</a> 侧载</li><li>记得定期重签名</li><li>Enjoy BUAA Tools</li></ol><h2 id="AltStore-侧载方法"><a href="#AltStore-侧载方法" class="headerlink" title="AltStore 侧载方法"></a>AltStore 侧载方法</h2><ol><li>在电脑上安装 Alt Server，下载链接：<a href="https://altstore.io/">https://altstore.io/</a></li><li>将要 IOS 设备连接到电脑，然后使用 Alt Server 为 IOS设备安装 Alt Store</li><li>通常会要求你输入 Apple ID，因为任何 App 都需要 Apple ID 进行签名</li><li>如果不信任 AltStore 可以考虑重新注册一个新的 Apple ID 专门用于签名</li><li>在 IOS 设备上信任开发者（设置 - 通用 - VPN与设备管理）</li><li>打开 IOS 设备上的 AltStore，My Apps 栏中点击加号，选中 ipa 文件安装</li><li>注意需要在 7 天之内再次打开 AltStore 进行再次签名</li><li>签名时，必须要通过局域网或有线连接到装有 AltServer 的电脑（注意：北航校园网并非局域网）</li><li>如果忘记签名，IOS 提示应用不再可用，重新连接电脑安装 AltStore 然后再次给侧载应用签名即可</li></ol><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>特别感谢对本软件的提供建议或帮助的所有人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Swift编程" scheme="https://toby-shi-cloud.github.io/categories/Swift%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Swift" scheme="https://toby-shi-cloud.github.io/tags/Swift/"/>
    
    <category term="Apple" scheme="https://toby-shi-cloud.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>从教务网站上获取课表并导入iCloud日历</title>
    <link href="https://toby-shi-cloud.github.io/posts/cdutcmcalendar.html"/>
    <id>https://toby-shi-cloud.github.io/posts/cdutcmcalendar.html</id>
    <published>2022-10-14T20:30:00.000Z</published>
    <updated>2022-10-15T03:44:35.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为我家羽羽说她的课表一天一个样，每次都手动输入到日历中的话非常不方便，所以我打算帮她把课表从教务网站上爬出来，然后写在ics文件中，这样就可以一键导入了。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>打开他们学校的教务网站，我就麻了，因为必须要输入验证码。这对自动化脚本来说是一个非常阴间的事情，所以考虑使用<code>selenium</code>，打开网页后，人工登录，程序检测到网页跳转后开始运行。</p><p>登录完成后就可以看到课表，默认是月课表，所以只需要让脚本自己翻页然后读取网页全部内容即可。通过<code>F12</code>，我们可以看到那些写着有课程信息的元素大致长什么样子，使用正则表达式即可爬取所有课程了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在经历了漫长了写代码过程之后，终于到了运行的时候啦！看到一个程序能跑起来，真的是很开心的一件事！（大家也可以尝试复制下面的<code>代码</code>，自己运行试试看）</p><p>如果读者想要运行以下代码，需要进行下列步骤：</p><ol><li>安装一个Python（这不是废话吗，建议是3.6以上，我自己用的3.10）</li><li>安装<code>icalendar</code>和<code>selenium</code>（在命令行执行<code>pip install xxx</code>）</li><li>如果你使用<code>Chrome</code>浏览器，请下载和你的<code>Chrome</code>匹配的<code>chromedriver</code>（见参考链接6），并为<code>chromedriver</code>添加环境变量，或放在脚本所在目录下。</li><li>如果你不使用<code>Chrome</code>浏览器，请自行搜索<code>selenium</code>如何使用你的浏览器（<code>FireFox</code>，<code>Edge </code>和<code>Safari</code>等主流浏览器都是支持的，如果你使用其他浏览器，也可以尝试，因为它们大概率和<code>Google Chrome</code>使用同样的内核，只不过版本较老）另外，不要忘记更改<code>chrome = Chrome()</code>这条语句。</li><li>在脚本所在目录下打开命令行，输入<code>python xxx</code>即可运行（<code>xxx</code>是你的脚本名，通常你应该让后缀是<code>.py</code>）（通常安装python时会关联文件，所以双击运行也不是不可以）</li><li>日程会储存在<code>cdutcm.ics</code>中，许多日历App都支持<code>.ics</code>格式</li></ol><h2 id="配置更改"><a href="#配置更改" class="headerlink" title="配置更改"></a>配置更改</h2><p>有如下内容可能需要更改：</p><ol><li>如果你不是使用的<code>Chrome</code>，更改<code>chrome = Chrome()</code>（第68行）</li><li>默认只会获取课程，而不会获取考试，若要获取考试请更改正则表达式中的<code>上课任务</code>（第32行）</li><li>默认是秋季学期课表，若要获取春季学期课表，更改<code>while month != '八月'</code>和<code>while month != '二月'</code>，交换<code>八月</code>金和<code>二月</code>的位置大概就可以了（第76和83行）</li><li>更改<code>begin_date = datetime(2022, 8, 29, tzinfo=UTC8)</code>中的<code>2022, 8, 29</code>为本学期开学第一周星期一的时间（第97行）</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> re<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token keyword">import</span> icalendar <span class="token keyword">as</span> ics<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timezone<span class="token punctuation">,</span> timedeltaUTC8 <span class="token operator">=</span> timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_event</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> location<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> dtstart<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> dtend<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> description<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ics<span class="token punctuation">.</span>Event<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    create a single icalendar event        :type of params: any Python native type or icalendar property type.    '''</span>    event <span class="token operator">=</span> ics<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'summary'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dtstart'</span><span class="token punctuation">,</span> dtstart<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dtend'</span><span class="token punctuation">,</span> dtend<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span>    <span class="token keyword">return</span> event<span class="token keyword">def</span> <span class="token function">get_lesson_from_html</span><span class="token punctuation">(</span>begin_date<span class="token punctuation">:</span> datetime<span class="token punctuation">,</span> html<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> begin_week<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    REGEX <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">r'&lt;a class="fc-day-grid-event fc-h-event fc-event fc-start fc-end" lay-tips="'</span>        <span class="token string">r'&lt;table class=&amp;quot;kb-tips&amp;quot; border=&amp;quot;1&amp;quot;&gt;'</span>        <span class="token string">r'&lt;tr&gt;&lt;th&gt;事件类型：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;上课任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'上课时间：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)--(.*?)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学模式：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学形式：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'星期：&lt;/th&gt;&lt;td&gt;(\d*?)&lt;/td&gt;&lt;th&gt;节次：&lt;/th&gt;&lt;td&gt;\d*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;上课周次：&lt;/th&gt;&lt;td &gt;(\d*?)&lt;/td&gt;&lt;th&gt;'</span>        <span class="token string">r'课序号：&lt;/th&gt;&lt;td&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'课程：&lt;/th&gt;&lt;td  colspan=&amp;quot;3&amp;quot;&gt;\[.*?\]\[.*?\](.*?)\[.*?\]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'授课教师：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学场地：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)\(?\)?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'上课班级：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'排课/上课：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'授课内容：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;((.|\n)*?)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" style="background-color: rgb\(\d+, \d+, \d+\);"&gt;'</span>    <span class="token punctuation">)</span>        end_week <span class="token operator">=</span> <span class="token number">0</span>    lessons <span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>REGEX<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>        day <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        week <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> week <span class="token operator">&lt;=</span> begin_week<span class="token punctuation">:</span> <span class="token keyword">continue</span>        end_week <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>end_week<span class="token punctuation">,</span> week<span class="token punctuation">)</span>        today <span class="token operator">=</span> begin_date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span> <span class="token operator">*</span> week <span class="token operator">+</span> day<span class="token punctuation">)</span>        start_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        end_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dtstart <span class="token operator">=</span> today <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dtend <span class="token operator">=</span> today <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        teacher <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        location <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        lessons<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'课程'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span> <span class="token string">'教学场地'</span><span class="token punctuation">:</span>location<span class="token punctuation">,</span> <span class="token string">'开始时间'</span><span class="token punctuation">:</span>dtstart<span class="token punctuation">,</span> <span class="token string">'结束时间'</span><span class="token punctuation">:</span>dtend<span class="token punctuation">,</span> <span class="token string">'教师'</span><span class="token punctuation">:</span>teacher<span class="token punctuation">,</span> <span class="token string">'授课内容'</span><span class="token punctuation">:</span>content<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>lessons<span class="token punctuation">,</span> end_week<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_lesson</span><span class="token punctuation">(</span>begin_date<span class="token punctuation">:</span> datetime<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 第一步获取网页元素</span>    chrome <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://jwweb.cdutcm.edu.cn'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> chrome<span class="token punctuation">.</span>current_url <span class="token operator">!=</span> <span class="token string">'https://jwweb.cdutcm.edu.cn/new/welcome.page'</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 这里需要手动输入账号密码验证码！</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>    iframe <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[3]/div/div/div[2]/div/div/iframe'</span><span class="token punctuation">)</span>    chrome<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>    month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> month <span class="token operator">!=</span> <span class="token string">'八月'</span><span class="token punctuation">:</span>        chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div/button[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>        month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        begin_week <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    lessons <span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> month <span class="token operator">!=</span> <span class="token string">'二月'</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> chrome<span class="token punctuation">.</span>page_source        lessons_gets<span class="token punctuation">,</span> begin_week <span class="token operator">=</span> get_lesson_from_html<span class="token punctuation">(</span>begin_date<span class="token punctuation">,</span> html<span class="token punctuation">,</span> begin_week<span class="token punctuation">)</span>        lessons <span class="token operator">+=</span> lessons_gets        chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div/button[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>        month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> lessons<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    calendar <span class="token operator">=</span> ics<span class="token punctuation">.</span>Calendar<span class="token punctuation">(</span><span class="token punctuation">)</span>    calendar<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'2.0'</span><span class="token punctuation">)</span>        begin_date <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>UTC8<span class="token punctuation">)</span>    lessons <span class="token operator">=</span> get_lesson<span class="token punctuation">(</span>begin_date<span class="token punctuation">)</span>        <span class="token keyword">for</span> lesson <span class="token keyword">in</span> lessons<span class="token punctuation">:</span>        name <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'课程'</span><span class="token punctuation">]</span>        location <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'教学场地'</span><span class="token punctuation">]</span>        dtstart <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'开始时间'</span><span class="token punctuation">]</span>        dtend <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'结束时间'</span><span class="token punctuation">]</span>        description <span class="token operator">=</span> <span class="token string">'教师：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lesson<span class="token punctuation">[</span><span class="token string">'教师'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n\n授课内容：\n'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lesson<span class="token punctuation">[</span><span class="token string">'授课内容'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event <span class="token operator">=</span> create_event<span class="token punctuation">(</span>name<span class="token punctuation">,</span> location<span class="token punctuation">,</span> dtstart<span class="token punctuation">,</span> dtend<span class="token punctuation">,</span> description<span class="token punctuation">)</span>        calendar<span class="token punctuation">.</span>add_component<span class="token punctuation">(</span>event<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cdutcm.ics'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>to_ical<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/u013670453/article/details/114671299">「Selenium」- 在页面中，点击按钮（或元素）</a></li><li><a href="https://blog.csdn.net/asdfgh0077/article/details/104178416">使用Python在Selenium WebDriver中获取WebElement的HTML源代码</a></li><li><a href="https://wnma3mz.github.io/hexo_blog/2020/09/16/ICS%E5%9C%A8%E7%BA%BF%E8%AF%BE%E8%A1%A8%E5%88%B6%E4%BD%9C/">ICS在线课表制作</a></li><li><a href="https://github.com/wnma3mz/Tools/blob/master/others/myics.py">ICS在线课表制作 源码</a></li><li><a href="https://support.apple.com/zh-cn/HT205018">如果意外地从 iCloud 中删除了日历、书签或通讯录</a></li><li><a href="https://blog.csdn.net/zhoukeguai/article/details/113247342">chromedriver下载与安装方法，亲测可用</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>CO review：P0</title>
    <link href="https://toby-shi-cloud.github.io/posts/co-p0.html"/>
    <id>https://toby-shi-cloud.github.io/posts/co-p0.html</id>
    <published>2022-10-05T11:05:00.000Z</published>
    <updated>2022-12-17T04:33:36.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="L0-五人投票"><a href="#L0-五人投票" class="headerlink" title="L0 五人投票"></a>L0 五人投票</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>裁判组有一个组长和四个组员（组员编号依次为 <code>2'b00,2'b01,2'b10,2'b11</code>）。<br>每个组员都可以赞成、反对或是弃权。组长还拥有屏蔽投票权：屏蔽一位组员的投票，无论该组员投什么票，都视为弃权。投票的输入信息和输入信号对应如下：</p><table class="toolTable table"><tbody><tr><th>意义</th><th>赞成</th><th>反对</th><th>弃权</th><th>屏蔽投票</th></tr><tr><td>组长</td><td>2'b00</td><td>2'b01</td><td>2'b10</td><td>2'b11</td></tr><tr><td>组员</td><td>2'b00</td><td>2'b01, 2'b11</td><td>2'b10</td><td>-</td></tr></tbody></table><p>当赞成票大于反对票时，表决结果为通过；反之为不通过。</p><h3 id="输入输出描述"><a href="#输入输出描述" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table" style="text-align:center;" <tbody=""><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>LV</td><td>I</td><td>[1:0]</td><td>组长投票</td></tr><tr><td>LI</td><td>I</td><td>[1:0]</td><td>组长屏蔽组员的编号</td></tr><tr><td>T0</td><td>I</td><td>[1:0]</td><td>组员 2'b00 的投票</td></tr><tr><td>T1</td><td>I</td><td>[1:0]</td><td>组员 2'b01 的投票</td></tr><tr><td>T2</td><td>I</td><td>[1:0]</td><td>组员 2'b10 的投票</td></tr><tr><td>T3</td><td>I</td><td>[1:0]</td><td>组员 2'b11 的投票</td></tr><tr><td>O</td><td>O</td><td>-</td><td>表决结果（通过为 1，反之为 0）</td></tr></tbody></table><h3 id="考场思路"><a href="#考场思路" class="headerlink" title="考场思路"></a>考场思路</h3><p>这题几乎就是一个<code>分线器</code>的应用。<br>大概写了 20min 左右。<br>不过呢，为了避免重复四次一样的电路，可以创建一个 circuit 专门用于处理组员投票，注意输入应该是两个，一个投票信号，一个使能端（用于表示组长是否屏蔽了这个人）。</p><h3 id="Bug-分析"><a href="#Bug-分析" class="headerlink" title="Bug 分析"></a>Bug 分析</h3><p>这题又遇到了 logisim 的 bug。有时候连完线发现线红了或者蓝了，还修不好，不过保存后重启解决一切问题。</p><h2 id="L1-文本匹配"><a href="#L1-文本匹配" class="headerlink" title="L1 文本匹配"></a>L1 文本匹配</h2><h3 id="题目概述-1"><a href="#题目概述-1" class="headerlink" title="题目概述"></a>题目概述</h3><p>你需要匹配字符串 0121 和 1210。请使用 Mealy 自动机。<br>输入信号的含义：</p><table class="toolTable table"><tbody><tr><th>2'b00</th><th>2'b01</th><th>2'b10</th><th>2'b11</th></tr><tr><td>0</td><td>1</td><td>2</td><td>不会出现</td></tr></tbody></table><h3 id="输入输出描述-1"><a href="#输入输出描述-1" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table"><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>clk</td><td>I</td><td>-</td><td>时钟信号，在时钟上升沿转移状态</td></tr><tr><td>rst</td><td>I</td><td>-</td><td>异步复位信号</td></tr><tr><td>in</td><td>I</td><td>[1:0]</td><td>当前周期输入</td></tr><tr><td>out</td><td>O</td><td>[1:0]</td><td>0: 无匹配<br>1: 匹配 0121<br>2: 匹配 1210s</td></tr></tbody></table><h3 id="考场思路-1"><a href="#考场思路-1" class="headerlink" title="考场思路"></a>考场思路</h3><p>列出状态转移就可以啦。如下图所示：<br><img src="https://mermaid.ink/img/pako:eNptkjFrwzAQhf-KubHEoKdRQ7107NSOUQZhK60htosjF0rIf88pVqU4nEFgPr177w7dhdqp82ToHFzwb737mt1Q_2o7Vvx1_ezb0E9j9f6xEqWU4WPtaKlpGkv_GIyRMDIGq5HU0AWzGqsaOqvB3sjeqmAwTt6qqNkbyVsV7_3Loarr19ho1t0BX-T0J6BUKkFlKmwhN8RQPSsj1Hl2SQnJM0E8lkMKSjD2WsohpUNKh5QOIR3SmAU-lEOaHdLsGd6DsIVrS3r7NmpTLs2-VWra0eDnwfUdr-4lSiyFbz94S4Z_O390yynEnbiy1C1h-vwbWzJhXvyOlp-uLDuZozud_fUGMpytuQ"></p><ul><li>当 $st=110$ 且 $in=10$ 时，输出 1</li><li>当 $st=011$ 且 $in=00$ 时，输出 2</li><li>其他时候输出 0</li></ul><h3 id="bug-分析"><a href="#bug-分析" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>这个题 WA 了一次，错在串 <code>01210</code>。<br>因为我的 <code>110</code> 在 $in=1$ 时转移去了 <code>001</code> 而不是 <code>011</code>……</p><h2 id="L2-斐波那契数列改"><a href="#L2-斐波那契数列改" class="headerlink" title="L2 斐波那契数列改"></a>L2 斐波那契数列改</h2><h3 id="题目概述-2"><a href="#题目概述-2" class="headerlink" title="题目概述"></a>题目概述</h3><p>数列 ${s_n}$ 定义如下:</p><p>$$<br>s_n =<br>\begin{cases}<br>0 &amp; n=0,2 \\<br>1 &amp; n=1,3 \\<br>s_{n-1} + (s_{n-2} \oplus s_{n-3}) &amp; \text{if $n$ is even} \\<br>(s_{n-1} \oplus s_{n-2}) + s_{n-3} &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p><p>输入 $n$ 输出 $s_n$，时限：64 个周期。</p><h3 id="输入输出描述-2"><a href="#输入输出描述-2" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table"><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>in</td><td>I</td><td>[4:0]</td><td>输入</td></tr><tr><td>out</td><td>O</td><td>[31:0]</td><td>输出</td></tr></tbody></table><h3 id="考场思路-2"><a href="#考场思路-2" class="headerlink" title="考场思路"></a>考场思路</h3><p>同预习的斐波那契数列。<br>就是递推转移啦……<br>不过有人似乎直接打表……</p><h3 id="bug-分析-1"><a href="#bug-分析-1" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>还是要搭建好一会儿的，主要是保存并维持输出，还有计数，以及电路延迟问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>使用junit4对java程序进行测试</title>
    <link href="https://toby-shi-cloud.github.io/posts/junittestforobjectoriented.html"/>
    <id>https://toby-shi-cloud.github.io/posts/junittestforobjectoriented.html</id>
    <published>2022-09-28T17:00:00.000Z</published>
    <updated>2023-03-30T18:34:27.340Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总所周知测试是写程序必不可少的一项。对于IDEA和java来说，junit测试是一个比较好的选择。</p><h2 id="安装junit"><a href="#安装junit" class="headerlink" title="安装junit"></a>安装junit</h2><p>首先在IDEA上安装junit的插件；</p><p>前往<a href="https://github.com/junit-team/junit4/wiki/Download-and-Install">官方github</a>下载junit；</p><p>在项目结构中添加junit依赖。</p><blockquote><p>具体可以参考：</p><p><a href="https://blog.csdn.net/gakki_200/article/details/106413351">IDEA中添加junit4的三种方法（详细步骤操作）</a></p><p><a href="https://blog.csdn.net/weixin_39595195/article/details/111313679">IDEA中使用JUnit4单元测试</a></p></blockquote><h2 id="使用junit"><a href="#使用junit" class="headerlink" title="使用junit"></a>使用junit</h2><p>junit最基础的使用，<a href="https://blog.csdn.net/weixin_39595195/article/details/111313679">IDEA中使用JUnit4单元测试</a>已经说的十分明白了，而且举的例子也非常出色，我在这里就不加赘述了。</p><p>大概来说，就是新建一个测试类，然后搞明白<code>@Before</code>，<code>@After</code>，<code>@Test</code>，<code>assertEquals</code>的基本意思就行了。</p><h2 id="模拟输入和捕获输出"><a href="#模拟输入和捕获输出" class="headerlink" title="模拟输入和捕获输出"></a>模拟输入和捕获输出</h2><p>上面junit的最基本的用法是测试方法或者类的行为是否正常，但是我们希望junit能够帮助我们测试样例数据，而我们的main方法的交互方式是输入和输出，而不是传参和返回，所以不能直接使用上面的方式。</p><p>因此我们通过输入输出重定向的方式来模拟输入和捕获输出。可以写以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                2021/7/1-Jack@JayChou :"Hello!";2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/5-JayChou@Mike :"emmmm";         2021/7/8-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou:"Hahaha"; 2021/5/3-Mike:"he@buaaer is unhappy";                END_OF_MESSAGE                qdate 2021/7/1                qsend "JayChou"                qrecv "buaaer"                """</span><span class="token punctuation">;</span> <span class="token comment">// 多行字符串，这里填样例输入</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                2021/7/1-Jack@JayChou :"Hello!";                2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/5-JayChou@Mike :"emmmm";                2021/7/8-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou:"Hahaha";                2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou@buaaer :"Hahaha";                2021/5/3-Mike:"he@buaaer is unhappy";                """</span><span class="token punctuation">;</span> <span class="token comment">// 多行字符串，这里填样例输出</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里根据实际情况replace。一般来说是需要replace的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读入以及多组数据"><a href="#文件读入以及多组数据" class="headerlink" title="文件读入以及多组数据"></a>文件读入以及多组数据</h2><p>有的时候，输入输出会特别的长，或者输入输出有很多组，使用上面这个死板的方法就会显得非常臃肿。所以我们需要进行文件读入。</p><h3 id="文件读入"><a href="#文件读入" class="headerlink" title="文件读入"></a>文件读入</h3><p>使用<code>BufferedReader</code>和<code>FileReader</code>可以之间读取一个文件中的全部字符，并将其转化为<code>String</code>，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多组数据"><a href="#多组数据" class="headerlink" title="多组数据"></a>多组数据</h3><p>junit提供了一种运行多组测试的方式：<code>Parameterized</code></p><p>具体来说，就是当你使用<code>@RunWith (Parameterized.class)</code>修饰<code>class</code>时，junit会首先调用被<code>@Parameterized.Parameters</code>修饰的<code>static</code>方法，这个方法必须返回一个<code>Collection</code>。然后junit会遍历这个<code>Collection</code>，把遍历到的值传入<code>class</code>的构造方法中，生成一个测试类的对象。然后再运行<code>@Test</code>方法。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>这里我写了一种文件读入的方法，大家可以直接使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span> <span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublicTest</span> <span class="token comment">// 类名根据需要重构</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">"./test/public_test"</span><span class="token punctuation">;</span> <span class="token comment">// 测试数据目录</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">=</span> <span class="token string">".in"</span><span class="token punctuation">;</span> <span class="token comment">// 测试点输入文件后缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_OUT</span> <span class="token operator">=</span> <span class="token string">".out"</span><span class="token punctuation">;</span> <span class="token comment">// 测试点输出文件后缀</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expectedFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PublicTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileName <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedFileName <span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span> <span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Parameterized.Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fInMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fOutMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> fs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>            <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            suffix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fInMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fOutMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> fInMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> in <span class="token operator">=</span> fInMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> out <span class="token operator">=</span> fOutMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to have a corresponding out file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pair <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> out<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            testData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> testData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下：</p><p><img src="https://s2.loli.net/2022/09/29/cixBL2OV8ApmReu.png"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>注意测试是不能添加到平台上进行评测的（会CE），所以我们必须要采用git多分支的方式进行。</p><p>通常的做法是，我们首先master分支中创建README，然后commit，之后进行<code>git checkout -b develop</code>。一切改动都在<code>develop</code>分支进行。测试无误后，执行<code>git checkout master</code>以及<code>git checkout develop src/*</code>即可提交并推送到远程仓库。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从课程网站上下载数据非常麻烦，所以如果你有一个自动下载脚本的话……</p><hr><h2 id="2022年10月2日-更新"><a href="#2022年10月2日-更新" class="headerlink" title="2022年10月2日 更新"></a>2022年10月2日 更新</h2><p>如果你运行测试出错了却找不到哪个文件出错了的话，可以在80行左右的位置，runTest方法里面，加入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File In: "</span> <span class="token operator">+</span> inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File Ans: "</span> <span class="token operator">+</span> expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以看见读入的文件是哪一个了，如下图所示：</p><p><img src="https://s2.loli.net/2022/10/02/1DXyfgjhkOl8MFH.png"></p><hr><h2 id="2022年10月4日-更新"><a href="#2022年10月4日-更新" class="headerlink" title="2022年10月4日 更新"></a>2022年10月4日 更新</h2><p>之前的测试类只能测试一个文件夹下的数据，不能测试一个文件夹下的子文件夹下的数据，因此做出改进。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span> <span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfiniteTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">"./test"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">=</span> <span class="token string">".in"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_OUT</span> <span class="token operator">=</span> <span class="token string">".out"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expectedFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfiniteTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileName <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedFileName <span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span> <span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The input file is "</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> inputFileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer file is "</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> expectedFileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fInMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fOutMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">assert</span> directory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getFiles</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>            <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            suffix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fInMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fOutMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Parameterized.Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> fInMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> in <span class="token operator">=</span> fInMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> out <span class="token operator">=</span> fOutMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to have a corresponding out file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pair <span class="token operator">=</span> <span class="token punctuation">{</span> in<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            testData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> testData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>复现 A Tutorial on Linear and Differential Cryptanalysis中差分分析的例子</title>
    <link href="https://toby-shi-cloud.github.io/posts/differentialcryptanalysis.html"/>
    <id>https://toby-shi-cloud.github.io/posts/differentialcryptanalysis.html</id>
    <published>2022-09-23T10:30:00.000Z</published>
    <updated>2022-09-23T11:58:12.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>黑历史++<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://s2.loli.net/2022/09/23/uRJw5VFbSkvoGXD.png"></p><h2 id="差分分析"><a href="#差分分析" class="headerlink" title="差分分析"></a>差分分析</h2><p>什么是差分分析呢？其实简单来说，就是考察明文的某一或某些位取反对密文的影响，所以这里的差分，实质就是异或的意思。其实感觉差分分析的过程和线性分析是基本一致的，所以这个博客我就写简单一点，实在记不住了还可以翻阅<a href="https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html">上一篇博客</a>。虽然上一篇也不怎么详细（）</p><h2 id="Sbox拟合"><a href="#Sbox拟合" class="headerlink" title="Sbox拟合"></a>Sbox拟合</h2><p>与线性分析一致，我们不得不对sbox进行拟合。同样的，对于输入的每一种可能的差分，我们穷举所有的输入1（输入2=输入1$\oplus$输入差分）并记录由此带来的输出差分值（输出差分=输出1$\oplus$输出2），计算出输入差分和输出差分对应的概率关系。通过16*16的256次计算，我们就可以整理出一张sbox的拟合表格。</p><h2 id="子密钥分析"><a href="#子密钥分析" class="headerlink" title="子密钥分析"></a>子密钥分析</h2><p>同样的，我们选取概率较大的路径，可以得到明文对的一个差分和一个倒数第二轮输出的差分之间的概率，在论文中，选取的是$\Delta P  = [0000\ 1011\ 0000\ 0000]$和$\Delta U4 = [0000\ 0110\ 0000\ 0110]$，概率是$\frac{27}{1024}=0.0264$。</p><p>同样的我们穷举最后一轮相关联的密钥$k_2$和$k_4$，通过倒推得到$U4$，最后计算出当$\Delta P$成立时$\Delta U4$成立的概率即可。</p><p>由于我们选择的是高概率路径，所以最后成立概率最高的密钥就大概率是我们要找的密钥。</p><h3 id="复现结果"><a href="#复现结果" class="headerlink" title="复现结果"></a>复现结果</h3><p><img src="https://s2.loli.net/2022/09/23/UK4adYCN6ZJyBws.png"></p><p>其中子密钥用16进制表示，x表示未知（即和例子的路径无关）。</p><p>可见$k_2=2$且$k_4=4$的概率远超其他密钥组合，而且概率$0.0272863$与理论$\frac{27}{1024}=0.0264$非常接近。</p><h3 id="复现代码"><a href="#复现代码" class="headerlink" title="复现代码"></a>复现代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"structure.hh"</span></span><span class="token comment">// \delta P  = [0000 1011 0000 0000]</span><span class="token comment">// \delta U4 = [0000 0110 0000 0110]</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNamePlain <span class="token operator">=</span> <span class="token string">"plaintexts.hex"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNameCipher <span class="token operator">=</span> <span class="token string">"ciphertexts.hex"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNameCsv <span class="token operator">=</span> <span class="token string">"diff.csv"</span><span class="token punctuation">;</span>ifstream fp<span class="token punctuation">,</span> fc<span class="token punctuation">;</span>ofstream fcsv<span class="token punctuation">;</span><span class="token keyword">int</span> pcPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// use -1 stands for undefined</span><span class="token keyword">const</span> u16 deltaP <span class="token operator">=</span> <span class="token number">0b0000101100000000</span><span class="token punctuation">;</span><span class="token keyword">const</span> u16 deltaU4 <span class="token operator">=</span> <span class="token number">0b0000011000000110</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">getU4</span><span class="token punctuation">(</span>u16 _C<span class="token punctuation">,</span> u16 key<span class="token punctuation">)</span><span class="token punctuation">{</span>    _C <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>_C<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    _C <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>_C<span class="token punctuation">,</span> SBOX_INV<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNamePlain<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    fc<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNameCipher<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> pcPair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        u16 P<span class="token punctuation">,</span> U<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>P<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>U<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        P <span class="token operator">=</span> P <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> P <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        U <span class="token operator">=</span> U <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> U <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">~</span>pcPair<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">)</span> num<span class="token operator">++</span><span class="token punctuation">;</span>        pcPair<span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token operator">=</span> U<span class="token punctuation">;</span>        <span class="token comment">// cerr &lt;&lt; hex &lt;&lt; P &lt;&lt; "-&gt;" &lt;&lt; U &lt;&lt; endl;</span>        <span class="token comment">// if(num == 100) break;</span>    <span class="token punctuation">}</span>    cerr <span class="token operator">&lt;&lt;</span>  <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 有效明密文对个数（剔除重复）</span>    fp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fcsv<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNameCsv<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    fcsv <span class="token operator">&lt;&lt;</span> <span class="token string">"partial subkey"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"prob"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>u16 k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>u16 k4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k4 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k4<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        u16 key <span class="token operator">=</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> k4<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token generic-function"><span class="token function">i</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token operator">^</span>deltaP<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>i <span class="token operator">^</span> deltaP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// cerr &lt;&lt; (!(pcPair[i] == -1) &amp;&amp; !(pcPair[i^deltaP] == -1)) &lt;&lt; endl;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getU4</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">getU4</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token operator">^</span>deltaP<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> deltaU4<span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> prob <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> sum<span class="token punctuation">;</span>        fcsv <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> k4 <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> prob <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 有效明密文对组的组数（剔除没有配对成组的）</span>    <span class="token punctuation">}</span>    fcsv<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>structure.hh</code>是我自己写的一个头文件，里面是加密解密需要用到的函数以及Sbox和permutation连线的方式。由于加密解密以及分析都需要用到这些函数，所以就放在头文件里面了。</p><p>用cpp的原因是，bluebeen告诉我cpp比python快数十倍……python分析10万组明密文对要1分钟真的难受……</p><p>因为差分分析需要符合要求的明密文对组，即明文需要满足$\Delta P$的那个式子。所以是先把涉及到的明密文对存下来（代码里面是<code>pcPair</code>）然后在进行统计。</p><p>在进行差分分析的复现的时候，我突然想到一个问题，为什么论文上只用了1万对明密文对，而我用了10万对才能找出答案吗？我的复现究竟是出了什么样的问题呢？</p><p>其实在上面的复现代码中，输出<code>num</code>和<code>sum</code>就已经揭晓了答案。根据输出，我的10万对明密文，只有<code>num</code>=5万的有效明密文对，然后再安装$\Delta P$的要求配对后，只有<code>sum</code>=2万组。而论文直接说的就是1万组满足$\Delta P$的明密文组。其实我也就用了两倍的数据而已。所以我的数据看起来比论文中要精确一些，但是也没有精确太多。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]Heys,  Howard M . A Tutorial on Linear and Differential Cryptanalysis[J]. Cryptologia, 2002, 26(3):189-221.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="密码学" scheme="https://toby-shi-cloud.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="密码分析" scheme="https://toby-shi-cloud.github.io/tags/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>复现 A Tutorial on Linear and Differential Cryptanalysis中线性分析的例子</title>
    <link href="https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html"/>
    <id>https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html</id>
    <published>2022-09-14T08:30:00.000Z</published>
    <updated>2022-09-23T11:57:49.044Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这学期选了一门网安的科研课堂。第一节课就给了我一个下马威，直接阅读全英论文。好在我借助翻译读了一遍后，又听教授和同学们讲了一次，总算是把33页论文的第一部分，也就是Linear Cryptanalysis理解完了。</p><p>当然理解归一回事儿，实现是另一回事，所以昨天晚上（也就是9月13日下午），我就把论文中的例子基本复现出来了。</p><h2 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h2><p>什么是分组密码？简而言之就是把数据分组，一组一组的加密。论文中的例子是一个非常简单的分组加密，数据每16bit为一组，采用的是SPN结构（即Substitution-Permutation Network）。这个加密会经过若干轮，每轮有如下步骤：</p><h3 id="Substitution-置换"><a href="#Substitution-置换" class="headerlink" title="Substitution 置换"></a>Substitution 置换</h3><p>我们把16bit数据分成4bit一组，一共4组。将每组的4bit的值传入对应S-box中，S-box也会传出一个4bit的值。每个S-box的逻辑都可以查表得到。通常4个S-box应当不一样，但是作为例子，论文中选取了同样的S-box。其映射表如下：</p><table><thead><tr><th>input</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>output</td><td>E</td><td>4</td><td>D</td><td>1</td><td>2</td><td>F</td><td>B</td><td>8</td><td>3</td><td>A</td><td>6</td><td>C</td><td>5</td><td>9</td><td>0</td><td>7</td></tr></tbody></table><p>上表以16进制数表示4bit的值。</p><h3 id="Permutation-排列"><a href="#Permutation-排列" class="headerlink" title="Permutation 排列"></a>Permutation 排列</h3><p>排列就是一个连线的操作，当然也可以理解为一种映射。本步骤的输出就是输入的一种排列。下表是例子选用的排列：</p><table><thead><tr><th>input</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th></tr></thead><tbody><tr><td>output</td><td>1</td><td>5</td><td>9</td><td>13</td><td>2</td><td>6</td><td>10</td><td>14</td><td>3</td><td>7</td><td>11</td><td>15</td><td>4</td><td>8</td><td>12</td><td>16</td></tr></tbody></table><p>上表中<code>input=3, output=9</code>表示输出中第9比特的值来自输入中第3比特的值。</p><h3 id="Key-Mixing-密钥加密"><a href="#Key-Mixing-密钥加密" class="headerlink" title="Key Mixing 密钥加密"></a>Key Mixing 密钥加密</h3><p>所谓Key Mixing其实异常简单，就是给一个16bit的密钥，然后和16bit的输入进行异或，就得到了16bit的输出。</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>本图是从 A Tutorial on Linear and Differential Cryptanalysis 中摘下来的。</p><p><img src="https://s2.loli.net/2022/09/14/BTviQCeltA48Ezo.png"></p><h2 id="线性分析"><a href="#线性分析" class="headerlink" title="线性分析"></a>线性分析</h2><p>我原以为，我们可以直接从明密文对获取加密信息，并且破译密码。结果，我发现我们能做的不过是在Substitution和Permutation都已知的情况下去推测Subkey的值。但即便如此，也并非易事。</p><h3 id="堆积引理"><a href="#堆积引理" class="headerlink" title="堆积引理"></a>堆积引理</h3><p>$X_1,X_2,\cdots,X_n$是二值分布，在它们相互独立的情况下，若$p_1=\frac12+\epsilon_1,\cdots,p_n=\frac12+\epsilon_n$，则有：<br>$$<br>Pr(X_1 \oplus \cdots \oplus X_n = 0) = \frac12 + 2^{n-1}\prod_{i=1}^{n}\epsilon_i<br>$$<br>或者说：<br>$$<br>\epsilon_{1,2,\cdots,n} = 2^{n-1}\prod_{i=1}^{n}\epsilon_i<br>$$<br>我们称$\epsilon$为<code>bias</code>，偏差，$\epsilon=Pr-\frac12$。</p><h3 id="线性拟合S-box"><a href="#线性拟合S-box" class="headerlink" title="线性拟合S-box"></a>线性拟合S-box</h3><p>由于S-box是整个加密过程中唯一的非线性过程，也是本加密方法的安全性所在。为了破译密码，我们不得不对S-box进行线性拟合。</p><p>假设S-box的输入是$X_1,X_2,X_3,X_4$，输出是$Y_1,Y_2,Y_3,Y_4$，列出一组线性表达式，我们就可以算出输入随机的时候，该线性表达式成立的概率。譬如：$X_2 \oplus X_3 = Y_1 \oplus Y_3 \oplus Y_4$，穷举后可知16个不同输入中有12个使得这个式子成立。则成立概率是$\frac34$，偏差是$\frac14$。</p><h3 id="子密钥分析"><a href="#子密钥分析" class="headerlink" title="子密钥分析"></a>子密钥分析</h3><p>我们选取偏差较大的线性方程，然后模拟该方程所涉及到的输入的加密路劲，沿途应用堆积引理，最终可以得到一个明文和倒数第二轮的输出的一个线性表示的成立的概率的偏差的绝对值。</p><p>然后，穷举最后一个subkey的有涉及的位，根据密文逆推得到倒数第二轮输出，然后和明文一起，记录线性表达式成立的次数。选取很多组明文对（论文是1万组，我实测是10万组才能得到好的结果），计算线性表示成立概率。对于穷举到的每一个subkey，最后偏差绝对值最大的那一个就高概率是密钥，而且这个偏差和线性表达式的偏差的非常接近。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="加密过程复现"><a href="#加密过程复现" class="headerlink" title="加密过程复现"></a>加密过程复现</h3><p>最开始是打算用Python的，后来发现Python位运算并不方便，所以就用C++了。贴个代码吧。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">,</span> u4<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> u16<span class="token punctuation">;</span><span class="token keyword">const</span> u4 sbox<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0xE</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0xD</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token number">0xB</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0xA</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xC</span><span class="token punctuation">,</span>    <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> u4 wire<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">,</span>    <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> u16 KEYS<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0xed52</span><span class="token punctuation">,</span>    <span class="token number">0x3799</span><span class="token punctuation">,</span>    <span class="token number">0xac27</span><span class="token punctuation">,</span>    <span class="token number">0x47fc</span><span class="token punctuation">,</span>    <span class="token number">0x72b4</span><span class="token punctuation">,</span>    <span class="token comment">// 0xacbd, 密钥随便改</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">permutation</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">substitution</span><span class="token punctuation">(</span>u16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">key_mixing</span><span class="token punctuation">(</span>u16<span class="token punctuation">,</span> u16<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">halfWordFunc</span><span class="token punctuation">(</span>u16<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> u16<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"1.data.in"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"1.data.out"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>ch1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ch2 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch2 <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> ch2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        u16 data <span class="token operator">=</span> ch1 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> ch2<span class="token punctuation">;</span> <span class="token comment">// 两个字节16bit为一组</span>        <span class="token function">halfWordFunc</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> KEYS<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch1 <span class="token operator">=</span> data <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        ch2 <span class="token operator">=</span> data <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">substitution</span><span class="token punctuation">(</span>u16 data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> u16 p1 <span class="token operator">=</span> <span class="token number">0xf000</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> <span class="token number">0x0f00</span><span class="token punctuation">,</span> p3 <span class="token operator">=</span> <span class="token number">0x00f0</span><span class="token punctuation">,</span> p4 <span class="token operator">=</span> <span class="token number">0x000f</span><span class="token punctuation">;</span>    u16 d1 <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> p1<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> p2<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span> d3 <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> p3<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span> d4 <span class="token operator">=</span> data <span class="token operator">&amp;</span> p4<span class="token punctuation">;</span>    d1 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>    d2 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d2<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>    d3 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d3<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    d4 <span class="token operator">=</span> sbox<span class="token punctuation">[</span>d4<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d1 <span class="token operator">|</span> d2 <span class="token operator">|</span> d3 <span class="token operator">|</span> d4<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">permutation</span><span class="token punctuation">(</span>u16 data<span class="token punctuation">)</span><span class="token punctuation">{</span>    bitset<span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">&gt;</span> bst <span class="token operator">=</span> data<span class="token punctuation">,</span> out<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bst<span class="token punctuation">[</span>wire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>u16<span class="token punctuation">)</span> out<span class="token punctuation">.</span><span class="token function">to_ulong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">key_mixing</span><span class="token punctuation">(</span>u16 data<span class="token punctuation">,</span> u16 key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> data <span class="token operator">^</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> u16 <span class="token function">halfWordFunc</span><span class="token punctuation">(</span>u16<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> <span class="token keyword">const</span> u16<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> round<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> round<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">permutation</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>round<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>round<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h3><p>这次用的Python，虽然我还是觉得Python的位运算真的有些别扭……</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token string">'U4,6 ^ U4,8 ^ U4,14 ^ U4,16 ^ P5 ^ P7 ^ P8 = 0'</span>SBOX <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token number">0xE</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0xD</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token number">0xB</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0xA</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xC</span><span class="token punctuation">,</span>    <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span><span class="token punctuation">)</span>WIRE <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">,</span>    <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">,</span>    <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">,</span> <span class="token number">0xe</span><span class="token punctuation">,</span>    <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0xb</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">,</span><span class="token punctuation">)</span>INV_SBOX <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token number">0xe</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span>    <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0xc</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">,</span> <span class="token number">0xf</span><span class="token punctuation">,</span>    <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0xd</span><span class="token punctuation">,</span> <span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span>    <span class="token number">0xb</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token string">'明文对个数'</span>DATA_GROUP <span class="token operator">=</span> <span class="token number">100000</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    anlysis <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'partial subkey'</span><span class="token punctuation">,</span> <span class="token string">'|bias|'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># print(anlysis.info())</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.data.in'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>        fe <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.data.out'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>        k2 <span class="token operator">=</span> k <span class="token operator">&gt;&gt;</span> <span class="token number">4</span>        k4 <span class="token operator">=</span> k <span class="token operator">&amp;</span> <span class="token number">0xf</span>        key <span class="token operator">=</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> k4        count_of_equal <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>DATA_GROUP<span class="token punctuation">)</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>fe<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># print('%X-&gt;%X'%(p,e))</span>            v <span class="token operator">=</span> key <span class="token operator">^</span> e            u2 <span class="token operator">=</span> INV_SBOX<span class="token punctuation">[</span><span class="token punctuation">(</span>v<span class="token operator">&amp;</span><span class="token number">0x0f00</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">]</span>            u4 <span class="token operator">=</span> INV_SBOX<span class="token punctuation">[</span><span class="token punctuation">(</span>v<span class="token operator">&amp;</span><span class="token number">0x000f</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">0</span><span class="token punctuation">]</span>            u_4_6 <span class="token operator">=</span> <span class="token punctuation">(</span>u2 <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>            u_4_8 <span class="token operator">=</span> <span class="token punctuation">(</span>u2 <span class="token operator">&amp;</span> <span class="token number">0b0001</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span>            u_4_14 <span class="token operator">=</span> <span class="token punctuation">(</span>u4 <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>            u_4_16 <span class="token operator">=</span> <span class="token punctuation">(</span>u4 <span class="token operator">&amp;</span> <span class="token number">0b0001</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span>            p_5 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">0x0800</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">11</span>            p_7 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">0x0200</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">9</span>            p_8 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">0x0100</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span>            <span class="token keyword">if</span> u_4_14 <span class="token operator">^</span> u_4_6 <span class="token operator">^</span> u_4_8 <span class="token operator">^</span> u_4_16 <span class="token operator">==</span> p_5 <span class="token operator">^</span> p_7 <span class="token operator">^</span> p_8<span class="token punctuation">:</span>                count_of_equal <span class="token operator">+=</span> <span class="token number">1</span>        anlysis <span class="token operator">=</span> anlysis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'partial subkey'</span><span class="token punctuation">:</span><span class="token string">'%x %x'</span><span class="token operator">%</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span>k4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'|bias|'</span><span class="token punctuation">:</span><span class="token string">'%.04f'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>count_of_equal <span class="token operator">-</span> DATA_GROUP <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> DATA_GROUP<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        fe<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    anlysis<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'1.data.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p><img src="https://s2.loli.net/2022/09/14/1NjkxWlZRbOAPgs.png"></p><p>可见第五轮subkey的第5-9bit是0b0010，第13-16bit是0b0100，还是十分准确的，而且bias是0.0308和论文给的理论值$\frac1{32}=0.03125$还是十分接近的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]Heys,  Howard M . A Tutorial on Linear and Differential Cryptanalysis[J]. Cryptologia, 2002, 26(3):189-221.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="密码学" scheme="https://toby-shi-cloud.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="密码分析" scheme="https://toby-shi-cloud.github.io/tags/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>使用VScode进行Verilog仿真和波形查看</title>
    <link href="https://toby-shi-cloud.github.io/posts/verilogwithvscode.html"/>
    <id>https://toby-shi-cloud.github.io/posts/verilogwithvscode.html</id>
    <published>2022-09-07T07:00:00.000Z</published>
    <updated>2022-09-28T17:14:41.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计组课程官方推荐的Verilog仿真工具是ISE和VCS，评测机使用ISE。</p><p>但是在尝试在win11的wslg上安装ISE后，虽然成功了，但是难用的一批，而且还有bug，仿真总是失败等问题。而课程虚拟机里面的VCS按照课程组提供的方法，又无法生成波形文件，查阅资料后也一筹莫展，弄的我一头雾水。于是开始寻求其他工具。</p><p>在经过不同关键词检索以后，终于看到了本校学长的知乎专栏，推荐了一个VScode上进行Verilog仿真的方法！安装不仅非常简单，而且使用也很简单，爆杀20G的ISE和安装繁琐的VCS！而且是一个开源的，跨平台的软件，简直就是神一般的存在！</p><p>下面的教程参考了<a href="https://zhuanlan.zhihu.com/p/414308549">学长的专栏</a></p><h2 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h2><p>不会吧不会吧，不会有人看这篇文章却没有安装VScode吧。</p><h2 id="安装iVerilog"><a href="#安装iVerilog" class="headerlink" title="安装iVerilog"></a>安装iVerilog</h2><p>iVerilog全称Icarus Verilog，官方下载方式<a href="http://bleyer.org/icarus/">在这里</a></p><p>安装的时候，基本上都可以随意，直接Next都行，不过记得添加PATH。就是一定要勾选“Add executable folders to the user PATH”</p><h2 id="安装VScode插件"><a href="#安装VScode插件" class="headerlink" title="安装VScode插件"></a>安装VScode插件</h2><p>你需要安装以下几个插件：</p><ul><li>Verilog-HDL/SystemVerilog/Bluespec SystemVerilog</li><li>Verilog HDL</li><li>Verilog Snippet</li><li>WaveTrace</li></ul><p>前三个插件，提供代码高亮，代码补全，一键运行等功能。</p><p>第四个插件，提供波形查看。（下载iVerilog的时候应该有下载GTKWave，你也可以用这个软件查看波形）</p><h2 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h2><p>仅需要设置Verilog-HDL/SystemVerilog/Bluespec SystemVerilog插件</p><p>找到插件设置中的Verilog &gt; Linting: Linter</p><p>在下拉菜单中选中iverilog即可</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>写一端.v代码，然后写对应的testbench，然后在testbench里面，点击右上角的绿色的按钮，即可运行。</p><p>若想要生成波形文件，请在testbench中加上以下代码：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">initial</span> <span class="token keyword">begin</span>    <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">"*.vcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// * 是你希望产生的波形文件的名字</span>    <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：你必须在testbench的test运行结束之后，使用<code>$finish;</code>结束代码，否则波形文件不会结束，需要手动前往任务管理器，结束<code>vvp.exe</code>进程。</p><p>最后点开<code>*.vcd</code>文件就可以查看波形了（如果你下载了WaveTrace插件的话）</p><p>testbench怎么写我就不教了吧，下面给一个测试代码吧。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// adder.v</span><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ps<span class="token keyword">module</span> adder <span class="token punctuation">(</span>  <span class="token keyword">input</span> clk<span class="token punctuation">,</span>  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in1<span class="token punctuation">,</span>  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in2<span class="token punctuation">,</span>  <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    out <span class="token operator">&lt;=</span> in1 <span class="token operator">+</span> in2<span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// adder_tb.v</span><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ps<span class="token constant">`include</span> <span class="token string">"adder.v"</span><span class="token keyword">module</span> adder_tb<span class="token punctuation">;</span>  <span class="token comment">// Dump waveform to file (it would be impossible to view wavefrom without</span>  <span class="token comment">// this task)</span>  <span class="token keyword">initial</span> <span class="token keyword">begin</span>      <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">"adder_wave.vcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token comment">// Generate clock</span>  <span class="token keyword">reg</span> clk<span class="token punctuation">;</span>  <span class="token keyword">initial</span> clk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token important">always</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>  <span class="token comment">// Input registers</span>  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> c<span class="token punctuation">;</span>  <span class="token keyword">initial</span> <span class="token keyword">begin</span>    a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    @<span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">32'h631</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">341</span><span class="token punctuation">;</span>    @<span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$display</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">32'o1461</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    @<span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$display</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token number">#20</span><span class="token punctuation">;</span>    <span class="token comment">// Exit the simulation</span>    <span class="token kernel-function property">$finish</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token comment">// Device under test (our adder)</span>  adder <span class="token function">dut</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">in1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">in2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/414308549">https://zhuanlan.zhihu.com/p/414308549</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
    <category term="VScode" scheme="https://toby-shi-cloud.github.io/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>使用Xcode编译Swift App并分发到iPhone或iPad上</title>
    <link href="https://toby-shi-cloud.github.io/posts/swift-xcode-ipa.html"/>
    <id>https://toby-shi-cloud.github.io/posts/swift-xcode-ipa.html</id>
    <published>2022-08-30T06:00:00.000Z</published>
    <updated>2022-11-19T15:37:20.960Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这学期成功选上了Swift程序设计这门课。虽然我还只会写Hello World，但是已经非常好奇如何将自己写的程序放在自己的iPhone中运行了，因此我们今天就来尝试一次。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Mac上的Xcode和iPad上的Playground差距还是有些大的。但是因为我的Mac是虚拟机，运行缓慢，所以我打算现在iPad上编写程序并测试运行。</p><p>由于我对Swift的了解还很少，所以我在网上下载了一个简单的程序作为测试。<a href="https://github.com/DocRace/playgrounds-covid19-dashboard/">测试软件下载链接</a><sup><a href="#toc-heading-4">[1]</a></sup></p><p>下载好后，在iPad的Playground中尝试导入，几乎都失败了。遂怀疑是版本问题。于是准备重新创建项目后复制粘贴源代码。粘贴好后会提示<code>SwiftyJSON</code>和<code>Alamofire</code>找不到，遂前往GitHub搜索，并在Playground的添加Swift软件包中粘贴链接导入软件包即可。<br>省流：链接分别是<code>https://github.com/SwiftyJSON/SwiftyJSON</code>和<code>https://github.com/Alamofire/Alamofire</code></p><p>点击运行，就能看到软件运行成功了。</p><h2 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h2><p>由于iPad的Playground只能将应用发布到App Store，而这个需要用户成为Apple Developer Member，不仅需要验证和审核，还需要688元/年的会费，对学生来说没有必要，邃转向Xcode。</p><p>首先在Playground中将刚刚<del>抄</del>的App导出并存放在iCloud中（存什么地方不重要，方便导入电脑即可，也可以直接AirDrop）。随后打开Mac上的Xcode，打开项目，选择我们刚刚的导出的软件。项目导入后，Xcode会提示正在fetch SwiftyJSON和Alamofire，fetch结束后就可以<code>command+R</code>运行了。可见App在Simulator中运行状态也是正常的。</p><p>之后点击<code>Xcode-Preferences</code>或者使用快捷键<code>command+,</code>打开偏好设置，在Accounts中添加自己的AppleID，添加成功后关闭偏好设置。</p><p>在左侧视图中点击App的名称，选中<code>signing &amp; Capabilities</code>，在Signing栏的Development Team中选中自己AppleID的名字，在Bundle Identifier中填入应用唯一标识符，命名规范一般是<code>com.AppName.DeveloperName</code></p><p>随后鼠标悬停在中间正上方，会出现为什么构建应用程序，选中Any iOS Device，然后点击菜单栏<code>Product-Archive</code>，编译成功后在Finder中打开文件夹，文件夹位置默认在<code>~/Library/Developer/Xcode/Archives</code>下的今天日期文件夹中（可在偏好设置的Location栏更改）。此可以看见一个扩展名为<code>xcarchive</code>的文件即说明编译成功。</p><p>最后，打开终端，cd到<code>.xcarchive</code>文件所在文件夹，输入以下命令：<sup><a href="#toc-heading-4">[2]</a></sup></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcodebuild <span class="token parameter variable">-exportArchive</span> <span class="token parameter variable">-exportOptionsPlist</span> Info.plist <span class="token parameter variable">-archivePath</span> *.xcarchive <span class="token parameter variable">-exportPath</span> myApp.ipa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>Info.plist</code>需要随便准备一个（如果你是直接在Xcode中创建的项目会附赠一个，你在项目文件中找到即可，如果是Playground创建的，则需要借用其他项目的），<code>*.xcarchive</code>为你的应用名称。在看到<code>** EXPORT SUCCEEDED **</code>后说明导出ipa成功。</p><p>会在当前文件夹下产生一个叫做myApp.ipa的文件夹，将其中的myApp.ipa文件拿出来，使用爱思助手就可以直接安装在iPad/iPhone中使用。<sup><a href="#toc-heading-4">[3]</a></sup></p><p>注意：根据Apple官方的规定，免费用户只能将同一个程序分发给至多3个设备，且一次签名最多持续7天。</p><h2 id="参考链接或注释"><a href="#参考链接或注释" class="headerlink" title="参考链接或注释"></a>参考链接或注释</h2><ol><li>参考链接：<a href="https://sspai.com/post/70655">https://sspai.com/post/70655</a></li><li>参考链接：<a href="https://www.jianshu.com/p/0171d6b49771">https://www.jianshu.com/p/0171d6b49771</a></li><li>注释：由于Info.plist不匹配和免费签名的缘故，不能使用iTunes进行安装，只能使用第三方助手</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Swift编程" scheme="https://toby-shi-cloud.github.io/categories/Swift%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Swift" scheme="https://toby-shi-cloud.github.io/tags/Swift/"/>
    
    <category term="Apple" scheme="https://toby-shi-cloud.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>在WSL上安装ISE</title>
    <link href="https://toby-shi-cloud.github.io/posts/install-ise-on-wsl.html"/>
    <id>https://toby-shi-cloud.github.io/posts/install-ise-on-wsl.html</id>
    <published>2022-08-07T18:00:00.000Z</published>
    <updated>2022-09-28T17:15:00.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为我们计组要使用到ISE，但是ISE和win11不相容，所以我就打算在wslg上安装ISE了。</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li><p>在官网下载<code>Xilinx_ISE_DS_Lin_14.7_1015_1.tar</code>:<a href="https://china.xilinx.com/support/download/index.html/content/xilinx/zh/downloadNav/vivado-design-tools/archive-ise.html">https://china.xilinx.com/support/download/index.html/content/xilinx/zh/downloadNav/vivado-design-tools/archive-ise.html</a></p></li><li><p>将压缩包解压（我是直接在Nautilus中双击解压的）</p></li><li><p><code>cd</code>到解压后的文件夹里面，通过<code>ls</code>可以看到如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span>bin     data  idata  labtools  msg        planahead_wp  webpack  xsetupcommon  edk   ise    lib       planahead  sysgen        xinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果xsetup是可运行的，则直接<code>sudo ./xsetup</code>，否则先<code>sudo chmod +x xsetup</code></p></li><li><p>如果安装报错：</p><p><code>error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file</code></p><p>即缺少<code>libncurses.so.5</code>库文件，可以通过以下指令解决</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apt-file$ <span class="token function">sudo</span> apt-file update$ <span class="token function">sudo</span> apt-file <span class="token function">find</span> libncurses.so.5$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncurses5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装界面是图形界面，按照指引操作即可。全默认就行了，目录就在<code>/opt/</code>，<code>Install cable drivers</code>也不用安装</p></li><li><p>打开终端输入以下指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /opt/Xilinx/14.7/ISE_DS$ <span class="token function">ls</span>EDK  ISE  PlanAhead  SysGen  Xilinx.lic  common  settings32.csh  settings32.sh  settings64.csh  settings64.sh$ <span class="token builtin class-name">source</span> settings64.sh<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/common/.settings64.sh /opt/Xilinx/14.7/ISE_DS/common<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/EDK/.settings64.sh /opt/Xilinx/14.7/ISE_DS/EDK<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/PlanAhead/.settings64.sh /opt/Xilinx/14.7/ISE_DS/PlanAhead<span class="token builtin class-name">.</span> /opt/Xilinx/14.7/ISE_DS/ISE/.settings64.sh /opt/Xilinx/14.7/ISE_DS/ISE$ ise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里如果你的Ubuntu是32位的，请选择<code>settings32.sh</code></p><p>至此ISE首次运行成功！</p></li><li><p>打开后会提示没有License，那么我们直接需要在官网先申请到一个免费的License，然后在Help -&gt; Manage Licenses里面Load官网通过邮件发给你的<code>Xilinx.lic</code>即可</p></li><li><p>最后界面如下图：</p><p><img src="https://s2.loli.net/2022/08/08/QbNAiT3snMxW5U6.png"></p></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>注意到每次重启wsl后都必须重新输入第6步的指令非常麻烦，所以已有大佬写了脚本一键运行：</p><ol><li><p>在任何地方新建文件，我选择的是<code>/opt/Xilinx/14.7/ISE_DS/quickstart</code>，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_PRELOAD</span><span class="token operator">=</span>/opt/Xilinx/usb-driver/libusb-driver.so<span class="token assign-left variable">ISE_DS_DIR</span><span class="token operator">=</span>/opt/Xilinx/14.7/ISE_DS<span class="token builtin class-name">unset</span> LD_PRELOAD<span class="token builtin class-name">export</span> <span class="token assign-left variable">gmake</span><span class="token operator">=</span>/usr/bin/make<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$ISE_DS_DIR</span>"</span><span class="token builtin class-name">source</span> <span class="token string">"<span class="token variable">$ISE_DS_DIR</span>"</span>/settings64.sh<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">''</span>  <span class="token comment"># reset locale to English to fix decimal/comma seperation</span><span class="token string">"<span class="token variable">$ISE_DS_DIR</span>"</span>/ISE/bin/lin64/ise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并为脚本添加可执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> a+x /opt/Xilinx/14.7/ISE_DS/quickstart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在<code>/usr/share/applications</code>新建文件<code>ISE.desktop</code>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">Name</span><span class="token operator">=</span>ISE<span class="token assign-left variable">Exec</span><span class="token operator">=</span>/opt/Xilinx/14.7/ISE_DS/quickstart<span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/Xilinx/14.7/ISE_DS/ISE/data/images/pn-ise.png<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Development<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中Exec指向的就是上一步建立的脚本文件</p></li><li><p>之后可以使用<code>gtk-launch ISE</code>一键打开</p></li><li><p>还可以在Windows桌面创建快捷方式：</p><p>路径写<code>wslg ~ -d Ubuntu20.04 gtk-launch ISE</code></p><p>不过这个其实是会自动添加到开始菜单的</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于ISE安装包巨大，如果保留非常占据空间，所以考虑删掉。但是删掉后并不能真正释放空间，这个时候需要使用磁盘压缩工具对wsl的虚拟磁盘进行压缩，方法如下：</p><p>以管理员身份运行powershell，并输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Windows\System32&gt; wsl <span class="token operator">--</span>shutdown<span class="token function">PS</span> C:\Windows\System32&gt; diskpartDISKPART&gt; <span class="token function">select</span> vdisk file=<span class="token string">"D:\WSL\ext4.vhdx"</span>DISKPART&gt; attach vdisk readonlyDISKPART&gt; compact vdiskDISKPART&gt; detach vdisk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>file=</code>后面是你的wsl虚拟磁盘的位置</p><h2 id="关于驱动"><a href="#关于驱动" class="headerlink" title="关于驱动"></a>关于驱动</h2><p>由于我还没有开始写任何一个测试程序，尚不知驱动是否正常，这里挖一个坑，改日再填。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li>缺少libncurses.so.5怎么办：<a href="https://blog.csdn.net/qq_36393978/article/details/110948418">https://blog.csdn.net/qq_36393978/article/details/110948418</a></li><li>Ubuntu安装ISE教程：<a href="https://blog.csdn.net/weixin_43238031/article/details/89022601">https://blog.csdn.net/weixin_43238031/article/details/89022601</a></li><li>Ubuntu安装ISE教程以及快捷启动脚本：<a href="https://blog.csdn.net/ixunmo/article/details/82194896">https://blog.csdn.net/ixunmo/article/details/82194896</a></li><li>释放wsl占用空间：<a href="https://zhuanlan.zhihu.com/p/358528257">https://zhuanlan.zhihu.com/p/358528257</a></li><li>清理wsl磁盘占用：<a href="https://www.cnblogs.com/enrio/p/14222648.html">https://www.cnblogs.com/enrio/p/14222648.html</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
    <category term="wsl" scheme="https://toby-shi-cloud.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>将wsl迁移至D盘</title>
    <link href="https://toby-shi-cloud.github.io/posts/movewsltod.html"/>
    <id>https://toby-shi-cloud.github.io/posts/movewsltod.html</id>
    <published>2022-08-07T15:30:00.000Z</published>
    <updated>2022-09-28T17:14:49.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>因为下学期的计组课程需要用到ISE，然而ISE这样13年的软件和win11自然是不兼容了（经过网上大佬们的各种尝试，最终也只能安装到92%），所以在水群大佬的推荐下，我可以尝试使用WSLG（Windows Subsystem for Linux GUI）来运行ISE，于是我就先安装<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps">官网教程更新了wsl2</a>，这个流程不太难，就不赘述了。</p><p>由于ISE体量巨大，所以不得不将WSL迁移到D盘以防止C盘爆炸。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>迁移WSL需要使用工具<code>LxRunOffline</code></p><p>GitHub网址：<a href="https://github.com/DDoSolitary/LxRunOffline/releases">https://github.com/DDoSolitary/LxRunOffline/releases</a><br>如果迁移中遇到以下错误，则应该改用：<a href="https://ddosolitary-builds.sourceforge.io/LxRunOffline/LxRunOffline-v3.5.0-11-gfdab71a-msvc.zip">https://ddosolitary-builds.sourceforge.io/LxRunOffline/LxRunOffline-v3.5.0-11-gfdab71a-msvc.zip</a></p><pre class="line-numbers language-none"><code class="language-none">[ERROR] Couldn't set the case sensitive attribute of the directory "\\?\C:\Users\toby2\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\".Reason: Indicates that the directory trying to be deleted is not empty.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>注意：建议使用管理员身份运行powershell</p><ol><li><p>查看已安装的子系统</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>LxRunOffline list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看子系统所在目录</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>LxRunOffline <span class="token function">get-dir</span> <span class="token operator">-</span>n <span class="token namespace">[xxx]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>xxx</code>是你在步骤1中查询到的子系统版本</p></li><li><p>迁移系统</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span><span class="token operator">/</span>LxRunOffline <span class="token function">move</span> <span class="token operator">-</span>n <span class="token namespace">[xxx]</span> <span class="token operator">-</span>d <span class="token namespace">[ddd]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>xxx</code>是你在步骤1中查询到的子系统版本</p><p><code>ddd</code>是你期望移动到的路径</p></li><li><p>如果迁移系统中出现以下错误</p><pre class="line-numbers language-none"><code class="language-none">[ERROR] The distro "Ubuntu-20.04" has running processes and can't be operated. "wsl -t &lt;name&gt;" or "wsl --shutdown" might help.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则使用快捷键<code>Win+x</code>再按<code>g</code>打开<code>计算机管理</code>重启服务<code>LxssManager</code>（也可以直接停止服务，迁移结束后再打开）</p></li><li><p>如果迁移后Ubuntu报错“拒绝访问”</p><p>使用下列指定为目录授权</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">icacls <span class="token namespace">[ddd]</span> <span class="token operator">/</span>grant <span class="token string">"[user]:(OI)(CI)(F)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ddd</code>为移动后的路径</p><p><code>user</code>为你的用户名</p><p>授权后建议重启<code>LxssManager</code>服务</p></li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol><li><p>如果Ubuntu报错“另一个程序正在使用此文件，进程无法访问”</p><p>以管理员身份运行以下指令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Enable-WindowsOptionalFeature</span> <span class="token operator">-</span>Online <span class="token operator">-</span>FeatureName Microsoft-Windows-Subsystem-Linux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按照要求重启电脑</p><p>造成此错误的原因估计为在未开启WSL的情况下使用资源管理器尝试打开WSL的磁盘镜像文件（.vhdx文件）</p></li><li><p>关于wslg的分辨率</p><p>目前wslg似乎只支持整数倍缩放，这非常不友好，但是可以手动启用非整数倍缩放</p><p>在wsl终端输入<code>sudo vi /mnt/c/ProgramData/Microsoft/WSL/.wslgconfig</code>新建一个文件（或者在Windows中找到<code>C:\ProgramData\Microsoft\WSL</code>，并在其中新建文件<code>.wslgconfig</code>），文件内容如下：</p><pre class="line-numbers language-none"><code class="language-none">[system-distro-env]WESTON_RDP_DISABLE_FRACTIONAL_HI_DPI_SCALING=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后关闭wsl终端，打开powershell，输入<code>wsl --shutdown</code>即可</p><p>只不过150%缩放确实有点糊……</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="wsl" scheme="https://toby-shi-cloud.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>CF R 809 (Div.2) 题解</title>
    <link href="https://toby-shi-cloud.github.io/posts/codeforcesr809.html"/>
    <id>https://toby-shi-cloud.github.io/posts/codeforcesr809.html</id>
    <published>2022-07-20T12:00:00.000Z</published>
    <updated>2022-07-21T16:10:20.663Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a>比赛链接</h2><p><a href="https://codeforces.com/contest/1706">试题链接</a></p><p><a href="https://codeforces.com/blog/entry/105008">官方题解</a></p><p>*注意：在本文中，题目大意没有还原题目背景，也没有细节说明，如果您没有看过题目，还请前往<a href="https://codeforces.com/contest/1706">Codeforces官网</a>看</p><h2 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$且只包含$1$和$m$之间的正整数数列$a_1,a_2,\cdots,a_n$，有一个长度为$m$的字符串$s$，初始时串$s$只包含字符<code>B</code></p><p>接下来进行如下$n$次操作：</p><ul><li>在第$i$次操作时$(1\le i \le n)$，你可以选择将$s$串的第$a_i$个字符或者第$(m+1-a_i)$个字符改成<code>A</code>。（注意，你可以对同一个位置进行若干次操作）</li></ul><p>找到$n$次操作后，你能得到的字典序最小的串$s$</p><p>*本题有多组数据$(t\le2000)$，对于每组数据$1\le n,m \le50$</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>签到题。显然数列${a_n}$的顺序与答案没有关系，因此可以考虑贪心，每次操作都优先将靠前的位置换成<code>A</code>，如果靠前的位置已经被更换了，就换另一个，如果两个都被更换过当然这次操作无论如何都没有意义了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> m <span class="token operator">-</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v和m-v+1的操作选择是一样的，所以就取小的存下来</span>            cnt<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 这里我用的桶存ai</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 实际上当i&gt;m/2时cnt[i]就恒为0了</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 优先把靠前的换为A</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>m <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 如果不止1次更换机会，就把靠后的也换掉</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个长度为$n$的数列数列${c_i}$，其值为不超过$n$的正整数。</p><p>现在对每个$c_i$依次进行如下操作：</p><ul><li>对$c_1$，你将它放在$(0,0)$点</li><li>对$c_i(2\le i\le n)$，记$c_{i-1}$放在了$(x,y)$点，则你可以将$c_i$放在$(x+1,y)$或$(x-1,y)$或$(x,y+1)$（但是不能放在$(x,y-1)$）当然前提是这些地方之前没有放置过其他的$c_i$</li></ul><p>若对于某个$(x,y)$和某个$s$，若$(x,y),(x,y+1),\cdots,(x,y+s-1)$被放置了值相同的$c_i$，则定义这些点组成了一个“塔”。定义“塔”的高是$s$，“塔”被放置在了$(x,y)$处，“塔”的颜色为这些相同的$c_i$的值。</p><p>对于每一个不超过$n$的正整数$r$，<strong>独立</strong>的解决如下问题：</p><ul><li>找到你能按规则构造出的，颜色为$r$​的，高度最高的“塔”。</li></ul><p>*本题有多组数据$(t \le 10^4)$，每组数据满足$n \le 10^5$，对于全部数据$\sum n \le 2 \cdot 10^5$</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>注意到题目要求我们<strong>独立</strong>的处理每一个$r$而且只需要找出最高的“塔”，所以我们可以考虑对于固定的$r$，贪心的希望每个$r$都能刚好搭在上一个$r$上。抽象化的，记$c_i=c_j=r(i &lt; j)$，什么情况下$c_i$和$c_j$可以组成一个“塔”呢？</p><p>进过简单的推理可以证明，当且仅当$(j-i)$为奇数时，$c_i$和$c_j$能构成一个“塔”。</p><blockquote><p>必要性证明过程大致如下：</p><p>若$c_i$被放置在$(x,y)$处，则记$Q(c_i)=x+y$</p><p>则根据题意有$Q(c_{i+1})=x+y\pm1$，即$Q(c_{i+1}) \equiv Q(c_i) + 1 \ (mod\ 2)$</p><p>所以$Q(c_j) \equiv Q(c_i) + j - i \ (mod \ 2)$</p><p>因为$c_j$和$c_i$构成“塔”，所以$Q(c_j)-Q(c_i)=1$</p><p>于是有$j-i \equiv 1 \ (mod \ 2)$，即$(j-i)$是奇数</p><p>充分性证明略，因为只需要给出一个简单的构造，这里就留给读者吧~</p></blockquote><p>那么当$(j-i)$是偶数的时候会发生什么情况呢？由于$c_i$下面可能已经成塔了，但是$c_j$并没有，所以当出现$c_k=r$而且$(k-i)$是奇数时（此时显然$(k-j)$也是奇数）将$c_k$放在$c_i$的上面为“塔”填一层楼是更优的。</p><p>因此本题只需要记录第一个$c_i=r$的$i$值，然后之后一旦碰见$c_j=c_i$而且$(j-i)$是奇数时就<code>ans++</code>即可。</p><p>最后可以看出，对于不同的$r$，我们可以同时进行计算，至此本题解决。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                cnt<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            lst<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的正整数列${h_i}$，你可以花费代价增大其中的值，每花费$1$点代价可以将一个$h_i$增大$1$。</p><p>描述$h_i$是“好看的”，当且仅当$i\neq 1$且$i\neq n$且$h_i &gt; h_{i-1}$且$h_i &gt; h_{i+1}$。</p><p>要求在保证整个数列“好看的”$h_i$最多的情况下花费的最小代价。</p><p>*本题有多组数据$(t \le 10^4)$，对于每组数据$3 \le n \le 10^5$，$h_i \le 10^9$，对于全部数据$\sum n \le 2 \cdot 10^5$</p><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>首先肯定要考虑如何让“好看的”$h_i$最多。根据题意，“好看的”$h_i$无法连续出现，也不能出现在收尾，所以必然可以使得而且最多只能使得$\lfloor\frac{n-1}{2}\rfloor$个$h_i$成为“好看的”。而且当$n$是奇数时很容易解决，因为必然得是所有的$h_{2i}$都是“好看的”。所以接下来重点讨论当$n$是偶数的情况。</p><p>可以注意到，$n$是偶数时，必然存在一个$k$，使得$i&lt;k$时，当$i$是偶数时$h_i$是“好看的”，当$i&gt;k$时，当$i$是奇数时$h_i$是“好看的”。于是，我们可以考虑进行dp。</p><p>设<code>dp[i]</code>使得$h_i$是好看的前提下，保证前$i$个$h_i$中的“看好的”数最多，需要的最少花费，那么最终答案就是<code>min(dp[n-2],dp[n-1])</code>。下面考虑如何转移。进过我们之前的讨论，可以知道，当$i$是偶数时，前面一个好看的数必然是偶数，当$i$是奇数时则既可能是奇数有可能是偶数，于是转移方程如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// w就是变成“好看的”的代价</span><span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">;</span><span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后需要注意一点，本题需要开<code>long long</code></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定长度为$n$的正整数列${a_n}$以及正整数$k$，寻找一个长度为$n$，值不超过$k$的正整数列${p_n}$，使得下面这个式子的值最小<br>$$<br>\max_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)-\min_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)<br>$$<br>最后题目只要求输出上面这个式子可能的最小值，不需要输出对应${p_n}$</p><p>*本题分为D1和D2，仅仅是数据范围不同</p><p>*D1范围：有多组数据$(t \le 100)$，对于每组数据$n,k,a_n \le 3000$，且保证${a_n}$单调不减，且对于全部数据$\sum n \le 3000$</p><p>*D2范围：有多组数据$(t \le 100)$，对于每组数据$n,k,a_n \le 10^5$，且保证${a_n}$单调不减，且对于全部数据$\sum n \le 10^5$</p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析 1"></a>解析 1</h3><p>先考虑D1怎么做，这里根据范围可以猜想存在$O(n^2)$的做法可以通过D1。显然遍历所有的${p_n}$是非常不现实的，因为复杂度将达到$O(k^n)$，十分恐怖。</p><p>观察要求的式子，如果我们令$M=\max_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)$以及$m=\min_{1 \le i \le n}(\lfloor\frac{a_i}{p_i}\rfloor)$，则我们可以考虑遍历$M$（从$a_n$遍历到$\lfloor\frac{a_n}{k}\rfloor$），然后对于每个$M$尽可能的选取较大的$m$即可。具体做法如下：</p><p>对于固定$M$和每一个$a_i$，为了使得$m$最大，则必须让每个$\lfloor\frac{a_i}{p_i}\rfloor$尽量大，即$p_i$尽量小，即有$\lfloor\frac{a_i}{p_i}\rfloor \le M$但是$\lfloor\frac{a_i}{p_i-1}\rfloor &gt; M$，如果记$a_i = kM + r(0\le r &lt; M)$可以解出$p_i = k (0 \le r &lt; k)$或者$p_i = k + 1 (k \le r &lt; M)$。借此我们就可以以$O(n^2)$的复杂度过D1。</p><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3e3</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">/</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> inf<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_val <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span> max_val <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> max_val<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> min_val <span class="token operator">=</span> inf<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> max_val<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> p <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> <span class="token punctuation">{</span> min_val <span class="token operator">=</span> inf<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min_val <span class="token operator">&lt;=</span> max_val<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析2"><a href="#解析2" class="headerlink" title="解析2"></a>解析2</h3><p>沿用D1的思路，但是我们希望可以在$O(log n)$的复杂度内找出给定$M$情况下的最大$m$。</p><p>要做到这一点，我们要先回过头来看看式子，$\lfloor\frac{a_i}{p_i}\rfloor \le M$但是$\lfloor\frac{a_i}{p_i-1}\rfloor &gt; M$，但是这次我们不解出$p_i$而是反而解出$a_i$，于是有$(M+1)(p_i-1)\le a_i &lt; (M+1)p_i$。由于对于相同的$p_i$当然是$a_i$越小才能影响到$m$的值，所以对于每一个$M$，遍历$p$（从1开始直到$(p+1)\cdot(M+1)&gt;a_n$为止），然后对于每一个$p$，可以用二分的方式（因为$a_n$有序）找到第一个不小于$(M+1)(p_i-1)$的$a_i$，用$\lfloor\frac{a_i}{p}\rfloor$更新$m$（取min）。</p><p>于是复杂度来到了$O(\sum\frac{n}{i}log n)$，可以证明$O(\sum\frac{n}{i})=O(nlogn)$所以总的复杂度是$O(nlog^2n)$。但是这个复杂度并不是最优的（虽然对于1e5的数据已经足够了）。我们可以考虑预处理而非每次都二分来寻找$a_i$，这使得复杂度降到$O(nlogn)$。</p><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span> max_val<span class="token punctuation">,</span> min_val<span class="token punctuation">;</span><span class="token keyword">int</span> great_min<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">// 去重，显然重复的ai对本题无影响，当然这个语句本来也不是必须的</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>            great_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 预处理，即great_min[x]表示不小于x的最小的ai</span>        <span class="token punctuation">}</span>        max_val <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min_val <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>max_val <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> k<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>max_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 这里i其实是遍历的(p-1)</span>            <span class="token punctuation">{</span>                min_val <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>min_val<span class="token punctuation">,</span> great_min<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token punctuation">(</span>max_val<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max_val <span class="token operator">-</span> min_val<span class="token punctuation">)</span><span class="token punctuation">;</span>            max_val<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个$n$个点$m$条边的无向无权连通图，点编号从1到n，边编号从1到m。</p><p>给出$q$次询问，每次询问包括两个正整数$l$和$r$。你需要找到你一个最小的满足下列要求的$k$：</p><ul><li>对任何满足$l \le a \le b \le r$的点对$(a,b)$，点$a$和点$b$可以只使用前$k$条边（即编号从1到k的边）的情况下连通</li></ul><p>*本题有多组数据$(t \le 1000)$，对每个数据$n\le10^5$，$m,q\le2\cdot10^5$，对全部数据$\sum n\le10^5$，$\sum m,\sum q\le2\cdot10^5$</p><h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><p>本题第一眼看的时候有一种二分答案+可持续化并查集的感觉。然而可惜的是，每次询问不是检查两个点是否连通，而是检查一个区间是否连通。那么提到区间，就可以想到一种做法是倍增。而且我们惊人的发现两个区间的合并是如此的简单，只要有公共点，两个区间合并就是对$k$取max。于是问题转化为如何求得每两个相邻点的$k$。</p><p>转化到这个地步了，当然可以直接二份答案+可持续化并查集，可是复杂度将来到3个log，而且写起来还很麻烦，根本用不着。于是考虑只使用普通的并查集，而且不用路径压缩，而是改为启发式合并的并查集，这样做的好处就是每加一条边的时候，都只检查小集合里面的所有点有没有和相邻的点相连。复杂度是$O(nlogn)$。</p><p>于是本题总复杂度为$O(nlogn+nlogn+qlogn)$即$O((n+q)logn)$</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">debug</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">" = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_pow2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">,</span> <span class="token number">65536</span><span class="token punctuation">,</span> <span class="token number">131072</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> forest<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">c_log2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>c_pow2<span class="token punctuation">,</span> c_pow2 <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> c_pow2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fa_v <span class="token operator">=</span> fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fa<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> n <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fa<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa_v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>forest<span class="token punctuation">[</span>fa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> pk <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> pk<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token operator">+</span>c_pow2<span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pk <span class="token operator">=</span> <span class="token function">c_log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>r<span class="token operator">-</span>c_pow2<span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="竞赛" scheme="https://toby-shi-cloud.github.io/categories/%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="Codeforces" scheme="https://toby-shi-cloud.github.io/tags/Codeforces/"/>
    
    <category term="算法" scheme="https://toby-shi-cloud.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
