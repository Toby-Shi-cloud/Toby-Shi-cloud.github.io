<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TobyShiの博客</title>
  
  <subtitle>TobyShiの博客</subtitle>
  <link href="https://toby-shi-cloud.github.io/atom.xml" rel="self"/>
  
  <link href="https://toby-shi-cloud.github.io/"/>
  <updated>2023-11-06T06:46:50.892Z</updated>
  <id>https://toby-shi-cloud.github.io/</id>
  
  <author>
    <name>TobyShi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>现代 C++ 编程（一）：多态</title>
    <link href="https://toby-shi-cloud.github.io/posts/cpppolymorphism.html"/>
    <id>https://toby-shi-cloud.github.io/posts/cpppolymorphism.html</id>
    <published>2023-11-06T02:00:00.000Z</published>
    <updated>2023-11-06T06:46:50.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鉴于我们的编译实验历史性的升级到了 C++17，迈出了走向现代 C++ 非常重要的一步，着实让我这样的 C++ 语言爱好者过了一把瘾。</p><p>在努力折磨编译器和被编译器反杀的过程中，愈发觉得 C++ 真是一门神奇的语言，故打算开一个新坑（正好太久没用写博客了），就写写我对现代 C++ 的一些肤浅的理解吧。</p><p>本文作为系列第一章，就先来讲讲“熟悉”的面向对象之多态（Polymorphism）吧！</p><blockquote><p>一个阅读提示：在 Java 中，我们一般使用『父类』和『子类』的说法，但是在 C++ 中，我们更倾向于使用『基类』和『派生类』的说法。</p></blockquote><h2 id="虚函数多态"><a href="#虚函数多态" class="headerlink" title="虚函数多态"></a>虚函数多态</h2><p>作为一门曾经被称作『C with Class』的语言，面向对象的理念也曾在 C++ 中盛行，时至今日，传统多态其实仍不过时，尽管 C++ 已经更新了很多更加现代的方案了。</p><p>虚函数多态的语法也很简单，仅需要把需要被重写（override）的函数在基类中标记为虚函数（virtual）即可。另外，对于需要实现多态的基类，通常还需要将析构函数标记为虚，否则可能造成内存泄露（析构基类指针时，非虚的析构函数不会释放派生类资源）。</p><p>下面是传统语法的一个小例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::foo()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Derived::foo()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Base <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    base<span class="token operator">-&gt;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Derived::foo()</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述例子中，我们通过基类指针成功调用了派生类的方法，实现了最基础的多态。</p><h2 id="函数指针多态"><a href="#函数指针多态" class="headerlink" title="函数指针多态"></a>函数指针多态</h2><p>函数指针多态最初出现在 C 中，由于 C 没有对象的概念，但面向对象兴起后，C 也有实现对象和多态的需求，使用函数指针实现多态是一种常见的做法。</p><p>在我们的操作系统课程中就有用到此种做法，在微内核操作系统中，文件设备可能是『磁盘』，『管道』，也可能是『控制台』，因此使用继承和多态是一种很好的方式。有如下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Dev</span> <span class="token punctuation">{</span><span class="token keyword">int</span> dev_id<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dev_read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> u_int<span class="token punctuation">,</span> u_int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dev_write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> u_int<span class="token punctuation">,</span> u_int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dev_close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dev_stat<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Stat</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dev_seek<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Fd</span> <span class="token operator">*</span><span class="token punctuation">,</span> u_int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们声明了 5 个方法（姑且称之为方法）的函数指针，对于每一个派生类，把定义好的函数填入对应函数指针，调用是直接调用函数指针，即实现了多态。</p><p>当然 C 的实现看起来既占用空间又麻烦，只是作为 C 实现多态的替代方式。但是在 C++ 中，配合模板可以有更优美的写法。</p><p>考虑以下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::~Base()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">{</span>    <span class="token operator">~</span><span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Derived::~Derived()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Base<span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment">// p is destroyed here</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给大家几秒钟思考程序输出是什么。</p><p>上面的代码中，基类没有使用虚函数，因此不是一个动态多态类，无法在运行期获取类型信息，按照对传统多态语法的理解，直接释放 <code>p</code> 时一定会导致内存泄露。然而，上述程序输出是：</p><pre class="line-numbers language-none"><code class="language-none">Derived::~Derived()Base::~Base()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由此可见，<code>shared_ptr</code> 通过某种方式正确的析构了派生类，尽管无法在运行期获取类型信息。</p><p>实际上，这里 <code>shared_ptr</code> 的构造函数使用了模板，并保存了派生类的析构方法，一种模仿的实现可以是这样的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">my_pointer</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> element_type <span class="token operator">=</span> T<span class="token punctuation">;</span>    <span class="token keyword">using</span> delete_type <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    element_type <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    delete_type deleter<span class="token punctuation">;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">&gt;</span>    <span class="token keyword">explicit</span> <span class="token function">my_pointer</span><span class="token punctuation">(</span>U <span class="token operator">*</span>p<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">deleter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>T <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>U <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token operator">~</span><span class="token function">my_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        my_pointer<span class="token operator">&lt;</span>Base<span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment">// p is destroyed here</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明显的，<code>my_pointer</code> 通过带模板的构造函数，保存了派生类的析构方法，通过这种方式，派生类得以正确析构。</p><p>扩展这种语法，就可以一种支持给定操作的“基类”了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Foo) "</span> <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Boo</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Boo) "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CanPrint</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> function_t <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    function_t printer<span class="token punctuation">;</span>    function_t deleter<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>    <span class="token keyword">explicit</span> <span class="token function">CanPrint</span><span class="token punctuation">(</span>T <span class="token operator">*</span>p<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">printer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>                <span class="token punctuation">{</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">deleter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>                  <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CanPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        <span class="token function">printer</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> CanPrint <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>    x<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CanPrint <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">new</span> Foo<span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CanPrint <span class="token function">boo</span><span class="token punctuation">(</span><span class="token keyword">new</span> Boo<span class="token punctuation">{</span><span class="token string">"Hello, world!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序正确输出：</p><pre class="line-numbers language-none"><code class="language-none">(Foo) 42(Boo) Hello, world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从性能上来说，使用函数指针只会在运行期进行一次额外的指针寻址操作，相比虚函数查虚表还是会快一些的。另外不使用继承和非侵入式设计也会使得代码更加简洁。不足在于，如果要向下转型则不太方面（传统写法可以 <code>dynamic_cast</code>）。</p><h2 id="模板多态"><a href="#模板多态" class="headerlink" title="模板多态"></a>模板多态</h2><p>在函数指针一节中，我们使用了模板来获取编译期类型信息，随后保存函数指针待用。虽然函数指针相比虚函数查表要快，但仍然会有运行期的开销（多一层指针寻址），如果不需要存储编译器未知类型的对象，则可以考虑直接使用模板实现编译器多态，使得运行期开销降至 0。</p><p>具体实现示例如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Foo) "</span> <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Boo</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Boo) "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">CanPrint</span><span class="token operator">&gt;</span><span class="token keyword">auto</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> CanPrint <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">-&gt;</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Foo foo<span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Boo boo<span class="token punctuation">{</span><span class="token string">"Hello, world!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序也可以正确输出：</p><pre class="line-numbers language-none"><code class="language-none">(Foo) 42(Boo) Hello, world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里函数 <code>print</code> 使用了后置返回值声明直观表达了对参数 <code>x</code> 的要求：可以调用 <code>x.print()</code>。虽然在上述简单的程序中不写也可以，但是如果 <code>print</code> 有针对不同类型的重载版本，写明要求可以触发 SFINAE（Substitution Failure Is Not An Error），避免二义性。</p><p>当然，在 C++20 引入 <code>concept</code> 后，上述写法可以进一步改进：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">concept</span> <span class="token class-name">CanPrint</span> <span class="token operator">=</span> <span class="token keyword">requires</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span>CanPrint T<span class="token operator">&gt;</span><span class="token keyword">auto</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板多态还有另一种稍显复杂的写法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">CanPrint</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> T<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">CanPrint</span><span class="token operator">&lt;</span><span class="token class-name">Foo</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">{</span>v<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Foo) "</span> <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Boo</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">CanPrint</span><span class="token operator">&lt;</span><span class="token class-name">Boo</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">Boo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">)</span> <span class="token operator">:</span> s<span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Boo) "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> CanPrint<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>    obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Foo foo<span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Boo boo<span class="token punctuation">{</span><span class="token string">"Hello, world!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法对类的要求更加严格，更不容易发生二义性，不过需要侵入式的设计。这种设计参考了 Rust 的 <code>traits</code>。不过在 C++20 引入 <code>concept</code> 后这种写法的意义就不大了。</p><p>还有另外一种写法也是仿造 Rust <code>traits</code> 的实现的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Foo) "</span> <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Boo</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Boo) "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">print_traits</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> print_return_t <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">declval</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">traits</span> <span class="token operator">=</span> print_traits<span class="token operator">&lt;</span>T<span class="token operator">&gt;&gt;</span><span class="token keyword">auto</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">-&gt;</span> <span class="token keyword">typename</span> <span class="token class-name">traits</span><span class="token double-colon punctuation">::</span>print_return_t<span class="token punctuation">{</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Foo foo<span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Boo boo<span class="token punctuation">{</span><span class="token string">"Hello, world!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: print_traits&lt;int&gt; has no type member print_return_t</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法常见于标准库中（当然我这个 <code>traits</code> 是简化实现，标准库为了使报错信息更友善，会写的较为复杂），且头文件 <code>type_traits</code> 包括了大量标准库定义的 <code>traits</code>。其本质也是限制模板参数。</p><h2 id="std-variant-多态"><a href="#std-variant-多态" class="headerlink" title="std::variant 多态"></a>std::variant 多态</h2><p>在 C++17 中，<code>std::variant</code> 和 <code>std::any</code> 横空出世，他们神奇之处是可以存储若干毫不相干的类型并记录类型信息，使得多态和向下转型都可以不依赖虚表的更好的实现。</p><p>以下是借助 <code>std::variant</code> 实现多态和向下转型的一个小型示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Foo) "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Boo</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(Boo) "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">using</span> CanPrint <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> Boo<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token keyword">inline</span> <span class="token keyword">constexpr</span> <span class="token keyword">bool</span> always_false_v <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> CanPrint <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">self_double</span><span class="token punctuation">(</span>CanPrint <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>         <span class="token keyword">using</span> T <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>decay_t<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Foo<span class="token operator">&gt;</span><span class="token punctuation">)</span>            obj<span class="token punctuation">.</span>v <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Boo<span class="token operator">&gt;</span><span class="token punctuation">)</span>            obj<span class="token punctuation">.</span>s <span class="token operator">+=</span> obj<span class="token punctuation">.</span>s<span class="token punctuation">;</span>        <span class="token keyword">else</span>             <span class="token keyword">static_assert</span><span class="token punctuation">(</span>always_false_v<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">"non-exhaustive visitor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>CanPrint<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"{"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>obj <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">==</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"}\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>CanPrint<span class="token operator">&gt;</span> vec<span class="token punctuation">{</span>Foo<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Boo<span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Foo<span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Foo<span class="token punctuation">{</span><span class="token number">59</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Boo<span class="token punctuation">{</span><span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>obj <span class="token operator">:</span> vec<span class="token punctuation">)</span>        <span class="token function">self_double</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码输出：</p><pre class="line-numbers language-none"><code class="language-none">{(Foo) 1, (Boo) hello, (Foo) 42, (Foo) 59, (Boo) world}{(Foo) 2, (Boo) hellohello, (Foo) 84, (Foo) 118, (Boo) worldworld}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 <code>std::visit</code>，上述代码实现了 <code>std::variant</code> 多态。当然 <code>std::variant</code> 还有很多其他方法获取存储类型并进行多态操作，上述代码只举了最简单的例子。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天的笔记就到这里吧，欢迎批评指正和提供更好的思路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++" scheme="https://toby-shi-cloud.github.io/categories/C/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成 P7 设计文档 （Verilog 流水线+异常处理 CPU）</title>
    <link href="https://toby-shi-cloud.github.io/posts/co-p7.html"/>
    <id>https://toby-shi-cloud.github.io/posts/co-p7.html</id>
    <published>2023-06-30T16:00:00.000Z</published>
    <updated>2023-11-07T13:45:14.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="设计文档综述"><a href="#设计文档综述" class="headerlink" title="设计文档综述"></a>设计文档综述</h2><h3 id="数据通路设计"><a href="#数据通路设计" class="headerlink" title="数据通路设计"></a>数据通路设计</h3><p>数据通路和实验指导书相仿。</p><p>如下图所示：<img src="https://s2.loli.net/2022/12/06/ub6RfChrc93DzQB.jpg"></p><h3 id="模块文件结构"><a href="#模块文件结构" class="headerlink" title="模块文件结构"></a>模块文件结构</h3><p>新增系统桥（<code>Bridge</code>）、协处理器（<code>CP0</code>）、计时器（<code>Timer</code>）、异常流水线（<code>Exception Pipeline</code>）。</p><p>文件结构如下：</p><p><img src="https://s2.loli.net/2022/12/06/v8KmCyDaqrGdlpX.png"></p><h2 id="新增模块描述"><a href="#新增模块描述" class="headerlink" title="新增模块描述"></a>新增模块描述</h2><h3 id="系统桥-Bridge"><a href="#系统桥-Bridge" class="headerlink" title="系统桥 - Bridge"></a>系统桥 - <code>Bridge</code></h3><p>系统桥用于连接 CPU 和外设。系统桥能接收 CPU 传来的写存地址，自动的选择对应的外设（包括内存、异常、计时器）进行读写操作。</p><p>端口描述如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> Bridge <span class="token punctuation">(</span>    <span class="token comment">// Bridge</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b_data_addr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b_data_rdata<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b_data_wdata<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> b_data_byteen<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> b_inst_addr<span class="token punctuation">,</span>    <span class="token comment">// DM</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m_data_addr<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m_data_rdata<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m_data_wdata<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> m_data_byteen<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m_inst_addr<span class="token punctuation">,</span>    <span class="token comment">// Timer 1</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> T1_Addr<span class="token punctuation">,</span>    <span class="token keyword">output</span>        T1_WE<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> T1_Din<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> T1_Dout<span class="token punctuation">,</span>    <span class="token comment">// Timer 2</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> T2_Addr<span class="token punctuation">,</span>    <span class="token keyword">output</span>        T2_WE<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> T2_Din<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> T2_Dout<span class="token punctuation">,</span>    <span class="token comment">// Interrupt</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m_int_addr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> m_int_byteen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="协处理器-CP0"><a href="#协处理器-CP0" class="headerlink" title="协处理器 - CP0"></a>协处理器 - <code>CP0</code></h3><p>协处理器用于处理异常信息。内置 <code>SR</code>、<code>Cause</code>、<code>EPC</code> 三个寄存器，用于表示异常信息。</p><p>端口定义如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> CP0 <span class="token punctuation">(</span>    <span class="token keyword">input</span>         clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>         reset<span class="token punctuation">,</span>    <span class="token keyword">input</span>         cp_reg_we<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> cp_reg_addr<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cp_reg_wd<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cp_reg_rd<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cp_vpc<span class="token punctuation">,</span>    <span class="token keyword">input</span>         cp_bd<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> cp_exc_code<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> cp_HWInt<span class="token punctuation">,</span>    <span class="token keyword">input</span>         cp_exl_clr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cp_epc<span class="token punctuation">,</span>    <span class="token keyword">output</span>        cp_int_req<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计时器-Timer"><a href="#计时器-Timer" class="headerlink" title="计时器 - Timer"></a>计时器 - <code>Timer</code></h3><p>计时器用于产生定时中断或稳定中断脉冲。</p><p>代码已由课程组提供。</p><h3 id="异常流水线-Exception-Pipeline"><a href="#异常流水线-Exception-Pipeline" class="headerlink" title="异常流水线 - Exception Pipeline"></a>异常流水线 - <code>Exception Pipeline</code></h3><p>异常流水线专用于流水异常信息。可以理解为就是将原有的流水线寄存器独立出来了。</p><p>端口定义如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> ExceptionPipeline <span class="token punctuation">(</span>    <span class="token keyword">input</span>  clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>  reset<span class="token punctuation">,</span>    <span class="token keyword">input</span>  D_bd<span class="token punctuation">,</span>    <span class="token keyword">input</span>  D_eret<span class="token punctuation">,</span>    <span class="token keyword">output</span> cp_bd<span class="token punctuation">,</span>    <span class="token keyword">output</span> cp_eret<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> F_excCode<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> D_excCode<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> E_excCode<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> M_excCode<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cp_exc_code<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li><p>请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？</p><blockquote><p>鼠标和键盘的输入信号都会转化为不同的系统中断信号。CPU根据中断信号的值可以执行对应的汇编指令，这样就达到了相应鼠标和键盘的目的。</p></blockquote></li><li><p>请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）</p><blockquote><p>我认为是可以支持用户自定义入口地址的。</p></blockquote></li><li><p>为何与外设通信需要 Bridge？</p><blockquote><p>让CPU不需要关心具体的数据从何而来，只需要知道地址就可以了。一个模块只做一件事情。达到了高聚合的目的。</p></blockquote></li><li><p>请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并针对每一种模式绘制状态移图。</p><blockquote><p>计数器模式 0：</p><p>当计数器倒计数为 0 后，计数器停止计数，Ctrl 寄存器的计数使能自动变为 0，并且中断信号始终保持有效，直到屏蔽中断或重新开始计数。</p><p>状态转移图如下：<img src="https://s2.loli.net/2022/12/06/QnbyaRPLOqoU6Wc.jpg"></p><p>计数器模式 1：</p><p>当计数器倒计时为 0 后，会自动的重新读取 preset 寄存器的值，然后重新开始倒计数。在这种模式下，中断信号只会产生一个周期。</p><p>状态转移图如下：<img src="https://s2.loli.net/2022/12/06/cQVXoA7TgqCi3PF.jpg"></p></blockquote></li><li><p>倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？</p><blockquote><p>会导致宏观PC突然为0或者为x。在清空流水线的时候，应该保留PC信息。</p></blockquote></li><li><p>为什么 <code>jalr</code> 指令为什么不能写成 <code>jalr $31, $31</code>？</p><blockquote><p>如果 <code>jalr $31 $31 </code>的延迟槽内发生异常或需要响应中断。那么 <code>$31</code> 寄存器的值已经被 <code>jalr</code> 改变，但是处理异常结束后，会再次执行 <code>jalr</code> 指令，这就会跳转到不正确的 <code>PC</code> 地址。</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>MOS 体系架构移植任务实验报告</title>
    <link href="https://toby-shi-cloud.github.io/posts/mos-porting-task-experiment-report.html"/>
    <id>https://toby-shi-cloud.github.io/posts/mos-porting-task-experiment-report.html</id>
    <published>2023-06-16T08:15:00.000Z</published>
    <updated>2023-06-16T11:58:21.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本实验报告将尽可能的按照 MOS 操作系统的各个功能分类编写，并且尽可能的精简。</p><p>同时我也写了以移植时间顺序编写的实验流程报告：<a href="https://toby-shi-cloud.github.io/posts/run-mos-on-riscv.html">Run MOS on RISC-V （移植过程） | TobyShiの博客</a>。</p><p>Git Commit Graph：<br><img src="https://s2.loli.net/2023/06/16/Fj5XcaModBvEp2D.png" alt="image.png"></p><p>代码仓库地址：<a href="https://github.com/Toby-Shi-cloud/Run-MOS-on-RISC-V">Toby-Shi-cloud/Run-MOS-on-RISC-V | GitHub</a></p><h2 id="Lab-0-环境配置"><a href="#Lab-0-环境配置" class="headerlink" title="Lab 0 环境配置"></a>Lab 0 环境配置</h2><p>推荐使用常见的 Linux 发行版作为实验环境，不推荐在 Mac 或 Windows 上直接折腾，我使用了 GitHub 的 Codespaces 作为开发环境。</p><h3 id="交叉编译器"><a href="#交叉编译器" class="headerlink" title="交叉编译器"></a>交叉编译器</h3><p>首先安装交叉编译器，可以直接使用常见的包管理器安装，如 <code>apt install gcc-riscv64-unknown-elf</code></p><h3 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a><a href="https://github.com/qemu/qemu">QEMU</a></h3><p><code>qemu</code> 是本实验需要的模拟器，包管理器安装的版本可能较老，故需要下载源代码手动编译，提前安装 <code>ninja</code> 和 <code>pixman-1</code> 就可以编译成功。</p><h3 id="OpenSBI"><a href="#OpenSBI" class="headerlink" title="OpenSBI"></a><a href="https://github.com/riscv-software-src/opensbi">OpenSBI</a></h3><p>由于 debug 等需要，我也 clone 了 OpenSBI 的源代码并编译使用。</p><h2 id="Lab-1-内核启动和-printk-实现"><a href="#Lab-1-内核启动和-printk-实现" class="headerlink" title="Lab 1 内核启动和 printk 实现"></a>Lab 1 内核启动和 <code>printk</code> 实现</h2><h3 id="通过编译"><a href="#通过编译" class="headerlink" title="通过编译"></a>通过编译</h3><p>这一步需要更改汇编代码，编译器和编译器选项。</p><p>经过不断试错，最终我选用编译选项是 <code>--std=gnu99 -march=rv32gc -mabi=ilp32 -Wall -fno-pic -ffreestanding -fno-stack-protector -fno-builtin -Werror</code>，链接选项是 <code>-static -nostdlib --fatal-warnings -melf32lriscv -Lsbi_bin</code>，同时我还链接了 OpenSBI 的编译产物 <code>-lsbi -lplatsbi</code>，当然事实证明这是没有必要的，因为 OpenSBI 中提供的函数都是针对 M 态的，与我无用。</p><h3 id="启动内核"><a href="#启动内核" class="headerlink" title="启动内核"></a>启动内核</h3><p>OpenSBI 引导后会默认调转到 <code>0x80200000</code> 处，而非我们 <code>target/mos</code> 文件的 <code>_start</code> 处，故需要对汇编文件和链接文件做出更改：首先使用 <code>.section</code> 指令将 <code>_start</code> 放置在 <code>.text.start</code><br>段，随后修改链接脚本将 <code>.text.start</code> 放置在 <code>0x80200000</code> 处。</p><h3 id="Printk"><a href="#Printk" class="headerlink" title="Printk"></a><code>Printk</code></h3><p>修改 <code>console.c</code> 实现使用 <code>ecall</code> 与 OpenSBI 交互，对于 <code>printcharc</code> 通常我们可以使用 <code>legacy ecall</code> 中的 <code>sbi_console_putchar</code>，当然我后来改用了 <code>SBI_EXT_DBCN</code> 中的 <code>SBI_EXT_DBCN_CONSOLE_WRITE_BYTE</code> 进行实现。对于 <code>scancharc</code> 使用 <code>legacy ecall</code> 实现时会和新版本的 OpenSBI 不兼容，必须更改 OpenSBI 源代码或使用较低版本才可以正常运行，所以使用 OpenSBI 最近新增的 <code>SBI_EXT_DBCN</code> 中的函数会更好。对于 <code>halt</code> 的实现，使用 <code>legacy ecall</code> 或 <code>SBI_EXT_SRST</code> 都可以。</p><p><code>console.c</code> 中极可能出现两种错误：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">asm</span> <span class="token punctuation">(</span><span class="token string">"mv a0, %[a0]\n"</span><span class="token string">"mv a1, %[a1]\n"</span><span class="token string">"mv a2, %[a2]\n"</span><span class="token string">"mv a3, %[a3]\n"</span><span class="token string">"mv a4, %[a4]\n"</span><span class="token string">"mv a5, %[a5]\n"</span><span class="token string">"mv a6, %[fid]\n"</span><span class="token string">"mv a7, %[eid]\n"</span><span class="token string">"ecall\n"</span><span class="token string">"mv %[error], a0\n"</span><span class="token string">"mv %[value], a1\n"</span><span class="token operator">:</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>a0<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>a1<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>a2<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>a3<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>a4<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>a5<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>arg5<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fid<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>fid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>eid<span class="token punctuation">]</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个内嵌汇编代码看起来没有什么问题，但是内嵌汇编代码必须表明汇编代码中敏感的寄存器，否则极其容易导致错误：譬如 <code>fid</code> 已经保存在 <code>a0</code> 中了，但是第一步会直接被覆盖掉，因此后续的 <code>mv a6, %[fid]</code> 无法获取正确的值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">sbiret</span><span class="token function">sbi_ecall</span><span class="token punctuation">(</span>u_int ext<span class="token punctuation">,</span> u_int fid<span class="token punctuation">,</span> u_int arg0<span class="token punctuation">,</span> u_int arg1<span class="token punctuation">,</span>          u_int arg2<span class="token punctuation">,</span> u_int arg3<span class="token punctuation">,</span> u_int arg4<span class="token punctuation">,</span> u_int arg5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">halt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">sbi_ecall</span><span class="token punctuation">(</span>SBI_EXT_SRST<span class="token punctuation">,</span> SBI_EXT_SRST_RESET<span class="token punctuation">,</span>SBI_SRST_RESET_TYPE_SHUTDOWN<span class="token punctuation">,</span> SBI_SRST_RESET_REASON_NONE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__builtin_unreachable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this ecall should not return</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unreachable code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码也是看起来没有问题，但是由于 <code>sbi_ecall</code> 的返回值没有收到，并且 <code>sbi_ecall</code> 中没有显式改变程序状态，故可能在编译器 <code>-O2</code> 优化中将该函数当作无用代码优化掉，因此 <code>halt</code> 函数最终变成空壳，不会发挥作用。</p><h2 id="Lab-2-MMU-设置和内存管理"><a href="#Lab-2-MMU-设置和内存管理" class="headerlink" title="Lab 2 MMU 设置和内存管理"></a>Lab 2 MMU 设置和内存管理</h2><p>我们使用的 SV32 虚拟内存管理方式和 MIPS 大同小异，可能唯一需要注意的就是权限位的不同以及 SV32 中只有低 10 位是权限位。</p><p>在这个 Lab 中，使用物理内存依然可以正常完成，但是需要注意为后续用户态以及进程切换做准备，所以务必建立虚拟内存。在内核态，我们之间使用恒等映射就可以了。在 Lab 5 后，我们还要为 virtio 设备的 MMIO 地址做映射，我的方案是将 MMIO 地址映射到 <code>KSEG1</code> 中，和原版 MOS 保持一致，方便移植。</p><h2 id="Lab-3-异常处理和进程管理"><a href="#Lab-3-异常处理和进程管理" class="headerlink" title="Lab 3 异常处理和进程管理"></a>Lab 3 异常处理和进程管理</h2><h3 id="时钟中断"><a href="#时钟中断" class="headerlink" title="时钟中断"></a>时钟中断</h3><p>这一步主要内容是开启时钟中断，获取当前时间（使用 <code>rdtime</code>），调用 OpenSBI 接口设置下次中断。</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>这一步主要内容是进行合理的上下文保存，合理的初始化页表。RISCV 与 MIPS 在这一步的明显差别之一是：在 MIPS 中我们不需要映射内核态地址到页表中，但是 RISCV 中必须要进行映射，否则每次陷入内核台都需要切换页表，非常麻烦。</p><h3 id="缺页异常"><a href="#缺页异常" class="headerlink" title="缺页异常"></a>缺页异常</h3><p>我们的 MOS 系统中，只要用户访问的地址在用户态，那么一旦发生缺页一场，直接 <code>passive_alloc</code> 分配一页出去就可以了。</p><h3 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h3><p>进入用户态后，会发现 gdb 不能添加用户态断点，这就需要手动额外加在对应的 <code>elf</code> 文件。可以使用 <code>add-symbol-file &lt;filename&gt; &lt;address&gt;</code> 进行加载。需要注意的是，在用户态下无法访问内核断点，如果存在内核断点，可能导致 gdb 无法继续运行，需要取消内核断点后继续运行。</p><h2 id="Lab-4-系统调用和-Fork"><a href="#Lab-4-系统调用和-Fork" class="headerlink" title="Lab 4 系统调用和 Fork"></a>Lab 4 系统调用和 Fork</h2><h3 id="页表自映射"><a href="#页表自映射" class="headerlink" title="页表自映射"></a>页表自映射</h3><p>我采用的方案是在用户需要访问页表项时将页目录 copy 一份到 UVPT 区，这种做法只需要额外的一页内存，简单高效，唯一需要注意的是当页目录项发生改变时，必须无效化这份 copy，下次要使用时重新 copy。代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_pgdir_copy_pa <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">panic_on</span><span class="token punctuation">(</span><span class="token function">page_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>pp_ref<span class="token operator">++</span><span class="token punctuation">;</span>curenv<span class="token operator">-&gt;</span>env_pgdir_copy_pa <span class="token operator">=</span> <span class="token function">page2pa</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>p <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span>curenv<span class="token operator">-&gt;</span>env_pgdir_copy_pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>u_int kva <span class="token operator">=</span> <span class="token function">page2kva</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span>kva<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>kva<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>cur_pgdir<span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pte<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>pte<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> PTE_R <span class="token operator">|</span> PTE_U<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>pte<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>UVPT<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ADDR_PTE</span><span class="token punctuation">(</span>cur_pgdir<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_V <span class="token operator">|</span> PTE_R <span class="token operator">|</span> PTE_U<span class="token punctuation">;</span>cur_pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>UVPT<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ADDR_PTE</span><span class="token punctuation">(</span>kva<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_V<span class="token punctuation">;</span><span class="token keyword">int</span> pte_idx <span class="token operator">=</span> <span class="token punctuation">(</span>addr <span class="token operator">-</span> UVPT<span class="token punctuation">)</span> <span class="token operator">/</span> BY2PG<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cur_pgdir<span class="token punctuation">[</span>pte_idx<span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"not a valid pte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="syscall-fork-和-copy-on-write"><a href="#syscall-fork-和-copy-on-write" class="headerlink" title="syscall, fork 和 copy-on-write"></a><code>syscall</code>, <code>fork</code> 和 <code>copy-on-write</code></h3><p>实现页表自映射后，这些功能需要移植的内容较少，需要格外关注的是 RISCV 和 MIPS 的寄存器差别，<code>tf-&gt;regs[2]</code> 在 MIPS 中是返回值寄存器 <code>$v0</code>，但在 RISCV 中是 <code>sp</code>，如果没有改相关代码，直接移植过来，后果肯定是灾难性的。</p><h2 id="Lab-5-文件系统"><a href="#Lab-5-文件系统" class="headerlink" title="Lab 5 文件系统"></a>Lab 5 文件系统</h2><p>有关 virtio 的知识已经在另一篇报告中说明了，因此不再赘述。这里可能遇到的问题是收不到中断，我也被这个问题折磨了一天，如果确认其它部分没有问题的话（譬如物理地址使用是否正确），可能是 OpenSBI 没有打开外设中断吧。总之我最终采用了反复读权限位的用户态 <code>busy waiting</code> 方式判断硬件请求是否完成，某种意义上说，少陷入内核态也算是提高了性能吧。</p><h2 id="Lab-6-Shell"><a href="#Lab-6-Shell" class="headerlink" title="Lab 6 Shell"></a>Lab 6 Shell</h2><p>Shell 没有什么好说的，都是用户态内容，基本不需要移植，copy 一遍就可以啦。</p><h2 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h2><h3 id="spawnl"><a href="#spawnl" class="headerlink" title="spawnl"></a><code>spawnl</code></h3><p>在 mips 中，mos 使用了 mips 的参数传递规范来优化 <code>spawnl</code> 的实现，这在 riscv 中不可行，如果在 riscv 中单开数组保证参数连续又显得很浪费，因此我采用以下汇编代码直接实现 <code>spawnl</code>：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">// int spawnl(char *prog, char *args, ...)EXPORT(spawnl)// Assuming all the arguments are char *addi sp, sp, -32sw ra, 0(sp)sw a7, 28(sp)sw a6, 24(sp)sw a5, 20(sp)sw a4, 16(sp)sw a3, 12(sp)sw a2, 8(sp)sw a1, 4(sp)addi a1, sp, 4call spawnlw ra, 0(sp)addi sp, sp, 32ret // directly ret spawn(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PTE-DIRTY"><a href="#PTE-DIRTY" class="headerlink" title="PTE_DIRTY"></a><code>PTE_DIRTY</code></h3><p>在 mips 中，页表没有 dirty 相关权限位，因此文件系统使用了自定义的权限位+手动 dirty 的方式实现按需写回。遗憾的是，这样做存在很多 bug，最经典的问题就是文件控制块没有 dirty，不一定会写回，且没有递归写回，且写回后也没有清楚 dirty 位，会造成多余的写回。</p><p>好消息是，在 riscv 中，我们有 mmu 实现的 dirty 位，可以完美解决上面的问题。因此我去除了 <code>PTE_DIRTY</code>，使用了原生的 <code>PTE_D</code> 并且改进了上述 bug，这样文件系统便拥有了更优雅的实现和更快的速度。</p><h3 id="其它优化？"><a href="#其它优化？" class="headerlink" title="其它优化？"></a>其它优化？</h3><p>还有很多其它可做优化。譬如 virtio 支持 IO 操作和 CPU 运行的并发，并且可以一次发送更长或者更多的 IO 请求，因此文件系统可以在这方面进行优化。当然这个优化幅度似乎不会很高，碍于时间原因我没有做这个优化。</p><p>另外 <code>sfence.vma</code> 并不是任何时候都需要使用，或者说，<code>sfence.vma</code> 可以支持只刷新部分快表，具体应当参考：<img src="https://s2.loli.net/2023/04/26/o84iejf1gAWLVky.png" alt="`sfence.vma`"> 我完成了这个优化，并且至少在目前的测试和使用中没有发现 bug。不过我承认自己对底层的认识还是有很多不足的，不知道会不会在某天出现问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>衷心感谢以下文章对我的帮助：</p><ol><li><a href="https://blog.csdn.net/zoomdy/article/details/83620254">RISC-V嵌入式开发入门篇1：RISC-V GCC工具链的介绍_半斗米的博客-CSDN博客</a></li><li><a href="https://lab.cs.tsinghua.edu.cn/cod-lab-docs/labs/4-riscv-inst/">RISC-V 指令概况 - 计算机组成原理（2021年）</a></li><li><a href="https://zhuanlan.zhihu.com/p/456604601">Lab 1: RV64 内核引导 - 知乎</a></li><li><a href="https://github.com/riscv-non-isa/riscv-sbi-doc/blob/master/riscv-sbi.adoc">riscv-sbi-doc/riscv-sbi.adoc at master · riscv-non-isa/riscv-sbi-doc · GitHub</a></li><li><a href="https://onlinedocs.microchip.com/pr/GUID-0E320577-28E6-4365-9BB8-9E1416A0A6E4-en-US-6/index.html?GUID-4BB190D9-B9F0-4605-8E3C-E8278ADC5D2E">PolarFire® SoC MSS Technical Reference Manual</a></li><li><a href="https://zju-sec.github.io/os22fall-stu/">浙江大学22年秋操作系统实验</a></li><li><a href="https://blog.csdn.net/dai_xiangjun/article/details/124117795">10.4 自制操作系统: risc-v 虚拟内存系统_sv39_richard.dai的博客-CSDN博客</a></li><li><a href="https://github.com/ZJU-SEC/os22fall-stu">GitHub - ZJU-SEC/os22fall-stu: https://zju-sec.github.io/os22fall-stu/</a></li><li><a href="https://wiki.riscv.org/display/HOME/RISC-V+Technical+Specifications">RISC-V Technical Specifications - Home - RISC-V International</a></li><li><a href="https://cloud.tencent.com/developer/ask/sof/101979738">如何在gdb中加载多个符号文件 - 问答 - 腾讯云开发者社区-腾讯云</a></li><li><a href="https://github.com/QAQdev/onekos/tree/master">GitHub - QAQdev/onekos: A mini kernel of 2022 ZJU OS</a></li><li><a href="https://zhuanlan.zhihu.com/p/144349599?utm_id=0">0020 virtio-blk简易驱动 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/389525645">通过MMIO的方式实现VIRTIO-BLK设备 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/390606568?utm_id=0">通过MMIO的方式实现VIRTIO-BLK设备（二） - 知乎</a></li><li><a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/virtio_disk.c">xv6-riscv/virtio_disk.c at riscv · mit-pdos/xv6-riscv · GitHub</a></li><li><a href="http://docs.oasis-open.org/virtio/virtio/v1.0/cs04/virtio-v1.0-cs04.pdf">docs.oasis-open.org/virtio/virtio/v1.0/cs04/virtio-v1.0-cs04.pdf</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="操作系统" scheme="https://toby-shi-cloud.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="OS" scheme="https://toby-shi-cloud.github.io/tags/OS/"/>
    
    <category term="RISC-V" scheme="https://toby-shi-cloud.github.io/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成 P5 设计文档 （Verilog 流水线 CPU 1）</title>
    <link href="https://toby-shi-cloud.github.io/posts/co-p5.html"/>
    <id>https://toby-shi-cloud.github.io/posts/co-p5.html</id>
    <published>2023-04-30T16:00:00.000Z</published>
    <updated>2023-11-07T13:44:32.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="设计文档综述"><a href="#设计文档综述" class="headerlink" title="设计文档综述"></a>设计文档综述</h2><h3 id="数据通路设计"><a href="#数据通路设计" class="headerlink" title="数据通路设计"></a>数据通路设计</h3><p>数据通路和实验指导书相仿。<br>顶层模块主要包含 $5$ 级流水线模块和额外的一个转发控制器。</p><p>如下图所示：<br><img src="https://s2.loli.net/2022/11/14/JtQiH6rMPwvsC1N.jpg"></p><h3 id="模块文件结构"><a href="#模块文件结构" class="headerlink" title="模块文件结构"></a>模块文件结构</h3><p>大致结构是3层，第一层是顶层模块，用于桥接各级流水线；第二层是各级流水线，以及独立于流水线的转发控制模块；第三层是各个零碎的部件。各级流水线寄存器都位于同名流水线内部。如 D 级流水线寄存器在 Decode 模块内。</p><p><img src="https://s2.loli.net/2022/11/14/QlJWOPhVXq4BYKT.jpg" alt="文件总览"></p><h2 id="第二层模块概述"><a href="#第二层模块概述" class="headerlink" title="第二层模块概述"></a>第二层模块概述</h2><h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a><code>Fetch</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Fetch</span><span class="token punctuation">(</span>    <span class="token keyword">input</span>         clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>         reset<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> F_npc<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> F_pcen<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> D_instr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> D_pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口定义如下：<br><img src="https://s2.loli.net/2022/11/14/DF5Q7WgOZLomexU.png"></p><p>包含的子模块：</p><ol><li>IM</li></ol><h3 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a><code>Decode</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Decode</span><span class="token punctuation">(</span>    <span class="token comment">// global</span>    <span class="token keyword">input</span>          clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>          reset<span class="token punctuation">,</span>    <span class="token comment">// exchange with Fetch</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> F_npc<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> F_pcen<span class="token punctuation">,</span>    <span class="token comment">// get register in</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> D_instr_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> D_pc_in<span class="token punctuation">,</span>    <span class="token comment">// exchange with Writeback</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> writeback_grf_wd<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> writeback_grf_wa<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> writeback_grf_pc<span class="token punctuation">,</span>    <span class="token comment">// exchange with forward controller</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_a1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_a2<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_d1<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_d2<span class="token punctuation">,</span>    <span class="token keyword">input</span>          fw_need_sel1<span class="token punctuation">,</span>    <span class="token keyword">input</span>          fw_need_sel2<span class="token punctuation">,</span>    <span class="token comment">// to next level's register</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_a<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_d<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_pc<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_alu_1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_alu_2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_format<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_opcode<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_funct<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_reg_wa<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_shamt<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_memdata<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口定义如下：<br><img src="https://s2.loli.net/2022/11/14/AUF5PyblGvuK7Xo.png"></p><p>包含的子模块：</p><ol><li>D_Controller</li><li>Decoder</li><li>GRF</li><li>MUX_2 (3)</li><li>RegisterFrozen (2)</li></ol><h3 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a><code>Execute</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Execute</span><span class="token punctuation">(</span>    <span class="token comment">// global</span>    <span class="token keyword">input</span>          clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>          reset<span class="token punctuation">,</span>    <span class="token comment">// get register in</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_a_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_d_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_pc_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_alu_1_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_alu_2_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_format_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_opcode_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_funct_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_reg_wa_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_mips_shamt_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_memdata_in<span class="token punctuation">,</span>    <span class="token comment">// exchange with forward controller</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_d1<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_d2<span class="token punctuation">,</span>    <span class="token keyword">input</span>          fw_need_sel1<span class="token punctuation">,</span>    <span class="token keyword">input</span>          fw_need_sel2<span class="token punctuation">,</span>    <span class="token comment">// notice forward controller</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_a_out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_d_out<span class="token punctuation">,</span>    <span class="token comment">// to next level's register</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_a<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_d<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_format<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_opcode<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_funct<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_reg_wa<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_pc<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_alu_out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_memdata<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口定义如下：<br><img src="https://s2.loli.net/2022/11/14/Uovk6z8P4MNpE5R.png"></p><p>包含的子模块：</p><ol><li>ALU</li><li>E_Controller</li><li>MUX_2 (5)</li><li>Register (11)</li></ol><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a><code>Memory</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Memory</span><span class="token punctuation">(</span>    <span class="token comment">// global</span>    <span class="token keyword">input</span>          clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>          reset<span class="token punctuation">,</span>    <span class="token comment">// get register in</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_a_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_d_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_format_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_opcode_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_funct_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_mips_reg_wa_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_pc_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_alu_out_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_memdata_in<span class="token punctuation">,</span>    <span class="token comment">// exchange with forward controller</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> fw_need_d<span class="token punctuation">,</span>    <span class="token keyword">input</span>          fw_need_sel<span class="token punctuation">,</span>    <span class="token comment">// notice forward controller</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_a_out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_d_out<span class="token punctuation">,</span>    <span class="token comment">// to next level's register</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_a<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_d<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口定义如下：<br><img src="https://s2.loli.net/2022/11/14/8qB3hmDp2WtGvMk.png"></p><p>包含的子模块：</p><ol><li>DM</li><li>MUX_2 (3)</li><li>M_Controller</li><li>Register (9)</li></ol><h3 id="Writeback"><a href="#Writeback" class="headerlink" title="Writeback"></a><code>Writeback</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">Writeback</span><span class="token punctuation">(</span>    <span class="token comment">// global</span>    <span class="token keyword">input</span>          clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>          reset<span class="token punctuation">,</span>    <span class="token comment">// get register in</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_a_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_d_in<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_pc_in<span class="token punctuation">,</span>    <span class="token comment">// notice forward controller</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_a_out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_d_out<span class="token punctuation">,</span>    <span class="token comment">// exchange with Register Files</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> writeback_grf_wa<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> writeback_grf_wd<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> writeback_grf_pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口定义如下：<br><img src="https://s2.loli.net/2022/11/14/Wm9iql1QfUcM4O3.png"></p><p>包含的子模块：</p><ol><li>Register (3)</li></ol><h3 id="ForWardController"><a href="#ForWardController" class="headerlink" title="ForWardController"></a><code>ForWardController</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">ForwardController</span><span class="token punctuation">(</span>    <span class="token keyword">input</span>         clk<span class="token punctuation">,</span>    <span class="token keyword">input</span>         reset<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> D_fw_need_a1<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> D_fw_need_a2<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_a<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> E_fw_write_d<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_a<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> M_fw_write_d<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_a<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> W_fw_write_d<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span>    D_fw_need_sel1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> D_fw_need_d1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span>    D_fw_need_sel2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> D_fw_need_d2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span>    E_fw_need_sel1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> E_fw_need_d1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span>    E_fw_need_sel2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> E_fw_need_d2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span>    M_fw_need_sel<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> M_fw_need_d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>端口定义如下：<br><img src="https://s2.loli.net/2022/11/14/awBPCFLg4GWxyrZ.png"></p><p>包含的子模块：</p><ol><li>Register (3)</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li><p>我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。</p><blockquote><p>当分支判断需要使用的值还未算出时，分支指令会被直接阻塞在 D 级，<br>这可能导致分支指令被阻塞多个周期。然而其实此时让分支指令流水一个周期，<br>使得延迟槽内的指令能够进行译码，这将能达到更快的速度。</p><p>例如：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">lw $ra 0($0)jr $ralui $s0 0xffff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计？</p><blockquote><p>因为 <code>jal</code> 的延迟槽内的指令已经紧跟着 <code>jal</code> 指令运行了，<br>而不需要在返回的时候再次运行。</p></blockquote></li><li><p>我们要求所有转发数据都来源于流水寄存器而不能是功能部件（如 DM、ALU），请思考为什么？</p><blockquote><p>直接转发自功能部件会导致数据通路变长，因此运行效率降低。另外也可能产生毛刺效应。</p></blockquote></li><li><p>我们为什么要使用 GPR 内部转发？该如何实现？</p><blockquote><p>实现内部转发可以减少一级流水线寄存器带来的消耗。<br>实现方案是，如果检测到寄存器写地址和读地址相同且非0，<br>就可以直接把读取值改为将要写入的值</p></blockquote></li><li><p>我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？</p><blockquote><p>有以下转发通路：</p><ul><li>$E \rightarrow D$</li><li>$M \rightarrow D$</li><li>$M \rightarrow E$</li><li>$W \rightarrow E$</li><li>$W \rightarrow M$</li></ul></blockquote></li><li><p>在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。</p><blockquote><p>目前来说，我需要更改以下模块：</p><ol><li>集中式译码器，添加新指令的译码规则；</li><li>AT 模块，评估转发或阻塞；</li><li>根据不同的指令修改它要执行的流水线级控制器<blockquote><p>对于跳转指令，修改 D 级<br>对于计算指令，修改 E 级<br>对于储存指令，修改 M 级</p></blockquote></li></ol></blockquote></li><li><p>简要描述你的译码器架构，并思考该架构的优势以及不足。</p><blockquote><p>我采用了集中式译码器。优势是，只在 D 级译码，<br>其他流水级都不需要知道整个指令的机器码，<br>只要知道指令是什么，要用的值和要写的地址就可以了。<br>缺点是，每级流水线寄存器需要存储的值的个数增加。</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented 2023 第二单元总结</title>
    <link href="https://toby-shi-cloud.github.io/posts/oounit2.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oounit2.html</id>
    <published>2023-04-15T11:00:00.000Z</published>
    <updated>2023-11-06T06:49:42.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个单元任务量很大，Bug 也很多，让人心累。不过呢确实学到了很多东西，从 Java 多线程，到 C++ 虚类，继承，多态，再到 Html，python flask，都可以有涉及。</p><h2 id="本单元任务简介"><a href="#本单元任务简介" class="headerlink" title="本单元任务简介"></a>本单元任务简介</h2><p>第一次作业：本次作业的基本目标是模拟<strong>多线程实时电梯系统</strong>，熟悉线程的创建、运行等基本操作，熟悉多线程程序的设计方法。</p><p>第二次作业：在第一次作业的基础上，掌握线程安全知识并解决线程安全问题，同时在架构上围绕线程之间的协同设计层次架构。</p><p>第三次作业：在前两次作业的基础上，掌握线程之间的交互，强化线程之间的协同设计层次架构。</p><h2 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h2><p><code>Sequence Diagrams</code> 时序图：</p><p><a href="https://mermaid.live/edit#pako:eNqdWNuO4jgQ_ZUoo5F6JBrlfuFhHqC7VyP17GVAO9KKFydxwGrHZh1nptlW__vaCZDYucCukRCOz6kqH5fLJm9mSjNoLswS_l1BksIHBHYMFFtiiIYpPRhfASLGs_jVPJPtCzlUfLNnEGT3nz__gmkC8B8VrODC-L0q98Y3aazkLWF9LDksVpRwRjGGrMdC6YtgqaTa-4oWwhc0AMmMB1QeAE_3LWTQtjCuP1tc7Hyj4vuKgf6U2jkZSyBC_b6HxFhW5fGqpUcMfwBO2clWfwqQZG3njJ4ycdJKU3iA2aHqSmAopdBtdJd1hCyTgcuE-EI4ZKw68CvBjyZHI-TdxSBlxoYBUuaQfWpsXpSZSLe1ABkrTEtorNGOANwwOpj7voLfAeJGLhw-Fgd-7PsYTKART9eX_FbiiOID9KGIh6gbyApEgMx3c2YWogdQJvb6mzSwNfkeFnBrLsTPDOagwnxrzjpDfwKGQIJhKTFvjdOtmYhl2zFaicWpqT_3SDhoiHL8wFAB2HFFMWUN4sPj6nH19NTBlDClJNNQuWhZ15JIMI5U0L7Ed5E1M2zL-jgz4mDuhJ5vxZHlxh8_9YNYUpZBpvEdTxgIJD8a5V8CHLQQXAy4c9-JPdsOAy9UDJxjH-RH1wM4TWADX3lXI9u1XcsaClRHWqI59kBEGpDtkrt47lunZgtVR3vdADEisOvPrZviTw1IHRWZSJYvu-kEaQG93EhqXe3TcOyG1sOyN-ychoFoinfAGP25Fxtncga52EpPoED42CC2WzErBpMq3UNuFKXsz4wfkGWAgJkhdwvW6Gv0z2mH2cHhtSsfSCBealvpA4zkpwMj4nCekKkerqc6JkSKK1Fm2ISSZ0TXTE-wU314RuRletERx3B81WG2g8-3zRykoph1g6q3rh_PAyewg8hxPHdmiG4YBr4buLYTyf0UzmPLjgMrjDxX2U-NuXEl63FtayRYRKljntW83zF47OZtXaHHBWjGN5Nbo0kN-iqinSyiF9xgkfvfStVmryghb2ZXIIRy2Iusn1g1TJ2oSFAfZBrm-tIgcfwhSvo-gyAYRmpuPflRalBzI_61KhLFon7iiWLVtyfqKrizLUeeVeLL8f2ZYc29WElKzNdD3CsOnFYoTzkMOChf-vP3XS9PUh2mTj4CsZVlGkZq_ox2ez4R2hl3A-QBsJeJJTzDfqt4iTJ4A3KFxU1YXlDUc8-1A1dfcLi5TZoOWBUoydMwzzvIHUPd0wNLnbRikFEyYGoSqUeo4VKGeH8WeR6JpsPUbITK4tIMHLVCpiLqIjCxBOLqX5dTRUzfEU0H6bWuh0oxKEuJGrvi5AjjzfEArbFCeAbYY0fcGeC09dG1vOu3yDPPbXm20_JGL39nntfhhcHt_vyWd_8f3AWdG-btzsJOkFE06k3S3rfkXfyRABWn6yNJzQVnFZyZ1SET_zFOLw7MRQ5weXn6mCFxaF4eHgD5i9IWBOvhr80riPpNxPu_XNQFBA"><img src="https://mermaid.ink/img/pako:eNqdWNuO4jgQ_ZUoo5F6JBrlfuFhHqC7VyP17GVAO9KKFydxwGrHZh1nptlW__vaCZDYucCukRCOz6kqH5fLJm9mSjNoLswS_l1BksIHBHYMFFtiiIYpPRhfASLGs_jVPJPtCzlUfLNnEGT3nz__gmkC8B8VrODC-L0q98Y3aazkLWF9LDksVpRwRjGGrMdC6YtgqaTa-4oWwhc0AMmMB1QeAE_3LWTQtjCuP1tc7Hyj4vuKgf6U2jkZSyBC_b6HxFhW5fGqpUcMfwBO2clWfwqQZG3njJ4ycdJKU3iA2aHqSmAopdBtdJd1hCyTgcuE-EI4ZKw68CvBjyZHI-TdxSBlxoYBUuaQfWpsXpSZSLe1ABkrTEtorNGOANwwOpj7voLfAeJGLhw-Fgd-7PsYTKART9eX_FbiiOID9KGIh6gbyApEgMx3c2YWogdQJvb6mzSwNfkeFnBrLsTPDOagwnxrzjpDfwKGQIJhKTFvjdOtmYhl2zFaicWpqT_3SDhoiHL8wFAB2HFFMWUN4sPj6nH19NTBlDClJNNQuWhZ15JIMI5U0L7Ed5E1M2zL-jgz4mDuhJ5vxZHlxh8_9YNYUpZBpvEdTxgIJD8a5V8CHLQQXAy4c9-JPdsOAy9UDJxjH-RH1wM4TWADX3lXI9u1XcsaClRHWqI59kBEGpDtkrt47lunZgtVR3vdADEisOvPrZviTw1IHRWZSJYvu-kEaQG93EhqXe3TcOyG1sOyN-ychoFoinfAGP25Fxtncga52EpPoED42CC2WzErBpMq3UNuFKXsz4wfkGWAgJkhdwvW6Gv0z2mH2cHhtSsfSCBealvpA4zkpwMj4nCekKkerqc6JkSKK1Fm2ISSZ0TXTE-wU314RuRletERx3B81WG2g8-3zRykoph1g6q3rh_PAyewg8hxPHdmiG4YBr4buLYTyf0UzmPLjgMrjDxX2U-NuXEl63FtayRYRKljntW83zF47OZtXaHHBWjGN5Nbo0kN-iqinSyiF9xgkfvfStVmryghb2ZXIIRy2Iusn1g1TJ2oSFAfZBrm-tIgcfwhSvo-gyAYRmpuPflRalBzI_61KhLFon7iiWLVtyfqKrizLUeeVeLL8f2ZYc29WElKzNdD3CsOnFYoTzkMOChf-vP3XS9PUh2mTj4CsZVlGkZq_ox2ez4R2hl3A-QBsJeJJTzDfqt4iTJ4A3KFxU1YXlDUc8-1A1dfcLi5TZoOWBUoydMwzzvIHUPd0wNLnbRikFEyYGoSqUeo4VKGeH8WeR6JpsPUbITK4tIMHLVCpiLqIjCxBOLqX5dTRUzfEU0H6bWuh0oxKEuJGrvi5AjjzfEArbFCeAbYY0fcGeC09dG1vOu3yDPPbXm20_JGL39nntfhhcHt_vyWd_8f3AWdG-btzsJOkFE06k3S3rfkXfyRABWn6yNJzQVnFZyZ1SET_zFOLw7MRQ5weXn6mCFxaF4eHgD5i9IWBOvhr80riPpNxPu_XNQFBA?type=jpg"></a></p><h2 id="寻路算法分析"><a href="#寻路算法分析" class="headerlink" title="寻路算法分析"></a>寻路算法分析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Route</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token class-name">Passenger</span> p<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> accessList<span class="token punctuation">,</span> <span class="token keyword">int</span> startAccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">isArrived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// already arrived</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canAccess</span><span class="token punctuation">(</span>startAccess<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cannot access</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VisitedFloor</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canAccess</span><span class="token punctuation">(</span>startAccess<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// directly</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">VisitedFloor</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisitedFloor</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>first<span class="token punctuation">.</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canAccess</span><span class="token punctuation">(</span>startAccess<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>o <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VisitedFloor</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">VisitedFloor</span> cur <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canAccess</span><span class="token punctuation">(</span>accessList<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>cur<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Passenger</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>first<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span>                             cur<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>via<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">.</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canAccess</span><span class="token punctuation">(</span>accessList<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>cur<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                deque<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VisitedFloor</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cannot access</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对每个请求，对每个电梯作为起始电梯进行广搜，返回乘坐该电梯需要的最小换乘次数以及到达所需楼层所要经过的楼层。</p><p>在 <code>SystemController</code> 中，按照一定的权重给每个电梯一个代价估值，然后选乘代价最小的电梯。为避免一个乘客在一个电梯中来回上下，我为乘客添加了曾经乘坐过的电梯队列，将乘坐过的电梯按照时间顺序依次抬高代价。</p><p>为避免静态分配导致后续加入的电梯没有任何工作可做，当电梯队列人数较多时，决定让新加入的乘客等待，延迟加入队列：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ElevatorQueue<span class="token punctuation">.</span>WaitException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">Global</span><span class="token punctuation">.</span>globalQueue<span class="token punctuation">.</span><span class="token function">pushFront</span><span class="token punctuation">(</span>passenger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过这也是强测挂掉的原因。虽然有些奇怪，因为乘客数最多不会超过 100 人，所以依照此法开的线程数并不会太多。可能是强测波动原因导致新建线程被阻止而造成了乘客丢失，最后 RTLE。</p><h2 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h2><p>第一次作业因为二分查找写错了导致电梯请求队列变得无序，进而电梯接人策略出现严重问题，浪费大量时间，导致 RTLE。</p><p>第二次作业没有新的 Bug。</p><p>第三次作业因为开的线程过多被评测机禁止而导致乘客丢失，最后因为检测到请求未完成而一直等待已经丢失的东西而 RTLE。</p><p>互测刀中深搜写的复杂度过高而 CTLE 的。以及随缘写了一些代码而出现大面积漏洞 WA 的。</p><h2 id="评测机"><a href="#评测机" class="headerlink" title="评测机"></a>评测机</h2><p>我搭建了一个线上的网页 “评测机”。准确来说，它并不是评测机，因为它只要求使用者上传对应输出，而无需上传源代码进行评测。</p><p>评测机网页前端搭建在 GitHub 我的博客上，当然这是因为可以借用我的博客的风格，不至于太简陋，另外也是免费的。</p><p>评测机评测后端位于 Mac Mini 上，使用 cpolar 进行了内网穿透。与前端通信使用的 Python + Flask，而评测使用的是 cpp 写的 checker。</p><p>评测机数据库位于 Leancloud，免费，而且有完备的 Python API，虽然有 API 调用次数限制，但是这样的小网站，想必是不可能超过限制的。</p><p>心得：学到很多东西，另外看到很多人使用也很有成绩感。当你不那么注重卷绩点或者分数的时候，多做做额外的工作，真的会很有收获。反对内卷，从我做起。</p><h3 id="访问量"><a href="#访问量" class="headerlink" title="访问量"></a>访问量</h3><blockquote><p>以下是单纯的成就感时间：</p></blockquote><p>Lean Cloud API 访问次数统计：<img src="https://s2.loli.net/2023/04/15/i6zutDYdFhLGHEn.png" alt="Lean Cloud API 访问次数统计"></p><p>博客访问次数统计：<img src="https://s2.loli.net/2023/04/15/nCEPsd1ke5XSMgO.png" alt="Google Analytics"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Run MOS on RISC-V （移植过程）</title>
    <link href="https://toby-shi-cloud.github.io/posts/run-mos-on-riscv.html"/>
    <id>https://toby-shi-cloud.github.io/posts/run-mos-on-riscv.html</id>
    <published>2023-04-14T03:00:00.000Z</published>
    <updated>2023-06-02T08:34:56.522Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://s2.loli.net/2023/06/02/SEdb76wuVfQCLU8.png"></p><h2 id="阅前须知-x2F-免责声明"><a href="#阅前须知-x2F-免责声明" class="headerlink" title="阅前须知/免责声明"></a>阅前须知/免责声明</h2><p>本文用于记录 OS 挑战任务——将 MOS 操作系统移植到 RISC-V 架构。<br>本文仅供学习交流使用，不得用于商业用途。本文中的所有内容均为原创，如需转载请联系本人。</p><p>本文不是移植报告或指导书，仅是移植过程的记录，每个 Lab 的内容都是我自己参考众多资料后摸索出来的，可能有错误，不保证正确性或最优解。<br>并且本文中的内容可能不是最新的，因为我在移植过程中也在不断地学习和尝试，所以可能会有一些错误或不完善的地方，欢迎指正。<br>本文中提到的实现不代表我最终的实现，特别是前几个 Lab，很可能在之后的 Lab 中被修改或替换。</p><p>最终移植后的源代码将在挑战性任务答辩结束后开源，敬请期待。</p><h2 id="Lab-0-环境配置"><a href="#Lab-0-环境配置" class="headerlink" title="Lab 0 环境配置"></a>Lab 0 环境配置</h2><p>按照实验教程所述，本实验推荐使用常见 Linux 发行版作为开发环境，虽然 Mac 可能也可以，但是在本地安装那么庞大的环境，特别是还有可能出错，实在是不太推荐。如果有想尝试本地安装的，建议 Windows 用户使用 WSL2，Mac 用户使用 Docker。这里我选择了 Github Codespaces，学生一个月免费 180 CPUhours，足够使用了（后来发现可能不太够用，所以还是很推荐 Docker）。</p><h3 id="交叉编译器"><a href="#交叉编译器" class="headerlink" title="交叉编译器"></a>交叉编译器</h3><ol><li>首先使用 <code>sudo su</code> 提权到 root 用户，这里可能要求输入密码；</li><li>执行 <code>apt update</code> 更新索引；</li><li>执行 <code>apt install gcc-riscv64-unknown-elf</code> 安装实验所需要的交叉编译器。</li></ol><h3 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h3><ol><li>执行 <code>git clone https://github.com/qemu/qemu.git --recursive</code> 从 Github 克隆 QEMU 源代码；</li><li>执行 <code>cd qemu</code> 切换到克隆好的仓库下；</li><li>执行 <code>mkdir build</code> 随后 <code>cd build</code> 新建一个 <code>build</code> 目录并切换过去；</li><li>尝试执行 <code>../configure --target-list=riscv32-softmmu</code> ，此时可能因为没有相关依赖而失败，按要求尝试安装所需依赖。实测只需要下面两种：<ol><li><code>ninja</code>: 使用 <code>apt install ninja-build</code> 安装；</li><li><code>pixman-1</code>: 使用 <code>apt install libpixman-1-dev</code> 安装。</li></ol></li><li>执行 <code>make</code> 编译（执行 <code>make install</code> 可以直接把 <code>qemu-system-riscv32</code> 装在 <code>/usr/local/bin</code> 下，可以直接使用）</li></ol><p>一点 Tips：</p><p>如果遇到一些不知如何安装的依赖项，推荐 <a href="https://command-not-found.com/">command-not-found.com</a> 和 <a href="https://google.com/">Google</a> 进行搜索。</p><p>另外如果克隆源代码时不使用 <code>--recursive</code> 则会发现 QEMU 的子模块全为空，则可以执行 <code>git submodule update --init --recursive</code> 进行递归克隆。</p><p>编译 QEMU 可能会消耗一定量的时间，请提前有个心理准备。</p><h3 id="OpenSBI"><a href="#OpenSBI" class="headerlink" title="OpenSBI"></a>OpenSBI</h3><p>如果需要，先 <code>git clone https://github.com/riscv-software-src/opensbi.git</code>，然后直接安装指导书进行编译即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>riscv64-unknown-elf-$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">PLATFORM_RISCV_XLEN</span><span class="token operator">=</span><span class="token number">32</span>$ <span class="token function">make</span> <span class="token assign-left variable">PLATFORM</span><span class="token operator">=</span>generic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Lab-1-内核启动与-printk-的实现"><a href="#Lab-1-内核启动与-printk-的实现" class="headerlink" title="Lab 1 内核启动与 printk 的实现"></a>Lab 1 内核启动与 <code>printk</code> 的实现</h2><p>我深深感受到了这个移植任务的繁重。。。</p><p>但在终于能跑出正确结果的那一刻，喜悦难以言表。</p><p><img src="https://s2.loli.net/2023/04/15/i3Avly9bOx5SCjP.png"></p><h3 id="通过编译"><a href="#通过编译" class="headerlink" title="通过编译"></a>通过编译</h3><p>大致工作表单：</p><table><thead><tr><th>name</th><th>file</th></tr></thead><tbody><tr><td>compiler, flags</td><td><code>include.mk</code></td></tr><tr><td>disable interrupts</td><td><code>start.S</code></td></tr><tr><td>declarations</td><td><code>include/asm/asm.h</code></td></tr><tr><td>registers</td><td><code>include/asm/regdef.h</code></td></tr><tr><td>lds</td><td><code>kernel.lds</code></td></tr><tr><td>temporarily delete asm</td><td><code>kern/panic.c</code></td></tr></tbody></table><ol><li>更改交叉编译器，并删掉不支持的编译选项，然后编译选项添加 <code>-march=rv32gc</code> 和 <code>-mabi=ilp32</code>，链接选项添加 <code>-melf32lriscv</code>（参考资料 1）；</li><li>删掉不支持的伪指令，并更改关闭中断的汇编指令（参考资料 2, 5）；</li><li>删掉不支持的伪指令；</li><li>更改寄存器名字和序号对应表；</li><li>链接脚本可以参考实验指导书；</li><li>暂时注释掉用到的汇编指令。</li></ol><p>完成上述操作，你应该能成功通过编译。</p><p>在这一步中，你可能遇到 <code>#include_next</code> 的相关错误 <code>-ffreestanding</code> 可能对你有所帮助。</p><blockquote><p><code>-ffreestanding</code>: <code>Do not assume that standard C libraries and "main" exist.</code></p></blockquote><h3 id="启动内核"><a href="#启动内核" class="headerlink" title="启动内核"></a>启动内核</h3><p>如果直接运行上面 <code>make</code> 出来的内核会有一个非常严重的问题。我们注意到 <code>OpenSBI</code> 引导后，默认会跳转到 <code>0x80200000</code>，但是通过 <code>objdump</code> 得知，我们编译出的 <code>mos</code> 在 <code>0x80200000</code> 位置处是 <code>lib/elfloader.c</code> 中的 <code>elf_from</code>，这显然不是我们想要的。这里我经过了 n 次尝试，最终妥协了，找到的方案是让链接器最先链接 <code>start.o</code> 就可以让 <code>_start</code> 位于 <code>0x80200000</code> 位置了。</p><blockquote><p>Note: 受到浙大 OS 实验教程启发，我们有更好的方案让 <code>_start</code> 位于 <code>0x80200000</code> 的位置。（参考资料 6）</p></blockquote><p>这样我们总算是可以成功启动内核了。</p><h3 id="printk"><a href="#printk" class="headerlink" title="printk"></a>printk</h3><p>在这一步中我们需要修改 <code>console.c</code> 使得它能调用 <code>OpenSBI</code> 提供的接口进行输入输出和退出系统。</p><p>由于我们的操作系统位于 <code>Supervisor</code> 一级，但是只有 <code>Machine</code> 级才能直接向物理地址写入字符实现输入输出，所以我们需要调用位于 <code>Machine</code> 级的 <code>OpenSBI</code> 提供给我们的接口（参考资料 3, 4）。</p><p>这里我们可以创建一个头文件用于储存所有 <code>OpenSBI</code> 的 <code>ecall</code> 调用（并不是都一定要实现，用不到的可以暂时不实现）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SBI_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SBI_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_SUCCESS</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_FAILED</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_NOT_SUPPORTED</span> <span class="token expression"><span class="token operator">-</span><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_INVALID_PARAM</span> <span class="token expression"><span class="token operator">-</span><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_DENIED</span> <span class="token expression"><span class="token operator">-</span><span class="token number">4</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_INVALID_ADDRESS</span> <span class="token expression"><span class="token operator">-</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_ALREADY_AVAILABLE</span> <span class="token expression"><span class="token operator">-</span><span class="token number">6</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_ALREADY_STARTED</span> <span class="token expression"><span class="token operator">-</span><span class="token number">7</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SBI_ERR_ALREADY_STOPPED</span> <span class="token expression"><span class="token operator">-</span><span class="token number">8</span></span></span><span class="token keyword">long</span> <span class="token function">sbi_set_timer</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> stime_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_console_putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_console_getchar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_clear_ipi</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_send_ipi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>hart_mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_remote_fence_i</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>hart_mask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_remote_sfence_vma</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>hart_mask<span class="token punctuation">,</span>                           <span class="token keyword">unsigned</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span>                           <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">sbi_remote_sfence_vma_asid</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>hart_mask<span class="token punctuation">,</span>                                <span class="token keyword">unsigned</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span>                                <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span>                                <span class="token keyword">unsigned</span> <span class="token keyword">long</span> asid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sbi_shutdown</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后建议实现函数 <code>sbi_ecall</code> 专门用于写 <code>ecall</code> 的汇编，让其它函数调用即可。</p><blockquote><p>根据浙大 OS 实验的建议，这里建议实现 <code>ecall</code> 的函数定义为</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sbiret</span> <span class="token punctuation">{</span><span class="token keyword">long</span> error<span class="token punctuation">;</span><span class="token keyword">long</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">sbiret</span><span class="token function">sbi_ecall</span><span class="token punctuation">(</span><span class="token keyword">int</span> ext<span class="token punctuation">,</span> <span class="token keyword">int</span> fid<span class="token punctuation">,</span> u_int arg0<span class="token punctuation">,</span> u_int arg1<span class="token punctuation">,</span>  u_int arg2<span class="token punctuation">,</span> u_int arg3<span class="token punctuation">,</span> u_int arg4<span class="token punctuation">,</span> u_int arg5<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一种可能的实现如下（内嵌汇编）（代码片段）</p></blockquote><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mv a0, %[arg0]mv a1, %[arg1]mv a2, %[arg2]mv a3, %[arg3]mv a4, %[arg4]mv a5, %[arg5]mv a6, %[fid]mv a7, %[ext]ecallmv %[err], a0mv %[val], a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后 <code>console.c</code> 只需要调用 <code>sbi_console_putchar</code>, <code>sbi_console_getchar</code>, <code>sbi_shutdown</code> 即可。</p><p>完成这一步后你就可以运行 <code>lab1</code> 的测试用例了。</p><blockquote><p>Note: 需要修改 <code>Makefile</code> 才能一键运行和测试</p></blockquote><h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><p>还记得我们为了通过编译把 <code>panic.c</code> 中的汇编直接注释掉了吗，接下来我们希望能够补全他们。</p><p>使用 <code>csrr</code> 指令来获取 <code>CSR</code> 寄存器的值吧！</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><blockquote><p>关于在 <code>vscode</code> 中更好的调试：<br>可以配置 <code>launch.json</code>: </p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"mos-kernel-debug"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span><span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span><span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/riscv64-unknown-elf-gdb"</span><span class="token punctuation">,</span><span class="token property">"miDebuggerServerAddress"</span><span class="token operator">:</span> <span class="token string">":1234"</span><span class="token punctuation">,</span><span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/target/mos"</span><span class="token punctuation">,</span><span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span><span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"logging"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"engineLogging"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>随后，先运行 <code>make dbg</code> （<code>Makefile</code> 也要记得配置哦～），然后按下 <code>F5</code> 进行调试</p><p>Tips: 如果想要给 <code>.S</code> 文件添加断点，可以在调试栏中手动输入标签名或机器地址</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/zoomdy/article/details/83620254">RISC-V嵌入式开发入门篇1：RISC-V GCC工具链的介绍_半斗米的博客-CSDN博客</a></li><li><a href="https://lab.cs.tsinghua.edu.cn/cod-lab-docs/labs/4-riscv-inst/">RISC-V 指令概况 - 计算机组成原理（2021年）</a></li><li><a href="https://zhuanlan.zhihu.com/p/456604601">Lab 1: RV64 内核引导 - 知乎</a></li><li><a href="https://github.com/riscv-non-isa/riscv-sbi-doc/blob/master/riscv-sbi.adoc">riscv-sbi-doc/riscv-sbi.adoc at master · riscv-non-isa/riscv-sbi-doc · GitHub</a></li><li><a href="https://onlinedocs.microchip.com/pr/GUID-0E320577-28E6-4365-9BB8-9E1416A0A6E4-en-US-6/index.html?GUID-4BB190D9-B9F0-4605-8E3C-E8278ADC5D2E">PolarFire® SoC MSS Technical Reference Manual</a></li><li><a href="https://zju-sec.github.io/os22fall-stu/">浙江大学22年秋操作系统实验</a></li></ol><h2 id="Lab2-MMU-设置和内存管理"><a href="#Lab2-MMU-设置和内存管理" class="headerlink" title="Lab2 MMU 设置和内存管理"></a>Lab2 MMU 设置和内存管理</h2><p>关于这一单元要实现的内容，实验书中写的非常详细。然而，关于具体如何实现^^</p><p>这里给几个重要的参考提示吧。</p><ol><li>关于 <code>sfence.vma</code>，是一个用于刷新 <code>fence</code> 的指令，大致可以类比 <code>mips</code> 中的刷新 <code>tlb</code> 相关指令。其主要需要使用的地方如下：(摘至 <code>riscv-privileged-20211203.pdf</code>)<br><img src="https://s2.loli.net/2023/04/26/o84iejf1gAWLVky.png" alt="`sfence.vma`"></li><li><code>riscv</code> 在 <code>S</code> 态的物理内存开始于 <code>0x80000000</code>。</li><li><code>riscv</code> 的获取总内存只能在 <code>M</code> 态进行。 <code>qemu-system-riscv32</code> 默认内存是 <code>64MB</code>。</li><li>关于特权位，首先要改宏，其次原来 <code>PTE_D</code> 的地方都应该改为 <code>PTE_W</code>。另外还要注意设置 <code>PTE_R</code> 和 <code>PTE_X</code>。并且还要注意他们的相互关系。本 <code>Lab</code> 我们无需关心其它特权位。</li><li><code>_do_tlb_refill</code> 相关函数其实是需要的，但是并非在这个 <code>lab</code> 中，而且写法肯定也完全不同，表达的含义也略有差别，<code>passive_alloc</code> 确实可以考虑留下来。</li><li>由于在 <code>Lab2</code> 中我们只有内核态，而且即便建立了 <code>SV32</code> 虚拟内存映射，实质上还是一个等值映射（即虚拟地址和对应物理地址相等），所以直接使用物理内存也是可以的。但是我还是强烈建议在 <code>Lab2</code> 建立虚拟地址映射，这也是为后续的用户态的加入做好准备。</li><li>另外善用 <code>qemu</code> 的指令也很重要。在模拟时，按下 <code>Ctrl+A</code> 随后按下 <code>C</code> 可以看到 <code>(qemu)</code> 的标志出现，表示此时你可以输入 <code>qemu</code> 支持的指令。可以用 <code>help</code> 查看帮助。一般来说，最常见的是 <code>info mem</code> 查看虚拟内存映射，<code>info registers</code> 查看寄存器。需要注意在输入指令模式下模拟不会停止（除非输入指令 <code>stop</code>），因此建议搭配 <code>gdb</code> 使用。</li><li>更多技术细节可以参考浙大 OS 实验 Lab4。</li></ol><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/dai_xiangjun/article/details/124117795">10.4 自制操作系统: risc-v 虚拟内存系统_sv39_richard.dai的博客-CSDN博客</a></li><li><a href="https://github.com/ZJU-SEC/os22fall-stu">GitHub - ZJU-SEC/os22fall-stu: https://zju-sec.github.io/os22fall-stu/</a></li><li><a href="https://wiki.riscv.org/display/HOME/RISC-V+Technical+Specifications">RISC-V Technical Specifications - Home - RISC-V International</a></li></ol><h2 id="Lab3-异常处理和进程管理"><a href="#Lab3-异常处理和进程管理" class="headerlink" title="Lab3 异常处理和进程管理"></a>Lab3 异常处理和进程管理</h2><p>这一个 <code>Lab</code> 的主要任务是完成异常处理和进程管理，进程管理的难度不大，改动较少，异常处理内容就比较多（这是因为 <code>riscv</code> 和 <code>mips</code> 异常处理相关的寄存器是完全不一样的）。</p><h3 id="异常处理-1-时钟中断"><a href="#异常处理-1-时钟中断" class="headerlink" title="异常处理 1 - 时钟中断"></a>异常处理 1 - 时钟中断</h3><p>本部分建议参考浙大 OS 实验 <code>Lab2</code>。</p><p>在 <code>riscv</code> 中设置时钟中断分为三步：</p><ol><li>调整 <code>sstatus</code> 和 <code>sie</code> 寄存器的值，使得 CPU 允许中断发生。</li><li>使用 <code>rdtime</code> 指令获取当前时间 （CPU周期数）。</li><li>调用 <code>OpenSBI</code> 的接口设置下一次中断发生的时间。</li></ol><p>在这一个子任务中，可以暂时注释掉有关保存上下文到 <code>TrapFrame</code> 的代码，简单进行一些直接压栈即可，另外可以将 <code>schedule</code> 改为输出一条消息后立即 <code>sret</code>，不进行进程管理，方便查看时钟中断是否实现正确。另外也要注意调整调整时钟发生的频率，验证时钟中断发生频率是否合理。</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>主要任务如下：</p><ol><li>更改页表映射的权限位，包括但不限于 <code>base_pgdir</code> 以及 <code>elf_load_seg</code>。</li><li>在为进程初始化虚拟内存的时候，应该将内核虚拟地址全部映射到进程的页表中，这样做才能在不切换页表的条件下进行 <code>S</code> 态异常处理和系统调用。这也是为什么我推荐在上一个 <code>Lab</code> 中做好内核的虚拟地址映射。</li><li>在进入异常处理的时候进行上下文保存。保存在 <code>KSTACKTOP</code> 中。合理利用 <code>sscratch</code> 寄存器会对这个过程有所帮助。</li><li>初始化进程的 <code>TrapFrame</code> 的时候需要根据需要初始化，使得 <code>sret</code> 后 <code>sp</code> 和 <code>sstatus</code> 等寄存器都有合理值。</li><li>正确实现 <code>env_pop_tf</code>，这一步需要进行切换页表操作，以及为恢复上下午做准备（设置合理的栈帧）。切换页表是立即生效的，所以理论上你不需要刷新 <code>fence</code>。但是可能出现的问题是如果 <code>asid</code> 出现了循环利用，这时就会出现 <code>satp</code> 中的页表与 <code>fence</code> 中的不同，所以需要考虑在删除旧页表的时候，或者初始化新页表时刷新 <code>fence</code>。</li></ol><p>正确完成后应该能通过测试 <code>3.1</code>，<code>3.2</code>，和 <code>3.3</code>。</p><h3 id="异常处理-2-缺页异常"><a href="#异常处理-2-缺页异常" class="headerlink" title="异常处理 2 - 缺页异常"></a>异常处理 2 - 缺页异常</h3><p>由于我们的系统加载进程时，将进程的所有页表载入内存中，所以不可能发生缺页异常……吗？</p><p>实际上仍然会发生缺页异常，这是因为进程会用到一些没有声明在 <code>elf</code> 中的内存。最典型的例子是栈空间。而栈空间的大小是未知的，所以需要动态加载。当然你确实可以事先分配适当的空间，然后一旦用户使用超过这个空间则通知用户出现 <code>Stack Overflow</code>。不过我更推荐支持无限栈的方式。</p><blockquote><p>Tips: </p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Exception Code for Supervisor (SXLEN == 32): o ------------+----------------+------------------ o   Interrupt | Exception Code | Description o ------------+----------------+------------------ o       1     |        1       | Supervisor software interrupt o       1     |        5       | Supervisor timer interrupt o       1     |        9       | Supervisor external interrupt o       1     |      ≥16       | Designated for platform use o ------------+----------------+------------------ o       0     |        0       | Instruction address misaligned o       0     |        1       | Instruction access fault o       0     |        2       | Illegal instruction o       0     |        3       | Breakpoint o       0     |        4       | Load address misaligned o       0     |        5       | Load access fault o       0     |        6       | Store/AMO address misaligned o       0     |        7       | Store/AMO access fault o       0     |        8       | Environment call from U-mode o       0     |        9       | Environment call from S-mode o       0     |       12       | Instruction page fault o       0     |       13       | Load page fault o       0     |       15       | Store/AMO page fault o       0     |      ≥24       | Designated for custom use o ------------+----------------+------------------ */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>异常 12，13，和 15 分别对应取指缺页，读缺页，和写缺页。<br>Note: <code>AMO</code> 的意识是读写原子操作，如原子自加操作等等。</p></blockquote><p>在我们的 <code>MOS</code> 系统中，至少需要实现 15 号异常的处理。因为栈空间显然是先写后读的。</p><p>处理好了栈空间的缺页异常，我们就可以通过测试 <code>3.4</code>。</p><blockquote><p>但是这里有一个小 bug 需要解决，在 <code>riscv32IC</code> 中 <code>0x0000</code> 是未知指令，真正的 <code>nop</code> 指令是 <code>addi zero, zero, 0</code>，编码为 <code>0x0001</code>。所以你需要自行更改测试点的 <code>entry.S</code></p></blockquote><h3 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h3><p>在这一个 <code>Lab</code> 中，我们的系统引入了用户态程序，然而用户态程序可能有多个，他们会使用同样的虚拟地址（尽管物理地址不同，但是 <code>gdb</code> 无权观测物理地址），而且不会在内核启动的同时载入。因此需要调试用户程序时，需要在内核启动并加载对应虚拟地址后，手动加载用户程序符号表，然后再添加断点。参考资料 1，可以使用 <code>add-symbol-file &lt;filename&gt; &lt;address&gt;</code>，<code>address</code> 对于我们来说通常应该是 <code>0x400000</code>.</p><h3 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://cloud.tencent.com/developer/ask/sof/101979738">如何在gdb中加载多个符号文件 - 问答 - 腾讯云开发者社区-腾讯云</a></li><li><a href="https://github.com/QAQdev/onekos/tree/master">GitHub - QAQdev/onekos: A mini kernel of 2022 ZJU OS</a></li></ol><h2 id="Lab-4-系统调用和-Fork"><a href="#Lab-4-系统调用和-Fork" class="headerlink" title="Lab 4 系统调用和 Fork"></a>Lab 4 系统调用和 Fork</h2><h3 id="页表自映射"><a href="#页表自映射" class="headerlink" title="页表自映射"></a>页表自映射</h3><p>指导书中非常清晰的表明了页表自映射在 <code>riscv</code> 中的实现方式是完全不同的。也给出了两种推荐的方式。当然了我个人是一点也不推荐其中的任何一种方式的。因为放弃自映射机制对 MOS 操作系统来说会有其它方面的严重影响，对于 <code>Lab 4</code> 来说，<code>fork</code> 是需要使用到自映射页表的，如果放弃自映射机制，可能需要新增一个 <code>syscall</code> 用于处理用户态对页表的访问请求。而指导书中给出的另外一种方式，需要为每个进程直接分配 <code>4MB</code> 的页表空间，这对于一个只有 <code>64MB</code> 内存的系统来说，实在是有点太多了，从节俭角度出发，确实无法接受。</p><p>至于我采用了什么方式，就留个悬念，下次再聊吧。</p><p>下面我给出一个用户态程序，这个程序可以检查你的页表自映射的正确性：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;lib.h&gt;</span></span>Pde <span class="token operator">*</span>pgdir <span class="token operator">=</span> <span class="token punctuation">(</span>Pde <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UVPT <span class="token operator">|</span> UVPT <span class="token operator">&gt;&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_buffer</span><span class="token punctuation">{</span>u_int vaddr<span class="token punctuation">;</span>u_int paddr<span class="token punctuation">;</span>u_int size<span class="token punctuation">;</span>u_int attr<span class="token punctuation">;</span><span class="token punctuation">}</span> buffer<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> u_int pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>buf<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token function">debugf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>buffer buf<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token function">debugf</span><span class="token punctuation">(</span><span class="token string">"%08x %08x %08x "</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>vaddr<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>paddr<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_R<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_W<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_X<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_U<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'u'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_G<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_A<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_D<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_COW<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;</span> PTE_LIBRARY<span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> buffer buf <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pte_search</span><span class="token punctuation">(</span>Pte <span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token punctuation">{</span>u_int va_pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_int<span class="token punctuation">)</span> pte <span class="token operator">-</span> UVPT<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>u_int va<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> attr<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_int<span class="token punctuation">)</span> pte <span class="token operator">==</span> <span class="token punctuation">(</span>u_int<span class="token punctuation">)</span> pgdir<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pte<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>va <span class="token operator">=</span> va_pte <span class="token operator">|</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>pa <span class="token operator">=</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>attr <span class="token operator">=</span> pte<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x3ff</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> buf<span class="token punctuation">.</span>attr <span class="token operator">&amp;&amp;</span>    va <span class="token operator">==</span> buf<span class="token punctuation">.</span>vaddr <span class="token operator">+</span> buf<span class="token punctuation">.</span>size <span class="token operator">&amp;&amp;</span>    pa <span class="token operator">==</span> buf<span class="token punctuation">.</span>paddr <span class="token operator">+</span> buf<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>buf<span class="token punctuation">.</span>size <span class="token operator">+=</span> BY2PG<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>buf<span class="token punctuation">.</span>vaddr <span class="token operator">=</span> va<span class="token punctuation">;</span>buf<span class="token punctuation">.</span>paddr <span class="token operator">=</span> pa<span class="token punctuation">;</span>buf<span class="token punctuation">.</span>size <span class="token operator">=</span> BY2PG<span class="token punctuation">;</span>buf<span class="token punctuation">.</span>attr <span class="token operator">=</span> attr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">map_search</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pde<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pde<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">user_assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pde<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x3ff</span><span class="token punctuation">)</span> <span class="token operator">==</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pte_search</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UVPT <span class="token operator">|</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">debugf</span><span class="token punctuation">(</span><span class="token string">"%-8s %-8s %-8s %-9s\n"</span><span class="token punctuation">,</span> <span class="token string">"vaddr"</span><span class="token punctuation">,</span> <span class="token string">"paddr"</span><span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"attr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">debugf</span><span class="token punctuation">(</span><span class="token string">"-------- -------- -------- ---------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">map_search</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的自映射机制实现合理，该程序输出的结果应该和 <code>qemu</code> 命令 <code>info mem</code> 的结果几乎一致。</p><blockquote><p>几乎一致的意思是，根据你的自映射机制自行判断正确性。<br>一种可能的情况，你可以只实现 <code>USTACKTOP</code> 以下的页表项的查询。</p></blockquote><h3 id="简单的-syscall"><a href="#简单的-syscall" class="headerlink" title="简单的 syscall"></a>简单的 <code>syscall</code></h3><p>这里主要需要改的就是一些很细微的差别。比如把 <code>tf-&gt;regs[2]</code>（<code>mips: $v0</code>）改成 <code>tf-&gt;regs[10]</code>（<code>riscv: a0</code>）之类的。还有以前用 <code>PTE_ADDR</code> 向下去整的（虽然本来就不该这样用），要改为 <code>ROUNDDOWN</code>。然后权限位都得改一改。以及记得添加权限 <code>PTE_U</code>。</p><h3 id="Fork-和-Copy-on-Write"><a href="#Fork-和-Copy-on-Write" class="headerlink" title="Fork 和 Copy-on-Write"></a><code>Fork</code> 和 <code>Copy-on-Write</code></h3><p>这里我尝试了很多次，发现虽然页表有映射，但是被设置为只读，然后尝试写入时仍然会触发 <code>15</code> 号异常 <code>Store/AMO page fault</code> 而非 <code>7</code> 号异常 <code>Store/AMO access fault</code>，这可能和 <code>OpenSBI</code> 的实现有关。不过问题不大，我们只需要在触发 <code>15</code> 号异常时检测一下页面是否存在就可以判断是不是 <code>copy-on-write</code> 了。</p><h3 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h3><p>注意本 <code>Lab</code> 在测试的时候可能需要改一些测试点的代码，主要是因为权限位的设置问题。</p><p>另外记得检查你自己实现的页表自映射有没有改变什么东西，有没有正确的释放资源。</p><p>以及，测试的时候记得在 <code>-O0</code> 模式（调试模式）和 <code>-O2</code> 模式（<code>MOS_PROFILE=release</code> 模式）都测试一下。然后我就测出了 <code>bug</code>，还以为是编译器优化的问题，跑到 GitHub 上发了个 <a href="https://github.com/riscv-collab/riscv-gnu-toolchain/issues/1241"><code>issue</code></a>，最后发现是我自己蠢了:(</p><p>以及 <code>vscode</code> 调试的时候可能有一个问题是 <code>Debugger was unable to continue the process.</code> 这个问题我也很想去 GitHub 上发 <code>issue</code>，但是发现这个问题时而发生时而不发生，非常神奇。最后我发现，当你的程序位于用户态时，不能有任何内核态断点，否则 <code>gdb</code> 会因为无法访问内核态断点而拒绝继续进行调试。</p><h2 id="Lab-5-文件系统"><a href="#Lab-5-文件系统" class="headerlink" title="Lab 5 文件系统"></a>Lab 5 文件系统</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先使用如下命令查看 QEMU 支持的 Virt 设备：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> targetqemu-system-riscv32 <span class="token parameter variable">-machine</span> virt,dumpdtb<span class="token operator">=</span>target/virt.dtbdtc <span class="token parameter variable">-I</span> dtb <span class="token parameter variable">-O</span> dts target/virt.dtb <span class="token operator">&gt;</span> target/virt.dts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意如果提示 <code>dtc</code> 不存在，则可以通过 <code>apt-get install device-tree-compiler</code> 下载</p></blockquote><blockquote><p>虽然实验指导书上明确有写默认的磁盘挂载地址在哪里，但是建议还是看一看 <code>virt.dts</code> 文件，可能会有意外收获</p></blockquote><h3 id="VIRTIO-基础知识"><a href="#VIRTIO-基础知识" class="headerlink" title="VIRTIO 基础知识"></a>VIRTIO 基础知识</h3><p>在开始正式写代码之前，一定要事先了解 VirtIO 的基础知识，不然就无从下手了。</p><h4 id="参考资料推荐"><a href="#参考资料推荐" class="headerlink" title="参考资料推荐"></a>参考资料推荐</h4><p>这里我下面列出的参考资料中的 1,2,3 其实都是很不错的介绍。虽然可能不太完善，但是是中文的，且较为简短，适合新手。官方文档（资料 5）其实也是很好的，但是很长，不适合用于了解基础知识，可以用于写代码时的参考。官方文档上有详细的步骤，不过如果不了解基础知识，可能完全看不懂。代码层面上，参考资料 4 是非常完美的。<code>xv6</code> 是 MIT 开发的用作教学的操作系统，涵盖了进程，页表，中断，互斥锁，调度，和文件系统等多个方面，参考资料 4 是一些读者使用 <code>riscv64</code> 的版本。</p><h4 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h4><p>下面我也给出我自己的理解和简要介绍。</p><p>Virtio 是一种磁盘虚拟化技术，采用半虚拟化，其效率远高于 IDE。Virtio 实现了一种统一化的标准，对于任何支持的设备，都能为驱动提供统一的标准和接口。我们的任务就是要根据 Virtio 的统一化标准，实现指定的接口，完成驱动与设备之间的通讯。</p><p>基本术语：</p><ol><li>Driver: 驱动，又称 Guest，实现在虚拟机中，为前端，也就是我们要实现的部分</li><li>Device: 设备，又称 Host，实现在虚拟机监控器中，为后端，由 QEMU 实现</li><li>Virtio Queue：是 Virtio 的数据传输的载体，为核心部分，也是接下来要重点关注的</li></ol><h4 id="Virtio-Queue"><a href="#Virtio-Queue" class="headerlink" title="Virtio Queue"></a>Virtio Queue</h4><p>Virtio Queue 是 Virtio 中数据传输的载体，一对设备和驱动之间可以有多个 Virtio Queue。Virtio Queue 主要包括三个部分：</p><ol><li>Descriptor Table<blockquote><p>描述符表，描述符结构体应包含 <code>addr</code>（地址），<code>len</code>（长度），<code>flags</code>（标志），<code>next</code>（指针）四个部分。<br><code>addr</code>: 想要共享的内存的起始地址，应当是虚拟机物理地址<br><code>len</code>: 想要共享的内存的长度<br><code>flags</code>: 记录该描述符是否为 Device 可写的，是否有下一个描述符<br><code>next</code>: 指向该描述符链的下一个描述符；通常一次数据传输中，一个描述符并不够用，所以需要将多个链连在一起使用</p></blockquote></li><li>Available Ring<blockquote><p>可用描述符队列，该队列主要维护可用描述符链头的 id，该队列的队尾由 Driver 维护，Driver 向队尾写入新的描述符链向 Device 传递请求，Device 从队头取出描述符链进行处理。</p></blockquote></li><li>Used Ring<blockquote><p>已用描述符队列，和上面正好相反，用于维护已用描述符链头的 id，队尾由 Device 维护，Device 会将从 Available Ring 中取出的，已经完成的请求放回 Used Ring 队列中，Driver 从队头取出描述符链进行回收。</p></blockquote></li></ol><p>实际使用的描述符个数以及通知方式应当在设备初始化阶段协商。</p><p>这部分源代码可以参考 <code>/usr/include/linux/virtio_ring.h</code></p><h3 id="设备初始化"><a href="#设备初始化" class="headerlink" title="设备初始化"></a>设备初始化</h3><p>参考官方文档 3.1 和 4.2.3，一共有 8 步：</p><ol><li>重置设备</li><li>Guest OS 声明已经发现 Device</li><li>Guest OS 声明可以驱动 Device</li><li>Driver 读取 Device 所支持的功能/特性说明，并选择一个子集使用</li><li>Driver 告知 Device 将会使用/实现的功能/特性</li><li>Driver 读取 Device 是否接受上一步所选择的特性</li><li>Driver 读取/写入 Device 的其它设置位，MMIO 主要需要实现以下设定：<ol><li>选择一个 Virtqueue，通常选择 id=0 的</li><li>检查这个队列是否是空闲的</li><li>检查这个队列支持的最大描述符数量</li><li>为 Descriptor Table，Available Ring，Used Ring 分配物理内存</li><li>告知 Device 要使用的描述符数量</li><li>分别告知 Device：Descriptor Table，Available Ring，Used Ring 的物理地址</li><li>告知 Device 这个队列已经准备完毕了</li></ol></li><li>Driver 告知 Device 初始化结束</li></ol><h3 id="I-x2F-O-事件"><a href="#I-x2F-O-事件" class="headerlink" title="I/O 事件"></a>I/O 事件</h3><p>在传统的针对 block 设备的 I/O 事件中，我们一次使用 3 个描述符发送请求，包括以下内容：</p><ol><li>描述结构体，包括请求类型，请求 sector 编号，优先级</li><li>需要读写的内存</li><li>I/O事件状态位</li></ol><p>具体实现可以参考资料 4 的代码和文档 3.2.1</p><p>至于回收 I/O 事件，可以采用 busy-waiting 读取状态位或要求 Device 发出硬件中断等方式实现。</p><p>我采用的是 busy-waiting 方式（当然是 waiting+yield），并且屏蔽了硬件中断避免频繁陷入内核态影响程序运行效率。</p><h3 id="善后工作"><a href="#善后工作" class="headerlink" title="善后工作"></a>善后工作</h3><p>善后工作就很简单了，无非就是改改 syscall 接口，更改 ide.c 这样的事情。其它部分都是不需要动的。（当然是页表项权限相关的东西也是肯定要改的）。</p><h3 id="参考资料-3"><a href="#参考资料-3" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/144349599?utm_id=0">0020 virtio-blk简易驱动 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/389525645">通过MMIO的方式实现VIRTIO-BLK设备 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/390606568?utm_id=0">通过MMIO的方式实现VIRTIO-BLK设备（二） - 知乎</a></li><li><a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv/kernel/virtio_disk.c">xv6-riscv/virtio_disk.c at riscv · mit-pdos/xv6-riscv · GitHub</a></li><li><a href="http://docs.oasis-open.org/virtio/virtio/v1.0/cs04/virtio-v1.0-cs04.pdf">docs.oasis-open.org/virtio/virtio/v1.0/cs04/virtio-v1.0-cs04.pdf</a></li></ol><h2 id="Lab-6-Shell"><a href="#Lab-6-Shell" class="headerlink" title="Lab 6 Shell"></a>Lab 6 Shell</h2><p>在完成 Lab 5 以后，整个移植任务可以说就已经基本结束了。Lab 6 的移植非常简单，因为大多是用户层面的内容，不涉及底层。可能唯一需要注意的是 <code>spawnl</code> 函数利用了 <code>mips</code> 的传参性质，而 <code>riscv</code> 中不能这样做。另外再注意修改修改有关对 <code>Trapframe</code> 的修改就可以了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="操作系统" scheme="https://toby-shi-cloud.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="OS" scheme="https://toby-shi-cloud.github.io/tags/OS/"/>
    
    <category term="RISC-V" scheme="https://toby-shi-cloud.github.io/tags/RISC-V/"/>
    
  </entry>
  
  <entry>
    <title>Operator System Lab 2 上机实验回顾</title>
    <link href="https://toby-shi-cloud.github.io/posts/oslab2.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oslab2.html</id>
    <published>2023-04-03T16:00:00.000Z</published>
    <updated>2023-04-04T02:12:21.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Exam"><a href="#Exam" class="headerlink" title="Exam"></a>Exam</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>实现函数 <code>u_int&nbsp;page_perm_stat(Pde *pgdir,&nbsp;struct&nbsp;Page *pp, u_int perm_mask)</code> 。</p><p>函数介绍：遍历以 <code>pgdir</code> 为页目录基地址的整个二级页表，找到指向 <code>pp</code> 的且权限至少为 <code>perm_mask</code> 页表项个数，并输出找到的个数。</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">u_int <span class="token function">page_perm_stat</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp<span class="token punctuation">,</span> u_int perm_mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>u_int count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pde <span class="token operator">*</span>pgdir_entryp <span class="token operator">=</span> pgdir <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte_entryp <span class="token operator">=</span> pte <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte_entryp <span class="token operator">&amp;</span> perm_mask<span class="token punctuation">)</span> <span class="token operator">==</span> perm_mask<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pa2page</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> pp<span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><code>u_int count = 0;</code> 定义了一个用于计数的变量。</li><li><code>for (u_int i = 0; i &lt; (1u &lt;&lt; 10); i++)</code> 这层循环遍历页目录下的所有页表项。</li><li><code>Pde *pgdir_entryp = pgdir + i;</code> 这是页目录下的页表项。</li><li><code>if (*pgdir_entryp &amp; PTE_V)</code> 如果这个页表项是有效的。</li><li><code>Pte *pte = (Pte *) KADDR(PTE_ADDR(*pgdir_entryp));</code> <code>PTE_ADDR</code> 取高 20 位，然后 <code>KADDR</code> 把物理地址转换为虚拟地址，于是得到 (二级) 页表基地址。</li><li><code>for (u_int j = 0; j &lt; (1u &lt;&lt; 10); j++)</code> 遍历整个页表。</li><li><code>Pte *pte_entryp = pte + j;</code> 这是一个页表项。</li><li><code>(*pte_entryp &amp; PTE_V)</code> 判断页表项是否有效。</li><li><code>(*pte_entryp &amp; perm_mask) == perm_mask</code> 判断页表项是否包含相应权限。</li><li><code>pa2page(PTE_ADDR(*pte_entryp)) == pp</code> 判断是否指向指定页表，<code>pa2page</code> 把物理地址转换为页表控制结构体。</li></ol><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>实现内存交换机制。不限制策略和效率。</p><p>指定位于 $[0x3900000, 0x3910000)$ 的 16 个物理页作为可交换内存。使用 <code>swap_alloc</code> 申请可交换内存，如果可交换内存全部已满，则将一个页面换出到外存。使用 <code>swap_lookup</code> 查找虚拟地址对应物理内存，如果该内存已被换出，则需要换入。</p><p>这里课程组使用了一个 <code>u_char</code> 数组模拟外存，总计有 64 个外存页。我们只需要调用 <code>disk_alloc</code> 和 <code>disk_free</code> 就可以申请和释放外存了。</p><p>题目为填空题，已有代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;swap.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Page_list</span> page_free_swapable_list<span class="token punctuation">;</span><span class="token keyword">static</span> u_char <span class="token operator">*</span><span class="token function">disk_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disk_free</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span>pdisk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">LIST_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> SWAP_PAGE_BASE<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SWAP_PAGE_END<span class="token punctuation">;</span> i <span class="token operator">+=</span> BY2PG<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_INSERT_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">,</span> pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Interface for 'Passive Swap Out'</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span><span class="token function">swap_alloc</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Step 1: Ensure free page</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LIST_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Your Code Here (1/3) */</span><span class="token punctuation">}</span><span class="token comment">// Step 2: Get a free page and clear it</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">LIST_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">page2kva</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Interfaces for 'Active Swap In'</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">is_swapped</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Your Code Here (2/3) */</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Your Code Here (3/3) */</span><span class="token punctuation">}</span>Pte <span class="token function">swap_lookup</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Step 1: If corresponding page is swapped out, swap it in</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_swapped</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">swap</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Step 2: Look up page table element.</span>Pte <span class="token operator">*</span>ppte<span class="token punctuation">;</span><span class="token function">page_lookup</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> va<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ppte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Step 3: Return</span><span class="token keyword">return</span> ppte <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">*</span>ppte<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Disk Simulation (Do not modify)</span>u_char swap_disk<span class="token punctuation">[</span>SWAP_DISK_NPAGE <span class="token operator">*</span> BY2PG<span class="token punctuation">]</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span>BY2PG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u_char swap_disk_used<span class="token punctuation">[</span>SWAP_DISK_NPAGE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> u_char <span class="token operator">*</span><span class="token function">disk_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> alloc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>alloc <span class="token operator">&lt;</span> SWAP_DISK_NPAGE <span class="token operator">&amp;&amp;</span> swap_disk_used<span class="token punctuation">[</span>alloc<span class="token punctuation">]</span><span class="token punctuation">;</span> alloc<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">assert</span><span class="token punctuation">(</span>alloc <span class="token operator">&lt;</span> SWAP_DISK_NPAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>swap_disk_used<span class="token punctuation">[</span>alloc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>swap_disk<span class="token punctuation">[</span>alloc <span class="token operator">*</span> BY2PG<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disk_free</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span>pdisk<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> offset <span class="token operator">=</span> pdisk <span class="token operator">-</span> swap_disk<span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>offset <span class="token operator">%</span> BY2PG <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>swap_disk_used<span class="token punctuation">[</span>offset <span class="token operator">/</span> BY2PG<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存交换流程：</p><ol><li>换入过程：<ol><li>申请一个可交换内存页（使用 <code>swap_alloc</code>）</li><li>将换出到外存的数据全部拷贝到新申请到的页</li><li>将所有指向该外存的页表项全部指向新内存页</li><li>将所有指向该外存的页表项的 <code>PTE_V</code> 置 <code>1</code>，<code>PTE_SWP</code> 置 <code>0</code></li><li>释放外存页</li></ol></li><li>换出过程：<ol><li>选择一个要换出的内存页（任何策略都可以接受）</li><li>申请一个新的外存页（使用 <code>disk_alloc</code>）</li><li>将所有指向该内存页的页表项全部指向新外存页</li><li>将所有指向该内存页的页表项的 <code>PTE_V</code> 置 <code>0</code>，<code>PTE_SWP</code> 置 <code>1</code></li><li>复制内存页的全部数据到外存</li><li>释放内存页，并将其插入空闲页表队列</li></ol></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Your-Code-Here-1-x2F-3"><a href="#Your-Code-Here-1-x2F-3" class="headerlink" title="Your Code Here (1/3)"></a>Your Code Here (1/3)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span><span class="token function">swap_alloc</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Step 1: Ensure free page</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LIST_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// random chose one page to swap out</span>        u_long pa <span class="token operator">=</span> <span class="token number">0x3900000</span> <span class="token operator">+</span> <span class="token punctuation">(</span>asid <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> BY2PG<span class="token punctuation">;</span> <span class="token comment">// chose page (asid % 16)</span>        u_long da <span class="token operator">=</span> <span class="token punctuation">(</span>u_long<span class="token punctuation">)</span> <span class="token function">disk_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alloc a disk page</span>        <span class="token function">page_swap_out_lookup</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update page table entries</span>        <span class="token comment">// note: copy memory should use va, thus using KADDR to convert</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy memory</span>        <span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">pa2page</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get page</span>        pp<span class="token operator">-&gt;</span>pp_ref <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// no looger use</span>        <span class="token function">page_free</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// free page</span>        <span class="token function">LIST_INSERT_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">,</span> pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// insert to head</span>    <span class="token punctuation">}</span>    <span class="token comment">// Step 2: Get a free page and clear it</span><span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">LIST_FIRST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page_free_swapable_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LIST_REMOVE</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span> pp_link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">page2kva</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Your-Code-Here-2-x2F-3"><a href="#Your-Code-Here-2-x2F-3" class="headerlink" title="Your Code Here (2/3)"></a>Your Code Here (2/3)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">is_swapped</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// note: you can refer to va2pa in pmap.h</span>    pgdir <span class="token operator">=</span> <span class="token operator">&amp;</span>pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// get pgdir entry</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// not valid</span>    Pte <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get page table entry</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pte<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pte<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> PTE_SWP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// swapped</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// not swapped</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Your-Code-Here-3-x2F-3"><a href="#Your-Code-Here-3-x2F-3" class="headerlink" title="Your Code Here (3/3)"></a>Your Code Here (3/3)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long va<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">Page</span> <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token function">swap_alloc</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alloc a new page</span>    Pte <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get pte of va</span>    u_long da <span class="token operator">=</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pte<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get da what pte point to</span>    u_long kva <span class="token operator">=</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token function">page2kva</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get kva of the new page</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>kva<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>da<span class="token punctuation">,</span> BY2PG<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy from disk to the new page</span>    u_long pa <span class="token operator">=</span> <span class="token punctuation">(</span>u_long<span class="token punctuation">)</span> <span class="token function">page2pa</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get pa of the new page</span>    <span class="token function">page_swap_in_lookup</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> asid<span class="token punctuation">,</span> pa<span class="token punctuation">,</span> da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// update page table entries</span>    <span class="token function">disk_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span><span class="token punctuation">)</span>da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// free disk memory</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Tool-Functions"><a href="#Tool-Functions" class="headerlink" title="Tool Functions"></a>Tool Functions</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// note: these are similar to page_perm_stat in Lab2-exam.</span><span class="token comment">/* Overview: *   Walk through all the page table entries of pgdir *   to find all the entries that point to pa *   and change these entries to satify swap outs. */</span><span class="token keyword">void</span> <span class="token function">page_swap_out_lookup</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long pa<span class="token punctuation">,</span> u_long da<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pde <span class="token operator">*</span>pgdir_entryp <span class="token operator">=</span> pgdir <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte_entryp <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte <span class="token operator">=</span> pte_entryp <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// point to da</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token operator">~</span>PTE_V<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_SWP<span class="token punctuation">;</span> <span class="token comment">// modify term</span>u_long va <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>j <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">tlb_invalidate</span><span class="token punctuation">(</span>asid<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invalidate TLB</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* Overview: *   Walk through all the page table entries of pgdir *   to find all the entries that point to da *   and change these entries to satify swap ins. */</span><span class="token keyword">void</span> <span class="token function">page_swap_in_lookup</span><span class="token punctuation">(</span>Pde <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> u_int asid<span class="token punctuation">,</span> u_long pa<span class="token punctuation">,</span> u_long da<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pde <span class="token operator">*</span>pgdir_entryp <span class="token operator">=</span> pgdir <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp <span class="token operator">&amp;</span> PTE_V<span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte_entryp <span class="token operator">=</span> <span class="token punctuation">(</span>Pte <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">KADDR</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pgdir_entryp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>u_int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1u</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Pte <span class="token operator">*</span>pte <span class="token operator">=</span> pte_entryp <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_SWP<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// point to pa</span><span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> <span class="token operator">~</span>PTE_SWP<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_V<span class="token punctuation">;</span> <span class="token comment">// modify term</span>u_long va <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u_long<span class="token punctuation">)</span>j <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">tlb_invalidate</span><span class="token punctuation">(</span>asid<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invalidate TLB</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实整篇写下来也没有什么难度。可是在考场上要一下写那么多内核代码还是很困难的。特别是你不理解每个变量名是什么意思的时候。另外善用 <code>pmap.h</code> 和 <code>mmu.h</code> 中的地址相关宏也是很重要的。</p><ol><li><code>PDX(va)</code> 页目录偏移量，即 <code>((((u_long)(va)) &gt;&gt; 22) &amp; 0x03FF)</code></li><li><code>PTX(va)</code> 页表偏移量，即 <code>((((u_long)(va)) &gt;&gt; 12) &amp; 0x03FF)</code></li><li><code>PTE_ADDR(pte)</code> 获取页表项中的物理地址，即 <code>((u_long)(pte) &amp; ~0xFFF)</code>，也就是获取高 20 位</li><li><code>PADDR(kva)</code> <code>kseg0</code> 处虚拟地址 → 物理地址，即 <code>(kva - ULIM)</code>，<code>ULIM</code> 是 <code>0x80000000</code></li><li><code>KADDR(pa)</code>  物理地址 → <code>kseg0</code> 处虚拟地址，即 <code>(kva + ULIM)</code>，<code>ULIM</code> 是 <code>0x80000000</code></li><li><code>u_long va2pa(Pde *pgdir, u_long va)</code> 查页表，虚拟地址 → 物理地址</li><li><code>struct Page *pa2page(u_long pa)</code> 物理地址 → 页控制块</li><li><code>u_long page2pa(struct Page *pp)</code> 页控制块 → 物理地址</li><li><code>u_long page2kva(struct Page *pp)</code> 页控制块 → <code>kseg0</code> 处虚拟地址</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="操作系统" scheme="https://toby-shi-cloud.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="OS" scheme="https://toby-shi-cloud.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成 P4 设计文档 （Verilog 单周期 CPU）</title>
    <link href="https://toby-shi-cloud.github.io/posts/co-p4.html"/>
    <id>https://toby-shi-cloud.github.io/posts/co-p4.html</id>
    <published>2023-03-31T16:00:00.000Z</published>
    <updated>2023-11-07T13:44:40.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="设计文档综述"><a href="#设计文档综述" class="headerlink" title="设计文档综述"></a>设计文档综述</h2><h3 id="数据通路设计"><a href="#数据通路设计" class="headerlink" title="数据通路设计"></a>数据通路设计</h3><p>数据通路设计和参考设计几乎一致，如下图所示：</p><p><img src="https://s2.loli.net/2022/11/07/xmejEK7lrfTtV59.png" alt="image-20221107003221627"></p><h3 id="模块文件结构"><a href="#模块文件结构" class="headerlink" title="模块文件结构"></a>模块文件结构</h3><p>上面数据通路涉及到的模块，<code>PC</code>，<code>RF</code>等等，在下面都有对应的文件实现。然后额外实现了 <code>Controller</code>（就是一个套壳），以及配套的 <code>MUX</code>，当然还有用于全局的 <code>macro</code></p><p><img src="https://s2.loli.net/2022/11/07/3rX6lyGkBKLxQJv.png" alt="文件总览"></p><p><img src="https://s2.loli.net/2022/11/07/QZH8i914JKfz7bx.png" alt="模块结构"></p><h2 id="模块叙述"><a href="#模块叙述" class="headerlink" title="模块叙述"></a>模块叙述</h2><h3 id="PC-v"><a href="#PC-v" class="headerlink" title="PC.v"></a><code>PC.v</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> PC <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> npc<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单的模块，只是一个用于存储 <code>pc</code> 的寄存器。</p><p>时钟上升沿到来时，如果 <code>reset</code> 在高电平，<code>pc</code> 置 <code>0x3000</code>，否则 <code>pc</code> 置为 <code>npc</code>。</p><h3 id="PCjump-v"><a href="#PCjump-v" class="headerlink" title="PCjump.v"></a><code>PCjump.v</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> PCjump <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> jpc<span class="token punctuation">,</span>    <span class="token keyword">input</span> enable<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc4<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> npc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单的模块，只是一个专用于 <code>pc</code> 的 <code>mux</code> 部件。</p><p>其中 <code>pc4</code> 始终等于 <code>pc + 4</code>。<code>enalbe</code> 为高电平时 <code>npc</code> 的值为 <code>jpc</code>（跳转值），否则为 <code>pc4</code>。</p><h3 id="IM-v"><a href="#IM-v" class="headerlink" title="IM.v"></a><code>IM.v</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> IM <span class="token punctuation">(</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> programCounter<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> instruction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>很简单的模块，包含一个储存指令的 <code>ROM</code>。</p><p>首先在 <code>initial</code> 中使用 <code>$readmemh</code> 指令读取指令机器码。然后 <code>assign instruction = ROM[programCounter[13:2]-12'hc00];</code>。其中 <code>0x0c00</code> 就是 <code>0x3000 &gt;&gt; 2</code>。</p><h3 id="DM-v"><a href="#DM-v" class="headerlink" title="DM.v"></a><code>DM.v</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> DM <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span>    <span class="token keyword">input</span> memWrite<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> addr<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> dataWrite<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> programCounter<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> dataRead<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基础模块。接口意义同 <code>P3</code>。<code>pc</code> 接口只是用于课程要求的输出。</p><p>主要逻辑是，时钟上升沿时，若 <code>reset</code> 为高电平，用 <code>for</code> 循环置零所有数据；否则，检查写使能，考虑是否写入；并且始终读取数据（并非在写数据时读取浮空值）。</p><h3 id="RF-v"><a href="#RF-v" class="headerlink" title="RF.v"></a><code>RF.v</code></h3><p>模块声明：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> RF <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span>    <span class="token keyword">input</span> writeEnable<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> writeAddr<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> readAddr1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> readAddr2<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> writeData<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> readData1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> readData2<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> programCounter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基础模块。接口意义同 <code>P3</code>。<code>pc</code> 接口只是用于课程要求的输出。</p><p>主要逻辑是，时钟上升沿时，若 <code>reset</code> 为高电平，用 <code>for</code> 循环置零所有数据；否则，检查写使能，考虑是否写入；并且始终读取数据。</p><h3 id="ALU-v"><a href="#ALU-v" class="headerlink" title="ALU.v"></a><code>ALU.v</code></h3><p>模块定义：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> ALU <span class="token punctuation">(</span>    <span class="token keyword">input</span>      <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rs<span class="token punctuation">,</span>     <span class="token comment">// %rs, may be $zero</span>    <span class="token keyword">input</span>      <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rt<span class="token punctuation">,</span>     <span class="token comment">// %rt, may be extend(imm)</span>    <span class="token keyword">input</span>      <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> shamt<span class="token punctuation">,</span>  <span class="token comment">// shamt</span>    <span class="token keyword">input</span>      <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> op<span class="token punctuation">,</span>     <span class="token comment">// ALUop</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd      <span class="token comment">// %rd, may be %rt if rt is imm</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基础模块。相较于 <code>P3</code> 做了一些改动。新增 <code>shamt</code> 接口直接实现移位指令。</p><p>对于普通指令 <code>rd = rs op rt</code>，对于移位指令 <code>rd = rt op shamt</code>，对于单目指令 <code>rd op rt</code>。</p><p><code>op</code> 的意义在 <code>macro.v</code> 宏文件中定义。</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a><code>Controller</code></h3><p>模块定义：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> Controller <span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc4<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> instr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> npc<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> pcJumpEnable<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> memAddr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> memWE<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> memRead<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> memWrite<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> grfWE<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grfRA1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grfRA2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grfWA<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grfRD1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grfRD2<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grfWD<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> aluRs<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> aluRt<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> aluRd<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> shamt<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> aluOp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>几乎就是数据通路了，因此顶层模块实际上只是套壳。</p><p>模块内部代码如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> opcode<span class="token punctuation">,</span> funct<span class="token punctuation">;</span><span class="token keyword">assign</span> opcode <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// one-hot code: RIJ</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> instrType<span class="token punctuation">;</span><span class="token keyword">assign</span> instrType <span class="token operator">=</span> <span class="token operator">{</span>  <span class="token comment">// R format</span>  opcode <span class="token operator">==</span> <span class="token constant">`MIPS_SPEC</span><span class="token punctuation">,</span>  <span class="token comment">// I format</span>  opcode <span class="token operator">==</span> <span class="token constant">`MIPS_ORI</span> <span class="token operator">||</span>  opcode <span class="token operator">==</span> <span class="token constant">`MIPS_LW</span>  <span class="token operator">||</span>  opcode <span class="token operator">==</span> <span class="token constant">`MIPS_SW</span>  <span class="token operator">||</span>  opcode <span class="token operator">==</span> <span class="token constant">`MIPS_LUI</span> <span class="token operator">||</span>  opcode <span class="token operator">==</span> <span class="token constant">`MIPS_BEQ</span> <span class="token punctuation">,</span>  <span class="token comment">// J format</span>  opcode <span class="token operator">==</span>  <span class="token constant">`MIPS_JAL</span><span class="token operator">}</span><span class="token punctuation">;</span><span class="token comment">// R format {opcode, rs, rt, rd, shamt, funct} = instr;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rs<span class="token punctuation">,</span> rt<span class="token punctuation">,</span> rd<span class="token punctuation">;</span><span class="token keyword">assign</span> rs <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> rt <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> rd <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> shamt <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">assign</span> funct <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// I format {opcode, rs, rt, imm} = instr;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> imm<span class="token punctuation">;</span><span class="token keyword">assign</span> imm <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// J format {opcode, jump} = instr;</span><span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> jump<span class="token punctuation">;</span><span class="token keyword">assign</span> jump <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ALU controll</span><span class="token keyword">reg</span> alu_rt_sel<span class="token punctuation">;</span><span class="token keyword">assign</span> aluRs <span class="token operator">=</span> grfRD1<span class="token punctuation">;</span>MUX_alu_rt mux_alu_rt <span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token function">rt</span><span class="token punctuation">(</span>grfRD2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">imm</span><span class="token punctuation">(</span>imm<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">sel</span><span class="token punctuation">(</span>alu_rt_sel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">aluRt</span><span class="token punctuation">(</span>aluRt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// GRF controll</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> grf_wa_sel<span class="token punctuation">,</span> grf_wd_sel<span class="token punctuation">;</span><span class="token keyword">assign</span> grfRA1 <span class="token operator">=</span> rs<span class="token punctuation">;</span><span class="token keyword">assign</span> grfRA2 <span class="token operator">=</span> rt<span class="token punctuation">;</span>MUX_grf_wa mux_grf_wa <span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token function">rd</span><span class="token punctuation">(</span>rd<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">rt</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">sel</span><span class="token punctuation">(</span>grf_wa_sel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">grfWA</span><span class="token punctuation">(</span>grfWA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MUX_grf_wd mux_grf_wd <span class="token punctuation">(</span>    <span class="token punctuation">.</span>alu  <span class="token punctuation">(</span>aluRd<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>mem  <span class="token punctuation">(</span>memRead<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>pc4  <span class="token punctuation">(</span>pc4<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>sel  <span class="token punctuation">(</span>grf_wd_sel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token function">grfWD</span><span class="token punctuation">(</span>grfWD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// DM controll</span><span class="token keyword">assign</span> memAddr  <span class="token operator">=</span> grfRD1 <span class="token operator">+</span> <span class="token operator">{{</span><span class="token number">16</span><span class="token operator">{</span>imm<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> imm<span class="token operator">}</span><span class="token punctuation">;</span><span class="token keyword">assign</span> memWrite <span class="token operator">=</span> grfRD2<span class="token punctuation">;</span><span class="token comment">// PC controll</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span>instrType<span class="token punctuation">)</span>    <span class="token constant">`MIPS_RFORMAT</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>      alu_rt_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      grf_wa_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      grf_wd_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      npc <span class="token operator">=</span> grfRD1<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>funct<span class="token punctuation">)</span>        <span class="token constant">`FUNCT_ADD</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_ADD</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`FUNCT_SUB</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_SUB</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`FUNCT_SLL</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_SLL</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`FUNCT_JR</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>      <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token constant">`MIPS_IFORMAT</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>      alu_rt_sel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      grf_wa_sel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      npc <span class="token operator">=</span> pc4 <span class="token operator">+</span> <span class="token operator">{{</span><span class="token number">14</span><span class="token operator">{</span>imm<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> imm<span class="token punctuation">,</span> <span class="token number">2'b00</span><span class="token operator">}</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">)</span>        <span class="token constant">`MIPS_ORI</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_OR</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          grf_wd_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`MIPS_BEQ</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          grf_wd_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> grfRD1 <span class="token operator">==</span> grfRD2<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`MIPS_LW</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          grf_wd_sel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`MIPS_SW</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          grf_wd_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          memWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token constant">`MIPS_LUI</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_LUI</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          grf_wd_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>          grfWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          grf_wd_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>      <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token constant">`MIPS_JFORMAT</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>      alu_rt_sel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      aluOp <span class="token operator">=</span> <span class="token constant">`ALU_NOP</span><span class="token punctuation">;</span>      grf_wa_sel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      grf_wd_sel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      memWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      npc <span class="token operator">=</span> <span class="token operator">{</span>pc<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> jump<span class="token punctuation">,</span> <span class="token number">2'b00</span><span class="token operator">}</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">)</span>        <span class="token constant">`MIPS_JAL</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          grfWE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>          grfWE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          pcJumpEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>      <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>  <span class="token comment">/* default */</span><span class="token punctuation">;</span>  <span class="token keyword">endcase</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mips-v"><a href="#mips-v" class="headerlink" title="mips.v"></a><code>mips.v</code></h3><p>顶层模块代码：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> mips <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pc<span class="token punctuation">,</span> npc<span class="token punctuation">,</span> pc4<span class="token punctuation">,</span> instr<span class="token punctuation">,</span> jpc<span class="token punctuation">;</span>  <span class="token keyword">wire</span> jumpEnable<span class="token punctuation">;</span>  PC ppc <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">pc</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">npc</span><span class="token punctuation">(</span>npc<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  PCjump pcj <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">pc</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">npc</span><span class="token punctuation">(</span>npc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">jpc</span><span class="token punctuation">(</span>jpc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>jumpEnable<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">pc4</span><span class="token punctuation">(</span>pc4<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  IM im <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">programCounter</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">instruction</span><span class="token punctuation">(</span>instr<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> regRD1<span class="token punctuation">,</span> regRD2<span class="token punctuation">,</span> regWD<span class="token punctuation">,</span> memRD<span class="token punctuation">,</span> memWD<span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> regRA1<span class="token punctuation">,</span> regRA2<span class="token punctuation">,</span> regWA<span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> memAddr<span class="token punctuation">;</span>  <span class="token keyword">wire</span> regWE<span class="token punctuation">,</span> memWE<span class="token punctuation">;</span>  DM dm <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">programCounter</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">memWrite</span><span class="token punctuation">(</span>memWE<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span>memAddr<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">dataWrite</span><span class="token punctuation">(</span>memWD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">dataRead</span><span class="token punctuation">(</span>memRD<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  RF rf <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">programCounter</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">writeEnable</span><span class="token punctuation">(</span>regWE<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">writeAddr</span><span class="token punctuation">(</span>regWA<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">readAddr1</span><span class="token punctuation">(</span>regRA1<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">readAddr2</span><span class="token punctuation">(</span>regRA2<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>regWD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">readData1</span><span class="token punctuation">(</span>regRD1<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">readData2</span><span class="token punctuation">(</span>regRD2<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> aluA<span class="token punctuation">,</span> aluB<span class="token punctuation">,</span> aluC<span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> shamt<span class="token punctuation">;</span>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> aluOp<span class="token punctuation">;</span>  ALU alu <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">rs</span><span class="token punctuation">(</span>aluA<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">rt</span><span class="token punctuation">(</span>aluB<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">rd</span><span class="token punctuation">(</span>aluC<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">shamt</span><span class="token punctuation">(</span>shamt<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span>aluOp<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  Controller controller <span class="token punctuation">(</span>      <span class="token punctuation">.</span><span class="token function">pc</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">pc4</span><span class="token punctuation">(</span>pc4<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">instr</span><span class="token punctuation">(</span>instr<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">npc</span><span class="token punctuation">(</span>jpc<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">pcJumpEnable</span><span class="token punctuation">(</span>jumpEnable<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">memAddr</span><span class="token punctuation">(</span>memAddr<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">memWrite</span><span class="token punctuation">(</span>memWD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">memRead</span><span class="token punctuation">(</span>memRD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">memWE</span><span class="token punctuation">(</span>memWE<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfRA1</span><span class="token punctuation">(</span>regRA1<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfRA2</span><span class="token punctuation">(</span>regRA2<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfWA</span><span class="token punctuation">(</span>regWA<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfRD1</span><span class="token punctuation">(</span>regRD1<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfRD2</span><span class="token punctuation">(</span>regRD2<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfWD</span><span class="token punctuation">(</span>regWD<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">grfWE</span><span class="token punctuation">(</span>regWE<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">aluRs</span><span class="token punctuation">(</span>aluA<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">aluRt</span><span class="token punctuation">(</span>aluB<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">aluRd</span><span class="token punctuation">(</span>aluC<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">shamt</span><span class="token punctuation">(</span>shamt<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">aluOp</span><span class="token punctuation">(</span>aluOp<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顶层模块只是做了一个连线工作，就结束了。只要把名字相同的连在一起就算完工。但是如果不小心连错了的话……</p><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><h3 id="mips-tb-v"><a href="#mips-tb-v" class="headerlink" title="mips_tb.v"></a><code>mips_tb.v</code></h3><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns <span class="token operator">/</span> <span class="token number">1</span>ps<span class="token keyword">module</span> mips_tb<span class="token punctuation">;</span>  <span class="token comment">// Inputs</span>  <span class="token keyword">reg</span> clk<span class="token punctuation">;</span>  <span class="token keyword">reg</span> reset<span class="token punctuation">;</span>  <span class="token keyword">initial</span> <span class="token keyword">begin</span>    <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">"mips.vcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token comment">// Instantiate the Unit Under Test (UUT)</span>  mips uut <span class="token punctuation">(</span>      <span class="token punctuation">.</span>clk  <span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">initial</span> <span class="token keyword">begin</span>    <span class="token comment">// Initialize Inputs</span>    clk   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    reset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// Wait 100 ns for global reset to finish</span>    <span class="token number">#100</span><span class="token punctuation">;</span>    <span class="token comment">// Add stimulus here</span>    reset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token number">#100000</span><span class="token punctuation">;</span>    <span class="token kernel-function property">$finish</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>  <span class="token important">always</span> <span class="token number">#5</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常正常的 <code>testbench</code>。因为自动化测试使用的 <code>iverilog</code>，所以查看波形也用的 <code>.vcd</code>。</p><h3 id="randomMIPS-py"><a href="#randomMIPS-py" class="headerlink" title="randomMIPS.py"></a><code>randomMIPS.py</code></h3><p>自动化测试数据生成脚本。强度可以说是很高了。详见中间那个字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> difflibINSTRUCTIONSET <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'sub'</span><span class="token punctuation">,</span> <span class="token string">'ori'</span><span class="token punctuation">,</span> <span class="token string">'lw'</span><span class="token punctuation">,</span>                  <span class="token string">'sw'</span><span class="token punctuation">,</span> <span class="token string">'beq'</span><span class="token punctuation">,</span> <span class="token string">'lui'</span><span class="token punctuation">,</span> <span class="token string">'jal'</span><span class="token punctuation">,</span> <span class="token string">'jr'</span><span class="token punctuation">,</span> <span class="token string">'nop'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">calculationInstr</span><span class="token punctuation">(</span>instrLength<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> readableReg<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> writableReg<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    instr<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    myInstr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'adduo'</span><span class="token punctuation">,</span> <span class="token string">'subuo'</span><span class="token punctuation">,</span> <span class="token string">'ori'</span><span class="token punctuation">,</span> <span class="token string">'lui'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>instrLength<span class="token punctuation">)</span><span class="token punctuation">:</span>        randInstr <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>myInstr<span class="token punctuation">)</span>        rs <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>readableReg<span class="token punctuation">)</span>        rt <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>readableReg<span class="token punctuation">)</span>        rd <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>writableReg<span class="token punctuation">)</span>        imm <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> randInstr <span class="token operator">==</span> <span class="token string">'ori'</span><span class="token punctuation">:</span>            instr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>randInstr<span class="token punctuation">,</span> rd<span class="token punctuation">,</span> rt<span class="token punctuation">,</span> imm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> randInstr <span class="token operator">==</span> <span class="token string">'lui'</span><span class="token punctuation">:</span>            instr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>randInstr<span class="token punctuation">,</span> rd<span class="token punctuation">,</span> imm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            instr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>randInstr<span class="token punctuation">,</span> rd<span class="token punctuation">,</span> rs<span class="token punctuation">,</span> rt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>instr<span class="token punctuation">)</span> <span class="token operator">==</span> instrLength    <span class="token keyword">return</span> instr<span class="token keyword">def</span> <span class="token function">memoryInstr</span><span class="token punctuation">(</span>instrLength<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> writeRegs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tempRegs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    instr<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    myInstr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lw'</span><span class="token punctuation">,</span> <span class="token string">'sw'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>instrLength<span class="token punctuation">)</span><span class="token punctuation">:</span>        randInstr <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>myInstr<span class="token punctuation">)</span>        rd <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>writeRegs<span class="token punctuation">)</span>        base <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>tempRegs<span class="token punctuation">)</span>        imm1 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0xfff</span><span class="token punctuation">,</span> <span class="token number">0xfff</span><span class="token punctuation">)</span>        imm2 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span>imm1<span class="token punctuation">,</span> <span class="token number">0x2fff</span> <span class="token operator">-</span> imm1<span class="token punctuation">)</span>        imm2 <span class="token operator">-=</span> <span class="token punctuation">(</span>imm1 <span class="token operator">+</span> imm2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>        <span class="token keyword">if</span> imm1 <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            in1 <span class="token operator">=</span> <span class="token string">'ori '</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">' $zero '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imm1<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            in1 <span class="token operator">=</span> <span class="token string">'lui '</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">' 0xffff\nori '</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imm1 <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">)</span>        in2 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>randInstr<span class="token punctuation">,</span> rd<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>imm2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        instr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>in1<span class="token punctuation">,</span> in2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>instr<span class="token punctuation">)</span> <span class="token operator">==</span> instrLength    <span class="token keyword">return</span> instr<span class="token triple-quoted-string string">'''100 calculationInstrjal A200 calculationInstr100 memoryInstrori $a0 $0 0beq $a0 $0 BA:300 calculationInstr300 memoryInstrbeq $s0 $s1 Bjr $raB:300 calculationInstr100 memoryInstrjal Cbeq $a0 $a1 ENDjal ENDC:300 calculationInstr200 memoryInstrjr $raEND:300 calculationInstr200 memoryInstr'''</span>REGISTERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'$'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'$zero'</span><span class="token punctuation">]</span>OTHERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'$at'</span><span class="token punctuation">,</span> <span class="token string">'$k0'</span><span class="token punctuation">,</span> <span class="token string">'$k1'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">singleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    instrList <span class="token operator">=</span> calculationInstr<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> REGISTERS<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'jal A'</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> calculationInstr<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> REGISTERS<span class="token punctuation">)</span> <span class="token operator">+</span> \        memoryInstr<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> OTHERS<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    instrList <span class="token operator">+=</span> temp    instrList <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'ori $a0 $0 0'</span><span class="token punctuation">,</span> <span class="token string">'beq $a0 $0 B'</span><span class="token punctuation">,</span> <span class="token string">'A:'</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> calculationInstr<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> REGISTERS<span class="token punctuation">)</span> <span class="token operator">+</span> \        memoryInstr<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> OTHERS<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    instrList <span class="token operator">+=</span> temp    instrList <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'beq $s0 $s1 B'</span><span class="token punctuation">,</span> <span class="token string">'jr $ra'</span><span class="token punctuation">,</span> <span class="token string">'B:'</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> calculationInstr<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> REGISTERS<span class="token punctuation">)</span> <span class="token operator">+</span> \        memoryInstr<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> OTHERS<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    instrList <span class="token operator">+=</span> temp    instrList <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'jal C'</span><span class="token punctuation">,</span> <span class="token string">'beq $a0 $a1 END'</span><span class="token punctuation">,</span> <span class="token string">'jal END'</span><span class="token punctuation">,</span> <span class="token string">'C:'</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> calculationInstr<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> REGISTERS<span class="token punctuation">)</span> <span class="token operator">+</span> \        memoryInstr<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> OTHERS<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    instrList <span class="token operator">+=</span> temp    instrList <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'jr $ra'</span><span class="token punctuation">,</span> <span class="token string">'END:'</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> calculationInstr<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> REGISTERS<span class="token punctuation">)</span> <span class="token operator">+</span> \        memoryInstr<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> REGISTERS<span class="token punctuation">,</span> OTHERS<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    instrList <span class="token operator">+=</span> temp    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'code.asm'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>instrList<span class="token punctuation">)</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>        <span class="token string">'java -jar mars.jar code.asm np nc mc CompactLargeText cl adduo.class cl subuo.class coL1 &gt; code.ans'</span><span class="token punctuation">)</span>    <span class="token comment"># os.system(</span>    <span class="token comment">#     'java -jar mars.jar code.asm np mc CompactLargeText cl adduo.class cl subuo.class coL2 &gt; code.log')</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'code.asm'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment"># call a never end loop to makesure my verilog CPU output correct</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\nlabel_self: beq $0 $0 label_self\n'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>        <span class="token string">'java -jar mars.jar code.asm np nc mc CompactLargeText a dump .text HexText code.txt cl adduo.class cl subuo.class'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'vvp mips &gt; code.out'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">specialJudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'code.ans'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'code.out'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    ans <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> ans <span class="token operator">==</span> out<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Check failed!'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>difflib<span class="token punctuation">.</span>context_diff<span class="token punctuation">(</span>out<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> Ti <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        singleTest<span class="token punctuation">(</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> specialJudge<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Failed in #</span><span class="token interpolation"><span class="token punctuation">{</span>Ti<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Check #</span><span class="token interpolation"><span class="token punctuation">{</span>Ti<span class="token punctuation">}</span></span><span class="token string">: Good!'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Check over!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No difference found!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mars-jar"><a href="#Mars-jar" class="headerlink" title="Mars.jar"></a>Mars.jar</h3><p>这个就不展开讲了。发在讨论区和 <code>github</code>了。</p><p>只不过目前 <code>$gp,$sp </code>还没有改，会每次赋得初值（而非 <code>0</code>），所以上面那个 <code>python</code> 脚本也没有生成这两个指令相关代码。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li><p>阅读下面给出的 DM 的输入示例中（示例 DM 容量为 4KB，即 32bit × 1024字），根据你的理解回答，这个 addr 信号又是从哪里来的？地址信号 addr 位数为什么是 [11:2] 而不是 [9:0] ？</p><p><img src="https://s2.loli.net/2022/11/07/GgKZDNaAnstkYu2.png" alt="题目"></p></li></ol><blockquote><p>因为我们的内存是以字为单位寻址的，所以最低两位是无意义的，可以直接舍去。<br><code>addr</code> 端口来源是 <code>GRF[base] + imm</code>，而且由于 <code>MIPS</code> 只用这种访问内存方式，所以只可能是这个值。</p></blockquote><ol start="2"><li><p>思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣。</p><blockquote><p><strong>指令对应的控制信号如何取值</strong>：从指令出发，是正向思维，列表简单高效，查指令集即可获取表格</p><p><strong>控制信号每种取值所对应的指令</strong>：调试是可以看到波形图获取执行的指令是什么，方便快捷。麻烦是获取表格是逆向思维，比较繁琐。</p></blockquote></li><li><p>在相应的部件中，复位信号的设计都是<strong>同步复位</strong>，这与 P3 中的设计要求不同。请对比<strong>同步复位</strong>与<strong>异步复位</strong>这两种方式的 reset 信号与 clk 信号优先级的关系。</p><blockquote><p><strong>同步复位</strong>：clk 信号具有高优先级。如果 reset 信号在 clk 的上升沿以外的时候为高电平，那么是起不到任何作用的。</p><p><strong>异步复位</strong>：reset 信号具有高优先级。无论 clk 信号处于什么阶段，只要 reset 信号来临，就必须进行重置操作。</p></blockquote></li><li><p>C 语言是一种弱类型程序设计语言。C 语言中不对计算结果溢出进行处理，这意味着 C 语言要求程序员必须很清楚计算结果是否会导致溢出。因此，如果仅仅支持 C 语言，MIPS 指令的所有计算指令均可以忽略溢出。 请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的。提示：阅读《MIPS32® Architecture For Programmers Volume II: The MIPS32® Instruction Set》中相关指令的 Operation 部分。</p><blockquote><p>参考指令集如下：<br><img src="https://s2.loli.net/2022/11/07/UmLHcl4GNhbQsIi.png" alt="指令集"><br><img src="https://s2.loli.net/2022/11/07/w6TdKhHrousYLn8.png" alt="指令2"></p><p>显然除了检测溢出，<code>add</code> 和 <code>addu</code> 执行的操作时一模一样的，<code>addi</code> 和 <code>addiu</code> 执行的操作也是一致的，对立即数都是符号扩展。</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented 2023 第一单元总结</title>
    <link href="https://toby-shi-cloud.github.io/posts/oounit1.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oounit1.html</id>
    <published>2023-03-18T20:00:00.000Z</published>
    <updated>2023-03-18T20:00:10.189Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一单元作业主要要求是进行表达式化简。一共三次作业。第一次是较为简单的表达式，只涉及一层括号，加减乘和乘方。第二次作业增加了三角函数和嵌套括号。第三次作业增加了求导因子。</p><p>总结一下我的成果，很高兴在没有出现任何 Bug 的情况下通关第一单元，当然这很大程度上要归功于搭建了评测机。搭建一个好的评测机，一个人的努力是不够的，所以我在 GitHub 上开了一个私有的仓困，并邀请了几个朋友一起参与开发。当然了最后还是我写了绝大部分，有的朋友只是在白嫖，甚至还有的连白嫖都没有学会。但是也要感谢所有做出贡献的朋友，帮我发现了几个 Bug，还让我成功的 Hack 到了房友。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>一个好的架构是整个项目成功的关键。<a href="https://toby-shi-cloud.github.io/posts/oohw1.html">第一次作业</a>时我的架构就不太理想，十分混乱。于是在第二次作业中狠心重构。于是在效率和复杂度上都得到了极大层度的提升。</p><p>老师说很多同学的 Bug 都是因为深浅拷贝处理不当。所以我重构后的第二次作业，不再进行任何拷贝，一是减少了深拷贝开销，而是也不需要考虑拷贝出错的问题。</p><p>下面是我的架构的 UML 图：</p><p><img src="https://s2.loli.net/2023/03/19/ADxSkIsu1y25cr3.png" alt="UML"></p><p>简而言之，我所有的表达式相关类都是不可被 public 方法修改的，所有计算都将生成新的表达式。这样就不存在拷贝的问题了。当然了频繁运算会带来海量开销，所以我引入了 <code>ExpressionBuilder</code> 类，可以支持表达式加法，方法是直接修改，而不是拷贝。<code>Expression</code> 和 <code>ExpressionBuilder</code> 之间的关系是仿照 <code>String</code> 和 <code>StrinBuilder</code> 建立的。</p><p>另外，为了方便三角函数化简的实现，我的表达式存储方式是 <code>整式*若干项三角函数+...+整式*若干项三角函数</code>，这样就可以把三角函数单独拿出来化简了。</p><h2 id="评测机"><a href="#评测机" class="headerlink" title="评测机"></a>评测机</h2><p>使用 sympy 进行评测。使用递归下降和正则表达式 check 表达式的合法性。使用递归下降 generate 数据。这些都是较为常规的思路，就不再赘述了。</p><p>特别的一点是，我挑选出几十组特殊的数据，然后每次在本地评测后都将评测记录上传到云端，然后从云端索取当前最好的有效长度，以此为依据计算性能分。这在第一次作业还是发挥了一些作用，后续作业中，由于我们开发小组的集体摆烂式优化，所以大家都没那么在乎性能分，这个功能也就没有发挥出太大作用了。</p><h2 id="得分"><a href="#得分" class="headerlink" title="得分"></a>得分</h2><ul><li>作业 1，强测 100 分，互测 +0 分；</li><li>作业 2，强测 97.9019 分，互测 8.5 分；</li><li>作业 3，强测 94.5088 分，互测 10.5 分。</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p><img src="https://s2.loli.net/2023/03/18/SsZax1IyVFAXMDl.png" alt="Contributors"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac launchctl 自动后台任务</title>
    <link href="https://toby-shi-cloud.github.io/posts/mac-launchctl-auto-background-task.html"/>
    <id>https://toby-shi-cloud.github.io/posts/mac-launchctl-auto-background-task.html</id>
    <published>2023-03-10T11:00:00.000Z</published>
    <updated>2023-03-10T18:19:43.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从有了一个 mac mini 后，我就有了一个可以长时间不关机，不移动，不睡眠的主机，或者说，我可以把它当做一个私有的微型服务器。 正如前文所言，这个服务器将会至少运行 Alist 云盘，当然也可以顺便远程 ssh 用于跑代码。</p><p>由于在这个过程中踩了好一些坑，遂写本文记录。</p><h2 id="ssh-排雷"><a href="#ssh-排雷" class="headerlink" title="ssh 排雷"></a>ssh 排雷</h2><p>mac 是有集成 ssh 的，所以只需要在系统设置中打开 22 端口的远程登录权限就可以 ssh 连接上了。</p><p>可是因为我 ssh 连接 GitHub 的时候遇到了 <code>kex_exchange_identification error</code>，所以尝试了更改 sshd 的配置。不过有一回改配置改炸掉了，GitHub 能连接上了，但是其他设备连接本机却出现了 <code>kex_exchange_identification error: connection reset</code>。</p><p>我尝试了很多种方法，包括检查白名单黑名单等等，Google 和 StackOverflow 都搜索过，但是一直没有解决问题。</p><p>后来偶然有一天我想到，如果能直接输出 ssh 的日志不就能知道有什么问题了吗！</p><p>果然，我在 Stack Overflow 上搜索 <code>mac ssh log</code>，找到了 <a href="https://stackoverflow.com/questions/43382825/where-to-find-sshd-logs-on-macos-sierra">logging - Where to find sshd logs on MacOS sierra - Stack Overflow</a>。第一高赞回答 (by <a href="https://stackoverflow.com/users/10900895/jerrythea">jerrythea</a>) 就完美解决了我的问题。</p><p>当我获取到日志信息后，立马就发现了问题所在：sshd_config 配置重复定义了一个量！删掉这一行后，ssh 立马恢复正常！</p><h2 id="launchctl-排雷"><a href="#launchctl-排雷" class="headerlink" title="launchctl 排雷"></a>launchctl 排雷</h2><p>在上一篇文章配置 Alist 的时候，配置了守护进程，不过我确实觉得那个守护进程好像根本没有作用。于是就长期把 Alist 挂在前台（我还以为只能这样）。</p><p>后来我在设置一个定时任务的时候，就发现了大问题。不仅定时无效，而且 <code>launchctl start</code> 也不能正常运行。</p><p>遂上网搜索，在知乎上找到一篇非常完美的回答 <a href="https://zhuanlan.zhihu.com/p/388287366">Mac 使用 Launchctl 设置后台定时任务无效的解决方法 - 知乎</a>。其中最最关键的一步就是下载一个 <code>launchcontrol</code> 检测和管理所有的 <code>launchctl tasks</code>。</p><p>使用 mac 的 homebrew 安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> launchcontrol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>又是瞬间发现问题瞬间觉悟！</p><p>这下我不仅定时任务成功了，Alist 也不用挂前台了，cpolar 也可以长期运行了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://stackoverflow.com/questions/43382825/where-to-find-sshd-logs-on-macos-sierra">logging - Where to find sshd logs on MacOS sierra - Stack Overflow</a></li><li><a href="https://zhuanlan.zhihu.com/p/388287366">Mac 使用 Launchctl 设置后台定时任务无效的解决方法 - 知乎</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Shell" scheme="https://toby-shi-cloud.github.io/categories/Shell/"/>
    
    
    <category term="Apple" scheme="https://toby-shi-cloud.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented 2023 作业 1</title>
    <link href="https://toby-shi-cloud.github.io/posts/oohw1.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oohw1.html</id>
    <published>2023-02-28T07:00:00.000Z</published>
    <updated>2023-02-28T07:16:40.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>由于目前距离第一单元作业结束还有很久很久，所以本文会较为简略的描述我的思路架构和测试。还请诸位谅解。</p><h2 id="思路和架构"><a href="#思路和架构" class="headerlink" title="思路和架构"></a>思路和架构</h2><p>总体而言，思路和架构都可以大部分模仿 Training （两个 Training，一个是 正则表达式/逆波兰表达式，一个是 递归下降）我模仿的第二个。我的思路是一个 Lexer 分析 Token， 一个 Parser 解析字符串，最后 Simplifie 一下表达式就可以了。</p><h3 id="主要类结构"><a href="#主要类结构" class="headerlink" title="主要类结构"></a>主要类结构</h3><ol><li>BaseExpr - interface - 基类。</li><li>Expression - 存储由 Parser 分析而来的，由 Term 构成的表达式</li><li>Term - 储存由 Parser 分析而来的，由 Factor 构成的表达式</li><li>Factor - 储存由 Parser 分析而来的，由 <code>base ** index</code> 构成，其中 base 可能是 Expression，Constant，或 Variable。</li><li>Lexer - 词法分析</li><li>Parser - 表达式解析</li><li>Simple - 化简表达式</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>自动化测试真好用。所以强烈建议大家都去自己写一下。如果自己不能写的话，记得请一个会写的大佬吃饭（确信）。</p><h3 id="正确性测试"><a href="#正确性测试" class="headerlink" title="正确性测试"></a>正确性测试</h3><p>第一单元作业是表达式化简。人生苦短，我用 Python。<code>sympy</code> 库可以非常非常方便的帮助你验证两个表达式是否是等价的（唯一需要注意的是需要去除前导零）。</p><p>这里就贴个代码给大家参考参考吧（应该很好理解吧？）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_leading_zero</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Delete leading zero"""</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\D)0+(\d)'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\g&lt;1&gt;\g&lt;2&gt;'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    s1 - input str; s2 - output str;    return True if s1 == s2 else False    """</span>    <span class="token keyword">if</span> <span class="token string">'('</span> <span class="token keyword">in</span> s2 <span class="token keyword">or</span> <span class="token string">')'</span> <span class="token keyword">in</span> s2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ifunc <span class="token operator">=</span> sympy<span class="token punctuation">.</span>sympify<span class="token punctuation">(</span>parse_leading_zero<span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span>        ofunc <span class="token operator">=</span> sympy<span class="token punctuation">.</span>sympify<span class="token punctuation">(</span>parse_leading_zero<span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> ifunc<span class="token punctuation">.</span>equals<span class="token punctuation">(</span>ofunc<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span> <span class="token comment"># sympify error</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能分测试"><a href="#性能分测试" class="headerlink" title="性能分测试"></a>性能分测试</h3><p>本次作业性能分可以理解为输出的化简后表达式越短分越高。不过由于你的表达式是否短取决于是否有其他同学比你更短。所以我们需要一个数据库保存大家测试的结果，然后找出每组数据最短的表达式的长度是多少，借此评估性能分。</p><p>这里我采用了 Lean Cloud 的免费数据库来储存数据，然后将测试脚本发给多人进行测试，这样下来，大家都知道自己的性能分处于什么水平了（当然这要求你的朋友们中都是些大佬）。</p><p>获得到得分后的计算就按照指导书中所述就可以啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_grade</span><span class="token punctuation">(</span>lp<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> lmin<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> lp <span class="token operator">/</span> lmin    <span class="token keyword">if</span> x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> base    <span class="token keyword">elif</span> x <span class="token operator">&gt;=</span> <span class="token number">1.5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0.0</span> <span class="token operator">*</span> base    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">31.8239</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">155.9038</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">279.2180</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">214.0743</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">57.9370</span><span class="token punctuation">)</span> <span class="token operator">*</span> base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lean Cloud 的使用方法可以参考官方文档，这里就不详细介绍了。大家也可以使用其他数据库。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> leancloudleancloud<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token string">'appID'</span><span class="token punctuation">,</span> <span class="token string">'appKey'</span><span class="token punctuation">)</span>HW1 <span class="token operator">=</span> leancloud<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'HW1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>sh<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query <span class="token operator">=</span> HW1<span class="token punctuation">.</span>query    query<span class="token punctuation">.</span>equal_to<span class="token punctuation">(</span><span class="token string">'hash'</span><span class="token punctuation">,</span> sh<span class="token punctuation">)</span>    data_list <span class="token operator">=</span> query<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        last_length <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'lmin'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> last_length <span class="token operator">&gt;</span> length<span class="token punctuation">:</span>            data<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'lmin'</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> length        <span class="token keyword">return</span> last_length    <span class="token keyword">else</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> HW1<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'hash'</span><span class="token punctuation">,</span> sh<span class="token punctuation">)</span>        data<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'lmin'</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>        data<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h3><p>随机生成器通常就按照指导书上的介绍一一生成就可以了。框架如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Generators</span><span class="token keyword">def</span> <span class="token function">white_space_term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX_SINGLE_WHITE_SPACE_LENGTH<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>choice<span class="token punctuation">(</span>WHITE_SPACE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">integer_with_leading_zeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> MAX_INTEGER_LENGTH<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>choice<span class="token punctuation">(</span>DIGIT<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">integer_with_signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> choice<span class="token punctuation">(</span>PLUS_MINUS <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> integer_with_leading_zeros<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exponent</span><span class="token punctuation">(</span>smaller<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> smaller<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'**'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>INDEX<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'**'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>INDEX<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">power_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> PROBABILITY_OF_POWER_WITHOUT_EXPONENT<span class="token punctuation">:</span>        <span class="token keyword">return</span> choice<span class="token punctuation">(</span>VARIABLES<span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> exponent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> choice<span class="token punctuation">(</span>VARIABLES<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">expression_factor</span><span class="token punctuation">(</span>brackets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> PROBABILITY_OF_EXPRESSION_WITHOUT_EXPONENT<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> expression<span class="token punctuation">(</span>brackets <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> exponent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> expression<span class="token punctuation">(</span>brackets <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token keyword">def</span> <span class="token function">factor</span><span class="token punctuation">(</span>brackets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> brackets <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">&lt;</span> PROBABILITY_OF_CONSTANT_FACTOR<span class="token punctuation">:</span>            <span class="token keyword">return</span> integer_with_signal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> res <span class="token operator">&lt;</span> PROBABILITY_OF_CONSTANT_FACTOR <span class="token operator">+</span> PROBABILITY_OF_VARIABLE_FACTOR<span class="token punctuation">:</span>            <span class="token keyword">return</span> power_function<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> expression_factor<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> PROBABILITY_OF_CONSTANT_FACTOR \                <span class="token operator">/</span> <span class="token punctuation">(</span>PROBABILITY_OF_CONSTANT_FACTOR <span class="token operator">+</span> PROBABILITY_OF_VARIABLE_FACTOR<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> integer_with_signal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> power_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">term</span><span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> factors<span class="token operator">=</span>MAX_FACTOR_PER_TERM<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">/</span> factors<span class="token punctuation">:</span>        <span class="token keyword">return</span> choice<span class="token punctuation">(</span>PLUS_MINUS <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> factor<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> term<span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> factors <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> factor<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">expression</span><span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> terms<span class="token operator">=</span>MAX_TERM_PER_EXPRESSION<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">/</span> terms<span class="token punctuation">:</span>        <span class="token keyword">return</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>PLUS_MINUS <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> term<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> expression<span class="token punctuation">(</span>brackets<span class="token punctuation">,</span> terms <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> choice<span class="token punctuation">(</span>PLUS_MINUS<span class="token punctuation">)</span> \               <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> term<span class="token punctuation">(</span>brackets<span class="token punctuation">)</span> <span class="token operator">+</span> white_space_term<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强测和互测"><a href="#强测和互测" class="headerlink" title="强测和互测"></a>强测和互测</h2><p>强测和互测均没有出现 bug。甚至更离谱的是，互测整个 room 都没有发现 bug。</p><p>不过根据其他同学反馈的信息，有一些数据值得一试：</p><ol><li><code>-1</code>（单独的数字）</li><li><code>0*x**0</code>（零的零次幂以及零乘以零次幂）</li><li><code>1+2+3\t  \t \t\t</code>（尾随空白符）</li><li><code>(x+y+z)**8</code>（几千项的展开）</li><li><code>---1</code>（多重符号）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用 Alist 和 IPV6 搭建私有云盘</title>
    <link href="https://toby-shi-cloud.github.io/posts/alist-with-ipv6.html"/>
    <id>https://toby-shi-cloud.github.io/posts/alist-with-ipv6.html</id>
    <published>2023-02-21T12:00:00.000Z</published>
    <updated>2023-02-21T15:00:59.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>拥有多个设备的人总是会担心数据同步问题，这也是为什么Apple生态显得那么的出色。可是当你既拥有Windows又拥有Mac的时候，文件同步就困难了起来，特别是两台电脑还不在同一个局域网内时。</p><p>因此我虽然很早就在考虑搭建云盘，但是直到我拥有了Mac我才觉得这件事情非常非常急迫。于是我花了一个下午找到了一个合适的开源私有云——Alist。</p><p>当然仅搭建了一个网站是不够的，还需要做内网穿透，我尝试了cpolar，但是速度实在太慢了。不过好在我们学校校园网有IPV6，这就是得设备之间的直连成为可能。</p><p>下图是完工后的样子。真好看啊。</p><p><img src="https://s2.loli.net/2023/02/21/1NHDF4RBWeVPSM8.png"></p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>整个搭建的过程算是十分的轻松加愉快的。因为Alist的官方文档实在是太详细了。</p><p>Alist官网：<a href="https://alist.nn.ci/">https://alist.nn.ci</a></p><p>Alist官方文档：<a href="https://alist.nn.ci/guide/">https://alist.nn.ci/guide/</a></p><p>Alist官方GitHub Release：<a href="https://github.com/Xhofe/alist/releases">https://github.com/Xhofe/alist/releases</a></p><p>安装流程如下：</p><ol><li><p>前往官方<a href="https://github.com/Xhofe/alist/releases">GitHub Release</a>下载最新版。</p><blockquote><p>Mac的话下载Darwin版的，M系列芯片选arm64，Intel芯片选amd64</p><p>安装在服务器或者linux上就选linux的就好</p><p>Windows的也有对应的版本</p></blockquote></li><li><p>对着<a href="https://alist.nn.ci/guide/install/manual.html">教程</a>run一边。</p></li><li><p>Daemon是守护进程的意思，避免进程被杀死，推荐也弄一弄。</p></li><li><p>打开<a href="http://localhost:5244，登陆admin账号开始配置。">http://localhost:5244，登陆admin账号开始配置。</a></p></li><li><p>首先当然是进行存储的配置，安装教程Storage相关的内容配置就可以啦。</p></li></ol><p><img src="https://s2.loli.net/2023/02/21/Uvkx21BqEfZ7Plp.png"></p><ol start="6"><li>然后“索引”可以配置一下，这样可以Ctrl+K或者Command+K搜索。</li><li>最后点击主页就可以开始使用了！</li></ol><h2 id="内网穿透和IPV6"><a href="#内网穿透和IPV6" class="headerlink" title="内网穿透和IPV6"></a>内网穿透和IPV6</h2><p>然而云盘搭建好后，其他电脑还是无法访问。因为两个电脑不在同一个局域网内，服务端又没有公网IP。</p><p>那么就有两种选择，一种是内网穿透，另一种是IPV6直连。</p><p>先说内网穿透，我尝试了免费的内网穿透工具cpolar，成功了，但是效果不太理想，因为cpolar的带宽实在是太低了，用作网页还好，用作云盘……100kb的速度实在不能接受，比度盘还差劲。</p><p>剩下的就是IPV6，这个很简单，IPV6是给每个电脑都分配了唯一地址，所以直接查到本机的IPV6地址就可以访问了。如果你的地址是2aaa:bbb:ccc:ddd:eee:fff:555:666，那么在地址栏输入http://[2aaa:bbb:ccc:ddd:eee:fff:555:666]:5244这样的就可以啦。</p><p>不过我听说需要配置一下光猫的防火墙才行。不过我两台电脑都在校园网里面就不用管这个了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="私有云" scheme="https://toby-shi-cloud.github.io/categories/%E7%A7%81%E6%9C%89%E4%BA%91/"/>
    
    
    <category term="私有云" scheme="https://toby-shi-cloud.github.io/tags/%E7%A7%81%E6%9C%89%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>你好博客 2 ？Hello Again?</title>
    <link href="https://toby-shi-cloud.github.io/posts/helloblog2.html"/>
    <id>https://toby-shi-cloud.github.io/posts/helloblog2.html</id>
    <published>2023-01-02T08:00:00.000Z</published>
    <updated>2023-01-02T09:35:31.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次改动的主要目的是提供一个 oopre 的题面查看和数据下载的方式。正好借此机会进一步的了解 hexo 博客的构建机制，为未来的改动打下基础。</p><h2 id="想要做的事儿"><a href="#想要做的事儿" class="headerlink" title="想要做的事儿"></a>想要做的事儿</h2><p>想法是开一个子页面 oopre，然后 index 就是一个介绍，给出每次作业的链接。然后其下的页面就是每次作业，再在每次作业最后加上一个下载数据链接即可。</p><h2 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h2><p>这下我基本上是理解了 hexo 的构建思路。首先就是所有的东西都储存在 source 这个目录下（当然可以在 hexo 的 config 里面更改），然后渲染后的成品放在 public 目录下，最后 push 到 github 时，把 public 目录下的东西覆盖 .deploy_git 然后发布即可。所以实际上 github 仓库内容是和 .deploy_git 目录同步的，.deploy_git又是来自 public 的，public 则是由 source 渲染得到的。</p><p>下面重点说一下渲染过程。首先检查 hexo 的 config 下的 <code>skip_render</code> 变量，这个数组里面的内容是绝对不用渲染，会直接复制进 public 目录。（小贴士：** 表示递归遍历文件夹下所有文件和文件夹）然后其他在 source 目录下的文件均会被渲染。渲染方式是首先看 md 文件头部有没有 <code>layout</code> 变量，有 <code>layout</code> 的，在主题目录里的 <code>layout</code> 目录下找到对应的 layout 文件渲染，否则一律按照 posts 渲染。至于 source 目录里两个下划线开头的目录，显然有特殊用处的嘛……</p><p>理解这些简单 Hexo 渲染流程之后，魔改就比较简单了，虽然我还不是很会写网页……</p><h2 id="关于这次的改动"><a href="#关于这次的改动" class="headerlink" title="关于这次的改动"></a>关于这次的改动</h2><p>这次的改动的话主要是新增了 oopre 相关的几个 ejs 文件。</p><ol><li>用于 index 的 <code>oopre.ejs</code>，这个主要功能是网页重定向，重定向至介绍 oopre 的那篇博客。</li><li>用于展示题面的 <code>oopre_hw.ejs</code>，主要由 <code>post.ejs</code> 复制而来，主要改动就是去除了一些不需要的判断语句，另外把内容页换成了 <code>oopre-detail-toc.ejs</code>。</li><li><code>_partial/oopre-detail-toc.ejs</code>，从 <code>_partial/post-detail-toc.ejs</code> 复制而来。主要改动就是把 <code>_partial/post-detail.ejs</code> 换成了 <code>_partial/oopre-detail.ejs</code>。</li><li><code>_partial/oopre-detail.ejs</code>，改动主要是 tag 和 category 恒定为 <code>oopre</code>，然后超链接恒为 <code>/oopre</code>。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>网页重定向：<a href="https://blog.csdn.net/penngrove/article/details/6933860">https://blog.csdn.net/penngrove/article/details/6933860</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://toby-shi-cloud.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="网页" scheme="https://toby-shi-cloud.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>2022年 C++（即oopre）作业自测</title>
    <link href="https://toby-shi-cloud.github.io/posts/oopre2022selftest.html"/>
    <id>https://toby-shi-cloud.github.io/posts/oopre2022selftest.html</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-01-03T06:13:21.557Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言-amp-注意事项"><a href="#前言-amp-注意事项" class="headerlink" title="前言 &amp; 注意事项"></a>前言 &amp; 注意事项</h2><ol><li><p>所有数据均为官方输入+我的 AC 输出。</p></li><li><p>由于第一单元输出的浮点数采用<strong>误差比较</strong>，所以您的答案和我不同也可能是正确的。</p><blockquote><p>您可以考虑自行写一个评测机进行误差比较。</p></blockquote></li><li><p>数据可能不全。通过所有测试点也并不代表您的程序没有问题。</p></li><li><p>本网站没有设置任何自动化评测。</p></li><li><p>推荐大家同时熟悉 Git 的使用。</p></li><li><p>请养成良好的代码风格。这是有分的！</p></li></ol><h2 id="作业框架-amp-题面导航"><a href="#作业框架-amp-题面导航" class="headerlink" title="作业框架 &amp; 题面导航"></a>作业框架 &amp; 题面导航</h2><p>作业分为四个单元，第零单元，第一单元，第二单元，第三单元，其中第一和第二单元均有三次练习，为迭代开发。</p><table>    <tbody><tr> <th> 第零单元 </th> <td> 作业 0 </td> <td> <a href="../oopre/hw0"> hw0 </a> </td> </tr>    <tr> <th rowspan="3"> 第一单元 </th> <td> 作业 1 </td> <td> <a href="../oopre/hw1"> hw1 </a> </td> </tr>    <tr> <td> 作业 2 </td> <td> <a href="../oopre/hw2"> hw2 </a> </td> </tr>    <tr> <td> 作业 3 </td> <td> <a href="../oopre/hw3"> hw3 </a> </td> </tr>    <tr> <th rowspan="3"> 第二单元 </th> <td> 作业 4 </td> <td> <a href="../oopre/hw4"> hw4 </a> </td> </tr>    <tr> <td> 作业 5 </td> <td> <a href="../oopre/hw5"> hw5 </a> </td> </tr>    <tr> <td> 作业 6 </td> <td> <a href="../oopre/hw6"> hw6 </a> </td> </tr>    <tr> <th> 第三单元 </th> <td> 作业 7 </td> <td> <a href="../oopre/hw7"> hw7 </a> </td> </tr></tbody></table><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li><p><code>IDEA</code> 打不开，提示 <code>Internet Error</code>，试试管理员模式运行这个：</p><pre class="line-numbers language-none"><code class="language-none">net stop winnatnet start winnat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关于课程资料：<a href="../oopre/data/course_system_guidebook.zip">下载链接</a></p></li><li><p>这里有一个简单的 <code>Python</code> 评测机供参考：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>src1<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> src2<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    function check - this function is to check whether src2 is the same as src1 within acceptable error.        param src1 - standard answer split by '\\n'    param src2 - your answer split by '\\n'    '''</span>    <span class="token keyword">while</span> src1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        src1 <span class="token operator">=</span> src1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> src2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        src2 <span class="token operator">=</span> src2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>src1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>src2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Your answer is too long/short.'</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>src1<span class="token punctuation">,</span> src2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Your answer is too long/short on line </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span>        <span class="token keyword">for</span> e1<span class="token punctuation">,</span> e2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> e1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">','</span> <span class="token keyword">or</span> e1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> e1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> e2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Your answer differs from the standard answer on line </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span>                e1 <span class="token operator">=</span> e1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                e2 <span class="token operator">=</span> e2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> e1 <span class="token operator">==</span> e2<span class="token punctuation">:</span> <span class="token keyword">continue</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                n1 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>                n2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1e-5</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>            <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Your answer differs from the standard answer on line </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">.'</span></span>    <span class="token keyword">return</span> <span class="token string">'Your answer is correct!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计组实验的回顾</title>
    <link href="https://toby-shi-cloud.github.io/posts/coreview.html"/>
    <id>https://toby-shi-cloud.github.io/posts/coreview.html</id>
    <published>2022-12-17T16:00:00.000Z</published>
    <updated>2022-12-29T07:57:31.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="「总结」"><a href="#「总结」" class="headerlink" title="「总结」"></a>「总结」</h2><p><img src="https://s2.loli.net/2022/12/29/rDpC9cK2unPEgFT.png"></p><p>清一色的「通过」。</p><p>可惜没有考 P8。还是太摆烂啦！</p><p>虚假的原因：考期了。</p><p>真实的原因：肝原！</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="快速变换模块声明为模块实例"><a href="#快速变换模块声明为模块实例" class="headerlink" title="快速变换模块声明为模块实例"></a>快速变换模块声明为模块实例</h3><p>从使用 Verilog 搭建 CPU 开始，我们就会遇到许多很长很长的模块定义，这个时候由于除了虚拟机上的 Sublime 以外，都没有自动生成模块实例的方式，手动将 <code>input [31:0] addr</code> 之类的模块声明转换为 <code>.addr(addr)</code> 之类的实例声明很困难。有没有什么快速的方案呢？当然是有的。使用正则表达式替换即可。</p><p>如在 VSCode 中：<br>查找 <code>(input|output)\s*(\[.*?\])?\s*(\w+?)(,|\n)</code> 替换为 <code>.$3($3)$4</code> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>BUAA Tools 使用文档</title>
    <link href="https://toby-shi-cloud.github.io/posts/buaatoolsusage.html"/>
    <id>https://toby-shi-cloud.github.io/posts/buaatoolsusage.html</id>
    <published>2022-11-19T15:30:00.000Z</published>
    <updated>2022-11-26T13:32:07.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本使用指南以 iPad 界面为主。在 iPhone 上使用体验略有不同。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p>如下图所示，登录界面简单而明显。输入您的统一身份认证的学号和密码即可登录。</p><p><img src="https://s2.loli.net/2022/11/19/Nv69iU8puTFcJeq.jpg"></p><p><strong>Feature</strong></p><ul><li>对于密码错误和网络错误都会给予相应的提示。</li><li>可以使用 iCloud 钥匙串自动填充学号密码。</li><li>仅首次启动或手动退出登录后需要登录，再次启动 App 可以自动登录。</li></ul><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p>左侧导航栏会显示信息概览。默认顺序依次为 校园网流量，TD 次数，校园卡余额，健康打卡状态，核酸排队情况。</p><p><img src="https://s2.loli.net/2022/11/20/LYPOgs2BD7R6vlt.png"></p><p><strong>Feature</strong></p><ul><li>导航栏可以简单概览目前状态。</li><li>点击导航栏可以查看详细页面。</li><li>导航栏顺序可以设置。</li></ul><h3 id="详细视图"><a href="#详细视图" class="headerlink" title="详细视图"></a>详细视图</h3><p>大部分视图即为对应的官网。这里以点击每日健康打开为例。</p><p><img src="https://s2.loli.net/2022/11/20/N9DizKRXYkrVoCc.png"></p><p><strong>Feature</strong></p><ul><li>会主动询问是否允许访问位置。</li><li>拥有与微信小程序或智慧北航一致的行为。</li><li>可以交互的真实网页。</li></ul><h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p>可以调整视图顺序和对一些特定视图进行设置。设置界面由右上角任务图像唤出。</p><p><img src="https://s2.loli.net/2022/11/20/wYbV4vImtThN5Cq.png"></p><p><strong>Feature</strong></p><ul><li>自由调整其中的任何设置。</li><li>醒目的退出登录标识。</li><li>可以取消设置。</li></ul><h3 id="其他-Feature"><a href="#其他-Feature" class="headerlink" title="其他 Feature"></a>其他 <strong>Feature</strong></h3><ul><li>自由的在深色主题和浅色主题之间切换（跟随系统）。</li><li>自适应屏幕大小变化（支持台前调度的各个大小）。</li><li>可在  iPhone，iPad，以及 Mac 上运行。[^1]</li></ul><p>[^1]: 仅支持 iOS 16，iPadOS 16，或 macOS 13 及以上</p><p><img src="https://s2.loli.net/2022/11/20/bkFj7oVvKGdsqAy.png"></p><p><img src="https://s2.loli.net/2022/11/20/Lh62XHpnR1FPWkQ.jpg"></p><h2 id="从源代码安装"><a href="#从源代码安装" class="headerlink" title="从源代码安装"></a>从源代码安装</h2><ol><li>打开 <code>Xcode</code> 点击<code>Xcode-Preferences</code>或者使用快捷键<code>command+,</code>打开偏好设置，在 <code>Accounts</code> 中添加自己的 <code>AppleID</code>，添加成功后关闭偏好设置。</li><li>在左侧视图中点击App的名称，选中<code>signing &amp; Capabilities</code>，在 <code>Signing</code> 栏的 <code>Development Team</code> 中选中自己 <code>AppleID</code> 的名字。</li><li>鼠标悬停在中间正上方，会出现为什么构建应用程序，选中Any iOS Device，然后点击菜单栏<code>Product-Archive</code>。</li><li>在弹出菜单出选择 <code>Distribute App</code>，选择 <code>Development</code>，然后一路 <code>Next</code> 下去，就可以看到在相同目录下生成了一个文件夹，点开文件夹，就可以得到由你自己签名的 <code>ipa</code> 安装包。</li><li>自签安装包是可以安装使用的，但是有效期只有 7 天。因此可以考虑使用 <code>AltStore</code> 等自签工具来完成续签。<code>AltStore</code> 使用方法详见<a href="https://altstore.io/">官网</a>。</li></ol><h2 id="从-ipa-安装"><a href="#从-ipa-安装" class="headerlink" title="从 ipa 安装"></a>从 ipa 安装</h2><ol start="0"><li>安装前请确保您的设备在 iOS 16，iPadOS 16，或 macOS 13 及以上</li><li>从 <a href="https://github.com/Toby-Shi-cloud/BUAA-Tools/releases/">GitHub</a> 上下载 最新 ipa 文件，或者直接点击<a href="https://github.com/Toby-Shi-cloud/BUAA-Tools/releases/download/v1.0/BUAA-Tools.ipa">此链接</a>下载 1.0 版本</li><li>推荐使用 <a href="https://altstore.io/">AltSotre</a> 侧载</li><li>记得定期重签名</li><li>Enjoy BUAA Tools</li></ol><h2 id="AltStore-侧载方法"><a href="#AltStore-侧载方法" class="headerlink" title="AltStore 侧载方法"></a>AltStore 侧载方法</h2><ol><li>在电脑上安装 Alt Server，下载链接：<a href="https://altstore.io/">https://altstore.io/</a></li><li>将要 IOS 设备连接到电脑，然后使用 Alt Server 为 IOS设备安装 Alt Store</li><li>通常会要求你输入 Apple ID，因为任何 App 都需要 Apple ID 进行签名</li><li>如果不信任 AltStore 可以考虑重新注册一个新的 Apple ID 专门用于签名</li><li>在 IOS 设备上信任开发者（设置 - 通用 - VPN与设备管理）</li><li>打开 IOS 设备上的 AltStore，My Apps 栏中点击加号，选中 ipa 文件安装</li><li>注意需要在 7 天之内再次打开 AltStore 进行再次签名</li><li>签名时，必须要通过局域网或有线连接到装有 AltServer 的电脑（注意：北航校园网并非局域网）</li><li>如果忘记签名，IOS 提示应用不再可用，重新连接电脑安装 AltStore 然后再次给侧载应用签名即可</li></ol><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>特别感谢对本软件的提供建议或帮助的所有人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Swift编程" scheme="https://toby-shi-cloud.github.io/categories/Swift%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Swift" scheme="https://toby-shi-cloud.github.io/tags/Swift/"/>
    
    <category term="Apple" scheme="https://toby-shi-cloud.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>从教务网站上获取课表并导入iCloud日历</title>
    <link href="https://toby-shi-cloud.github.io/posts/cdutcmcalendar.html"/>
    <id>https://toby-shi-cloud.github.io/posts/cdutcmcalendar.html</id>
    <published>2022-10-14T20:30:00.000Z</published>
    <updated>2022-10-15T03:44:35.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为我家羽羽说她的课表一天一个样，每次都手动输入到日历中的话非常不方便，所以我打算帮她把课表从教务网站上爬出来，然后写在ics文件中，这样就可以一键导入了。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>打开他们学校的教务网站，我就麻了，因为必须要输入验证码。这对自动化脚本来说是一个非常阴间的事情，所以考虑使用<code>selenium</code>，打开网页后，人工登录，程序检测到网页跳转后开始运行。</p><p>登录完成后就可以看到课表，默认是月课表，所以只需要让脚本自己翻页然后读取网页全部内容即可。通过<code>F12</code>，我们可以看到那些写着有课程信息的元素大致长什么样子，使用正则表达式即可爬取所有课程了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在经历了漫长了写代码过程之后，终于到了运行的时候啦！看到一个程序能跑起来，真的是很开心的一件事！（大家也可以尝试复制下面的<code>代码</code>，自己运行试试看）</p><p>如果读者想要运行以下代码，需要进行下列步骤：</p><ol><li>安装一个Python（这不是废话吗，建议是3.6以上，我自己用的3.10）</li><li>安装<code>icalendar</code>和<code>selenium</code>（在命令行执行<code>pip install xxx</code>）</li><li>如果你使用<code>Chrome</code>浏览器，请下载和你的<code>Chrome</code>匹配的<code>chromedriver</code>（见参考链接6），并为<code>chromedriver</code>添加环境变量，或放在脚本所在目录下。</li><li>如果你不使用<code>Chrome</code>浏览器，请自行搜索<code>selenium</code>如何使用你的浏览器（<code>FireFox</code>，<code>Edge </code>和<code>Safari</code>等主流浏览器都是支持的，如果你使用其他浏览器，也可以尝试，因为它们大概率和<code>Google Chrome</code>使用同样的内核，只不过版本较老）另外，不要忘记更改<code>chrome = Chrome()</code>这条语句。</li><li>在脚本所在目录下打开命令行，输入<code>python xxx</code>即可运行（<code>xxx</code>是你的脚本名，通常你应该让后缀是<code>.py</code>）（通常安装python时会关联文件，所以双击运行也不是不可以）</li><li>日程会储存在<code>cdutcm.ics</code>中，许多日历App都支持<code>.ics</code>格式</li></ol><h2 id="配置更改"><a href="#配置更改" class="headerlink" title="配置更改"></a>配置更改</h2><p>有如下内容可能需要更改：</p><ol><li>如果你不是使用的<code>Chrome</code>，更改<code>chrome = Chrome()</code>（第68行）</li><li>默认只会获取课程，而不会获取考试，若要获取考试请更改正则表达式中的<code>上课任务</code>（第32行）</li><li>默认是秋季学期课表，若要获取春季学期课表，更改<code>while month != '八月'</code>和<code>while month != '二月'</code>，交换<code>八月</code>金和<code>二月</code>的位置大概就可以了（第76和83行）</li><li>更改<code>begin_date = datetime(2022, 8, 29, tzinfo=UTC8)</code>中的<code>2022, 8, 29</code>为本学期开学第一周星期一的时间（第97行）</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> re<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token keyword">import</span> icalendar <span class="token keyword">as</span> ics<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timezone<span class="token punctuation">,</span> timedeltaUTC8 <span class="token operator">=</span> timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_event</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> location<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> dtstart<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> dtend<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> description<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ics<span class="token punctuation">.</span>Event<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    create a single icalendar event        :type of params: any Python native type or icalendar property type.    '''</span>    event <span class="token operator">=</span> ics<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'summary'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dtstart'</span><span class="token punctuation">,</span> dtstart<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'dtend'</span><span class="token punctuation">,</span> dtend<span class="token punctuation">)</span>    event<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span>    <span class="token keyword">return</span> event<span class="token keyword">def</span> <span class="token function">get_lesson_from_html</span><span class="token punctuation">(</span>begin_date<span class="token punctuation">:</span> datetime<span class="token punctuation">,</span> html<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> begin_week<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    REGEX <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">r'&lt;a class="fc-day-grid-event fc-h-event fc-event fc-start fc-end" lay-tips="'</span>        <span class="token string">r'&lt;table class=&amp;quot;kb-tips&amp;quot; border=&amp;quot;1&amp;quot;&gt;'</span>        <span class="token string">r'&lt;tr&gt;&lt;th&gt;事件类型：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;上课任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'上课时间：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)--(.*?)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学模式：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学形式：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'星期：&lt;/th&gt;&lt;td&gt;(\d*?)&lt;/td&gt;&lt;th&gt;节次：&lt;/th&gt;&lt;td&gt;\d*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;上课周次：&lt;/th&gt;&lt;td &gt;(\d*?)&lt;/td&gt;&lt;th&gt;'</span>        <span class="token string">r'课序号：&lt;/th&gt;&lt;td&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'课程：&lt;/th&gt;&lt;td  colspan=&amp;quot;3&amp;quot;&gt;\[.*?\]\[.*?\](.*?)\[.*?\]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'授课教师：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'教学场地：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;(.*?)\(?\)?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'上课班级：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'排课/上课：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;.*?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;'</span>        <span class="token string">r'授课内容：&lt;/th&gt;&lt;td colspan=&amp;quot;3&amp;quot;&gt;((.|\n)*?)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" style="background-color: rgb\(\d+, \d+, \d+\);"&gt;'</span>    <span class="token punctuation">)</span>        end_week <span class="token operator">=</span> <span class="token number">0</span>    lessons <span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>REGEX<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>        day <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        week <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> week <span class="token operator">&lt;=</span> begin_week<span class="token punctuation">:</span> <span class="token keyword">continue</span>        end_week <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>end_week<span class="token punctuation">,</span> week<span class="token punctuation">)</span>        today <span class="token operator">=</span> begin_date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span> <span class="token operator">*</span> week <span class="token operator">+</span> day<span class="token punctuation">)</span>        start_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        end_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dtstart <span class="token operator">=</span> today <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span>start_t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dtend <span class="token operator">=</span> today <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span>end_t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        teacher <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        location <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        lessons<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'课程'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span> <span class="token string">'教学场地'</span><span class="token punctuation">:</span>location<span class="token punctuation">,</span> <span class="token string">'开始时间'</span><span class="token punctuation">:</span>dtstart<span class="token punctuation">,</span> <span class="token string">'结束时间'</span><span class="token punctuation">:</span>dtend<span class="token punctuation">,</span> <span class="token string">'教师'</span><span class="token punctuation">:</span>teacher<span class="token punctuation">,</span> <span class="token string">'授课内容'</span><span class="token punctuation">:</span>content<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>lessons<span class="token punctuation">,</span> end_week<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_lesson</span><span class="token punctuation">(</span>begin_date<span class="token punctuation">:</span> datetime<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 第一步获取网页元素</span>    chrome <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://jwweb.cdutcm.edu.cn'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> chrome<span class="token punctuation">.</span>current_url <span class="token operator">!=</span> <span class="token string">'https://jwweb.cdutcm.edu.cn/new/welcome.page'</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 这里需要手动输入账号密码验证码！</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>    iframe <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[3]/div/div/div[2]/div/div/iframe'</span><span class="token punctuation">)</span>    chrome<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>    month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> month <span class="token operator">!=</span> <span class="token string">'八月'</span><span class="token punctuation">:</span>        chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div/button[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>        month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        begin_week <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    lessons <span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">|</span>datetime<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> month <span class="token operator">!=</span> <span class="token string">'二月'</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> chrome<span class="token punctuation">.</span>page_source        lessons_gets<span class="token punctuation">,</span> begin_week <span class="token operator">=</span> get_lesson_from_html<span class="token punctuation">(</span>begin_date<span class="token punctuation">,</span> html<span class="token punctuation">,</span> begin_week<span class="token punctuation">)</span>        lessons <span class="token operator">+=</span> lessons_gets        chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div/button[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 等待加载</span>        month <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'/html/body/div[1]/div/div[1]/div/div/div/div[1]/div[3]/h2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'textContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> lessons<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    calendar <span class="token operator">=</span> ics<span class="token punctuation">.</span>Calendar<span class="token punctuation">(</span><span class="token punctuation">)</span>    calendar<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'2.0'</span><span class="token punctuation">)</span>        begin_date <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>UTC8<span class="token punctuation">)</span>    lessons <span class="token operator">=</span> get_lesson<span class="token punctuation">(</span>begin_date<span class="token punctuation">)</span>        <span class="token keyword">for</span> lesson <span class="token keyword">in</span> lessons<span class="token punctuation">:</span>        name <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'课程'</span><span class="token punctuation">]</span>        location <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'教学场地'</span><span class="token punctuation">]</span>        dtstart <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'开始时间'</span><span class="token punctuation">]</span>        dtend <span class="token operator">=</span> lesson<span class="token punctuation">[</span><span class="token string">'结束时间'</span><span class="token punctuation">]</span>        description <span class="token operator">=</span> <span class="token string">'教师：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lesson<span class="token punctuation">[</span><span class="token string">'教师'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n\n授课内容：\n'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lesson<span class="token punctuation">[</span><span class="token string">'授课内容'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        event <span class="token operator">=</span> create_event<span class="token punctuation">(</span>name<span class="token punctuation">,</span> location<span class="token punctuation">,</span> dtstart<span class="token punctuation">,</span> dtend<span class="token punctuation">,</span> description<span class="token punctuation">)</span>        calendar<span class="token punctuation">.</span>add_component<span class="token punctuation">(</span>event<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'cdutcm.ics'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>to_ical<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/u013670453/article/details/114671299">「Selenium」- 在页面中，点击按钮（或元素）</a></li><li><a href="https://blog.csdn.net/asdfgh0077/article/details/104178416">使用Python在Selenium WebDriver中获取WebElement的HTML源代码</a></li><li><a href="https://wnma3mz.github.io/hexo_blog/2020/09/16/ICS%E5%9C%A8%E7%BA%BF%E8%AF%BE%E8%A1%A8%E5%88%B6%E4%BD%9C/">ICS在线课表制作</a></li><li><a href="https://github.com/wnma3mz/Tools/blob/master/others/myics.py">ICS在线课表制作 源码</a></li><li><a href="https://support.apple.com/zh-cn/HT205018">如果意外地从 iCloud 中删除了日历、书签或通讯录</a></li><li><a href="https://blog.csdn.net/zhoukeguai/article/details/113247342">chromedriver下载与安装方法，亲测可用</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Python" scheme="https://toby-shi-cloud.github.io/tags/Python/"/>
    
    <category term="脚本" scheme="https://toby-shi-cloud.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>CO review：P0</title>
    <link href="https://toby-shi-cloud.github.io/posts/co-p0.html"/>
    <id>https://toby-shi-cloud.github.io/posts/co-p0.html</id>
    <published>2022-10-05T11:05:00.000Z</published>
    <updated>2022-12-17T04:33:36.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="L0-五人投票"><a href="#L0-五人投票" class="headerlink" title="L0 五人投票"></a>L0 五人投票</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>裁判组有一个组长和四个组员（组员编号依次为 <code>2'b00,2'b01,2'b10,2'b11</code>）。<br>每个组员都可以赞成、反对或是弃权。组长还拥有屏蔽投票权：屏蔽一位组员的投票，无论该组员投什么票，都视为弃权。投票的输入信息和输入信号对应如下：</p><table class="toolTable table"><tbody><tr><th>意义</th><th>赞成</th><th>反对</th><th>弃权</th><th>屏蔽投票</th></tr><tr><td>组长</td><td>2'b00</td><td>2'b01</td><td>2'b10</td><td>2'b11</td></tr><tr><td>组员</td><td>2'b00</td><td>2'b01, 2'b11</td><td>2'b10</td><td>-</td></tr></tbody></table><p>当赞成票大于反对票时，表决结果为通过；反之为不通过。</p><h3 id="输入输出描述"><a href="#输入输出描述" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table" style="text-align:center;" <tbody=""><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>LV</td><td>I</td><td>[1:0]</td><td>组长投票</td></tr><tr><td>LI</td><td>I</td><td>[1:0]</td><td>组长屏蔽组员的编号</td></tr><tr><td>T0</td><td>I</td><td>[1:0]</td><td>组员 2'b00 的投票</td></tr><tr><td>T1</td><td>I</td><td>[1:0]</td><td>组员 2'b01 的投票</td></tr><tr><td>T2</td><td>I</td><td>[1:0]</td><td>组员 2'b10 的投票</td></tr><tr><td>T3</td><td>I</td><td>[1:0]</td><td>组员 2'b11 的投票</td></tr><tr><td>O</td><td>O</td><td>-</td><td>表决结果（通过为 1，反之为 0）</td></tr></tbody></table><h3 id="考场思路"><a href="#考场思路" class="headerlink" title="考场思路"></a>考场思路</h3><p>这题几乎就是一个<code>分线器</code>的应用。<br>大概写了 20min 左右。<br>不过呢，为了避免重复四次一样的电路，可以创建一个 circuit 专门用于处理组员投票，注意输入应该是两个，一个投票信号，一个使能端（用于表示组长是否屏蔽了这个人）。</p><h3 id="Bug-分析"><a href="#Bug-分析" class="headerlink" title="Bug 分析"></a>Bug 分析</h3><p>这题又遇到了 logisim 的 bug。有时候连完线发现线红了或者蓝了，还修不好，不过保存后重启解决一切问题。</p><h2 id="L1-文本匹配"><a href="#L1-文本匹配" class="headerlink" title="L1 文本匹配"></a>L1 文本匹配</h2><h3 id="题目概述-1"><a href="#题目概述-1" class="headerlink" title="题目概述"></a>题目概述</h3><p>你需要匹配字符串 0121 和 1210。请使用 Mealy 自动机。<br>输入信号的含义：</p><table class="toolTable table"><tbody><tr><th>2'b00</th><th>2'b01</th><th>2'b10</th><th>2'b11</th></tr><tr><td>0</td><td>1</td><td>2</td><td>不会出现</td></tr></tbody></table><h3 id="输入输出描述-1"><a href="#输入输出描述-1" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table"><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>clk</td><td>I</td><td>-</td><td>时钟信号，在时钟上升沿转移状态</td></tr><tr><td>rst</td><td>I</td><td>-</td><td>异步复位信号</td></tr><tr><td>in</td><td>I</td><td>[1:0]</td><td>当前周期输入</td></tr><tr><td>out</td><td>O</td><td>[1:0]</td><td>0: 无匹配<br>1: 匹配 0121<br>2: 匹配 1210s</td></tr></tbody></table><h3 id="考场思路-1"><a href="#考场思路-1" class="headerlink" title="考场思路"></a>考场思路</h3><p>列出状态转移就可以啦。如下图所示：<br><img src="https://mermaid.ink/img/pako:eNptkjFrwzAQhf-KubHEoKdRQ7107NSOUQZhK60htosjF0rIf88pVqU4nEFgPr177w7dhdqp82ToHFzwb737mt1Q_2o7Vvx1_ezb0E9j9f6xEqWU4WPtaKlpGkv_GIyRMDIGq5HU0AWzGqsaOqvB3sjeqmAwTt6qqNkbyVsV7_3Loarr19ho1t0BX-T0J6BUKkFlKmwhN8RQPSsj1Hl2SQnJM0E8lkMKSjD2WsohpUNKh5QOIR3SmAU-lEOaHdLsGd6DsIVrS3r7NmpTLs2-VWra0eDnwfUdr-4lSiyFbz94S4Z_O390yynEnbiy1C1h-vwbWzJhXvyOlp-uLDuZozud_fUGMpytuQ"></p><ul><li>当 $st=110$ 且 $in=10$ 时，输出 1</li><li>当 $st=011$ 且 $in=00$ 时，输出 2</li><li>其他时候输出 0</li></ul><h3 id="bug-分析"><a href="#bug-分析" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>这个题 WA 了一次，错在串 <code>01210</code>。<br>因为我的 <code>110</code> 在 $in=1$ 时转移去了 <code>001</code> 而不是 <code>011</code>……</p><h2 id="L2-斐波那契数列改"><a href="#L2-斐波那契数列改" class="headerlink" title="L2 斐波那契数列改"></a>L2 斐波那契数列改</h2><h3 id="题目概述-2"><a href="#题目概述-2" class="headerlink" title="题目概述"></a>题目概述</h3><p>数列 ${s_n}$ 定义如下:</p><p>$$<br>s_n =<br>\begin{cases}<br>0 &amp; n=0,2 \\<br>1 &amp; n=1,3 \\<br>s_{n-1} + (s_{n-2} \oplus s_{n-3}) &amp; \text{if $n$ is even} \\<br>(s_{n-1} \oplus s_{n-2}) + s_{n-3} &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p><p>输入 $n$ 输出 $s_n$，时限：64 个周期。</p><h3 id="输入输出描述-2"><a href="#输入输出描述-2" class="headerlink" title="输入输出描述"></a>输入输出描述</h3><table class="toolTable table"><tbody><tr><th>端口名称</th><th>方向</th><th>位宽</th><th>功能</th></tr><tr><td>in</td><td>I</td><td>[4:0]</td><td>输入</td></tr><tr><td>out</td><td>O</td><td>[31:0]</td><td>输出</td></tr></tbody></table><h3 id="考场思路-2"><a href="#考场思路-2" class="headerlink" title="考场思路"></a>考场思路</h3><p>同预习的斐波那契数列。<br>就是递推转移啦……<br>不过有人似乎直接打表……</p><h3 id="bug-分析-1"><a href="#bug-分析-1" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>还是要搭建好一会儿的，主要是保存并维持输出，还有计数，以及电路延迟问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计算机组成" scheme="https://toby-shi-cloud.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
    
    
    <category term="CO" scheme="https://toby-shi-cloud.github.io/tags/CO/"/>
    
  </entry>
  
  <entry>
    <title>使用junit4对java程序进行测试</title>
    <link href="https://toby-shi-cloud.github.io/posts/junittestforobjectoriented.html"/>
    <id>https://toby-shi-cloud.github.io/posts/junittestforobjectoriented.html</id>
    <published>2022-09-28T17:00:00.000Z</published>
    <updated>2023-03-30T18:34:27.340Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总所周知测试是写程序必不可少的一项。对于IDEA和java来说，junit测试是一个比较好的选择。</p><h2 id="安装junit"><a href="#安装junit" class="headerlink" title="安装junit"></a>安装junit</h2><p>首先在IDEA上安装junit的插件；</p><p>前往<a href="https://github.com/junit-team/junit4/wiki/Download-and-Install">官方github</a>下载junit；</p><p>在项目结构中添加junit依赖。</p><blockquote><p>具体可以参考：</p><p><a href="https://blog.csdn.net/gakki_200/article/details/106413351">IDEA中添加junit4的三种方法（详细步骤操作）</a></p><p><a href="https://blog.csdn.net/weixin_39595195/article/details/111313679">IDEA中使用JUnit4单元测试</a></p></blockquote><h2 id="使用junit"><a href="#使用junit" class="headerlink" title="使用junit"></a>使用junit</h2><p>junit最基础的使用，<a href="https://blog.csdn.net/weixin_39595195/article/details/111313679">IDEA中使用JUnit4单元测试</a>已经说的十分明白了，而且举的例子也非常出色，我在这里就不加赘述了。</p><p>大概来说，就是新建一个测试类，然后搞明白<code>@Before</code>，<code>@After</code>，<code>@Test</code>，<code>assertEquals</code>的基本意思就行了。</p><h2 id="模拟输入和捕获输出"><a href="#模拟输入和捕获输出" class="headerlink" title="模拟输入和捕获输出"></a>模拟输入和捕获输出</h2><p>上面junit的最基本的用法是测试方法或者类的行为是否正常，但是我们希望junit能够帮助我们测试样例数据，而我们的main方法的交互方式是输入和输出，而不是传参和返回，所以不能直接使用上面的方式。</p><p>因此我们通过输入输出重定向的方式来模拟输入和捕获输出。可以写以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                2021/7/1-Jack@JayChou :"Hello!";2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/5-JayChou@Mike :"emmmm";         2021/7/8-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou:"Hahaha"; 2021/5/3-Mike:"he@buaaer is unhappy";                END_OF_MESSAGE                qdate 2021/7/1                qsend "JayChou"                qrecv "buaaer"                """</span><span class="token punctuation">;</span> <span class="token comment">// 多行字符串，这里填样例输入</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                2021/7/1-Jack@JayChou :"Hello!";                2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/5-JayChou@Mike :"emmmm";                2021/7/8-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou:"Hahaha";                2021/7/3-JayChou@buaaer :"Hahaha";                2021/7/8-JayChou@buaaer :"Hahaha";                2021/5/3-Mike:"he@buaaer is unhappy";                """</span><span class="token punctuation">;</span> <span class="token comment">// 多行字符串，这里填样例输出</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里根据实际情况replace。一般来说是需要replace的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读入以及多组数据"><a href="#文件读入以及多组数据" class="headerlink" title="文件读入以及多组数据"></a>文件读入以及多组数据</h2><p>有的时候，输入输出会特别的长，或者输入输出有很多组，使用上面这个死板的方法就会显得非常臃肿。所以我们需要进行文件读入。</p><h3 id="文件读入"><a href="#文件读入" class="headerlink" title="文件读入"></a>文件读入</h3><p>使用<code>BufferedReader</code>和<code>FileReader</code>可以之间读取一个文件中的全部字符，并将其转化为<code>String</code>，具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多组数据"><a href="#多组数据" class="headerlink" title="多组数据"></a>多组数据</h3><p>junit提供了一种运行多组测试的方式：<code>Parameterized</code></p><p>具体来说，就是当你使用<code>@RunWith (Parameterized.class)</code>修饰<code>class</code>时，junit会首先调用被<code>@Parameterized.Parameters</code>修饰的<code>static</code>方法，这个方法必须返回一个<code>Collection</code>。然后junit会遍历这个<code>Collection</code>，把遍历到的值传入<code>class</code>的构造方法中，生成一个测试类的对象。然后再运行<code>@Test</code>方法。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>这里我写了一种文件读入的方法，大家可以直接使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span> <span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublicTest</span> <span class="token comment">// 类名根据需要重构</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">"./test/public_test"</span><span class="token punctuation">;</span> <span class="token comment">// 测试数据目录</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">=</span> <span class="token string">".in"</span><span class="token punctuation">;</span> <span class="token comment">// 测试点输入文件后缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_OUT</span> <span class="token operator">=</span> <span class="token string">".out"</span><span class="token punctuation">;</span> <span class="token comment">// 测试点输出文件后缀</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expectedFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PublicTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileName <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedFileName <span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span> <span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Parameterized.Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fInMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fOutMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> fs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> fs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>            <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            suffix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fInMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fOutMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> fInMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> in <span class="token operator">=</span> fInMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> out <span class="token operator">=</span> fOutMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to have a corresponding out file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pair <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PATH</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> out<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            testData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> testData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试结果如下：</p><p><img src="https://s2.loli.net/2022/09/29/cixBL2OV8ApmReu.png"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>注意测试是不能添加到平台上进行评测的（会CE），所以我们必须要采用git多分支的方式进行。</p><p>通常的做法是，我们首先master分支中创建README，然后commit，之后进行<code>git checkout -b develop</code>。一切改动都在<code>develop</code>分支进行。测试无误后，执行<code>git checkout master</code>以及<code>git checkout develop src/*</code>即可提交并推送到远程仓库。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从课程网站上下载数据非常麻烦，所以如果你有一个自动下载脚本的话……</p><hr><h2 id="2022年10月2日-更新"><a href="#2022年10月2日-更新" class="headerlink" title="2022年10月2日 更新"></a>2022年10月2日 更新</h2><p>如果你运行测试出错了却找不到哪个文件出错了的话，可以在80行左右的位置，runTest方法里面，加入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File In: "</span> <span class="token operator">+</span> inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File Ans: "</span> <span class="token operator">+</span> expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以看见读入的文件是哪一个了，如下图所示：</p><p><img src="https://s2.loli.net/2022/10/02/1DXyfgjhkOl8MFH.png"></p><hr><h2 id="2022年10月4日-更新"><a href="#2022年10月4日-更新" class="headerlink" title="2022年10月4日 更新"></a>2022年10月4日 更新</h2><p>之前的测试类只能测试一个文件夹下的数据，不能测试一个文件夹下的子文件夹下的数据，因此做出改进。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span></span><span class="token class-name">Parameterized</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span> <span class="token punctuation">(</span><span class="token class-name">Parameterized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfiniteTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATH</span> <span class="token operator">=</span> <span class="token string">"./test"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_IN</span> <span class="token operator">=</span> <span class="token string">".in"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUFFIX_OUT</span> <span class="token operator">=</span> <span class="token string">".out"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> systemIn <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> systemOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayInputStream</span> testIn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ByteArrayOutputStream</span> testOut<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> expectedFileName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfiniteTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inputFileName <span class="token operator">=</span> input<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expectedFileName <span class="token operator">=</span> expected<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>testOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">provideInput</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        testIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>testIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> testOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreSystemInputOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>systemIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>systemOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span> <span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The input file is "</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> inputFileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer file is "</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> expectedFileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringIn <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> testStringOut <span class="token operator">=</span> <span class="token function">readFromFile</span><span class="token punctuation">(</span>expectedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provideInput</span><span class="token punctuation">(</span>testStringIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MainClass</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span>testStringOut<span class="token punctuation">,</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fInMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fOutMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">assert</span> directory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getFiles</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>            <span class="token class-name">String</span> suffix<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            prefix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            suffix <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_IN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fInMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">SUFFIX_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fOutMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to be a test data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Parameterized.Parameters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> fInMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">File</span> in <span class="token operator">=</span> fInMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> out <span class="token operator">=</span> fOutMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Warning: file "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" does NOT appear to have a corresponding out file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pair <span class="token operator">=</span> <span class="token punctuation">{</span> in<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            testData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> testData<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面向对象" scheme="https://toby-shi-cloud.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="OO" scheme="https://toby-shi-cloud.github.io/tags/OO/"/>
    
    <category term="Java" scheme="https://toby-shi-cloud.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>复现 A Tutorial on Linear and Differential Cryptanalysis中差分分析的例子</title>
    <link href="https://toby-shi-cloud.github.io/posts/differentialcryptanalysis.html"/>
    <id>https://toby-shi-cloud.github.io/posts/differentialcryptanalysis.html</id>
    <published>2022-09-23T10:30:00.000Z</published>
    <updated>2022-09-23T11:58:12.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>黑历史++<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://s2.loli.net/2022/09/23/uRJw5VFbSkvoGXD.png"></p><h2 id="差分分析"><a href="#差分分析" class="headerlink" title="差分分析"></a>差分分析</h2><p>什么是差分分析呢？其实简单来说，就是考察明文的某一或某些位取反对密文的影响，所以这里的差分，实质就是异或的意思。其实感觉差分分析的过程和线性分析是基本一致的，所以这个博客我就写简单一点，实在记不住了还可以翻阅<a href="https://toby-shi-cloud.github.io/posts/linearcryptanalysis.html">上一篇博客</a>。虽然上一篇也不怎么详细（）</p><h2 id="Sbox拟合"><a href="#Sbox拟合" class="headerlink" title="Sbox拟合"></a>Sbox拟合</h2><p>与线性分析一致，我们不得不对sbox进行拟合。同样的，对于输入的每一种可能的差分，我们穷举所有的输入1（输入2=输入1$\oplus$输入差分）并记录由此带来的输出差分值（输出差分=输出1$\oplus$输出2），计算出输入差分和输出差分对应的概率关系。通过16*16的256次计算，我们就可以整理出一张sbox的拟合表格。</p><h2 id="子密钥分析"><a href="#子密钥分析" class="headerlink" title="子密钥分析"></a>子密钥分析</h2><p>同样的，我们选取概率较大的路径，可以得到明文对的一个差分和一个倒数第二轮输出的差分之间的概率，在论文中，选取的是$\Delta P  = [0000\ 1011\ 0000\ 0000]$和$\Delta U4 = [0000\ 0110\ 0000\ 0110]$，概率是$\frac{27}{1024}=0.0264$。</p><p>同样的我们穷举最后一轮相关联的密钥$k_2$和$k_4$，通过倒推得到$U4$，最后计算出当$\Delta P$成立时$\Delta U4$成立的概率即可。</p><p>由于我们选择的是高概率路径，所以最后成立概率最高的密钥就大概率是我们要找的密钥。</p><h3 id="复现结果"><a href="#复现结果" class="headerlink" title="复现结果"></a>复现结果</h3><p><img src="https://s2.loli.net/2022/09/23/UK4adYCN6ZJyBws.png"></p><p>其中子密钥用16进制表示，x表示未知（即和例子的路径无关）。</p><p>可见$k_2=2$且$k_4=4$的概率远超其他密钥组合，而且概率$0.0272863$与理论$\frac{27}{1024}=0.0264$非常接近。</p><h3 id="复现代码"><a href="#复现代码" class="headerlink" title="复现代码"></a>复现代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"structure.hh"</span></span><span class="token comment">// \delta P  = [0000 1011 0000 0000]</span><span class="token comment">// \delta U4 = [0000 0110 0000 0110]</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNamePlain <span class="token operator">=</span> <span class="token string">"plaintexts.hex"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNameCipher <span class="token operator">=</span> <span class="token string">"ciphertexts.hex"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> FileNameCsv <span class="token operator">=</span> <span class="token string">"diff.csv"</span><span class="token punctuation">;</span>ifstream fp<span class="token punctuation">,</span> fc<span class="token punctuation">;</span>ofstream fcsv<span class="token punctuation">;</span><span class="token keyword">int</span> pcPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// use -1 stands for undefined</span><span class="token keyword">const</span> u16 deltaP <span class="token operator">=</span> <span class="token number">0b0000101100000000</span><span class="token punctuation">;</span><span class="token keyword">const</span> u16 deltaU4 <span class="token operator">=</span> <span class="token number">0b0000011000000110</span><span class="token punctuation">;</span><span class="token keyword">inline</span> u16 <span class="token function">getU4</span><span class="token punctuation">(</span>u16 _C<span class="token punctuation">,</span> u16 key<span class="token punctuation">)</span><span class="token punctuation">{</span>    _C <span class="token operator">=</span> <span class="token function">key_mixing</span><span class="token punctuation">(</span>_C<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    _C <span class="token operator">=</span> <span class="token function">substitution</span><span class="token punctuation">(</span>_C<span class="token punctuation">,</span> SBOX_INV<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNamePlain<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    fc<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNameCipher<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> pcPair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        u16 P<span class="token punctuation">,</span> U<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>P<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>U<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        P <span class="token operator">=</span> P <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> P <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        U <span class="token operator">=</span> U <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> U <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">~</span>pcPair<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">)</span> num<span class="token operator">++</span><span class="token punctuation">;</span>        pcPair<span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token operator">=</span> U<span class="token punctuation">;</span>        <span class="token comment">// cerr &lt;&lt; hex &lt;&lt; P &lt;&lt; "-&gt;" &lt;&lt; U &lt;&lt; endl;</span>        <span class="token comment">// if(num == 100) break;</span>    <span class="token punctuation">}</span>    cerr <span class="token operator">&lt;&lt;</span>  <span class="token string">"num = "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 有效明密文对个数（剔除重复）</span>    fp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fcsv<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>FileNameCsv<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    fcsv <span class="token operator">&lt;&lt;</span> <span class="token string">"partial subkey"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"prob"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>u16 k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k2 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>u16 k4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k4 <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> k4<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        u16 key <span class="token operator">=</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> k4<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token generic-function"><span class="token function">i</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">65536</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token operator">^</span>deltaP<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>i <span class="token operator">^</span> deltaP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// cerr &lt;&lt; (!(pcPair[i] == -1) &amp;&amp; !(pcPair[i^deltaP] == -1)) &lt;&lt; endl;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">getU4</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">getU4</span><span class="token punctuation">(</span>pcPair<span class="token punctuation">[</span>i<span class="token operator">^</span>deltaP<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> deltaU4<span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> prob <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> sum<span class="token punctuation">;</span>        fcsv <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> k2 <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> k4 <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> prob <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>k4<span class="token punctuation">)</span> cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 有效明密文对组的组数（剔除没有配对成组的）</span>    <span class="token punctuation">}</span>    fcsv<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>structure.hh</code>是我自己写的一个头文件，里面是加密解密需要用到的函数以及Sbox和permutation连线的方式。由于加密解密以及分析都需要用到这些函数，所以就放在头文件里面了。</p><p>用cpp的原因是，bluebeen告诉我cpp比python快数十倍……python分析10万组明密文对要1分钟真的难受……</p><p>因为差分分析需要符合要求的明密文对组，即明文需要满足$\Delta P$的那个式子。所以是先把涉及到的明密文对存下来（代码里面是<code>pcPair</code>）然后在进行统计。</p><p>在进行差分分析的复现的时候，我突然想到一个问题，为什么论文上只用了1万对明密文对，而我用了10万对才能找出答案吗？我的复现究竟是出了什么样的问题呢？</p><p>其实在上面的复现代码中，输出<code>num</code>和<code>sum</code>就已经揭晓了答案。根据输出，我的10万对明密文，只有<code>num</code>=5万的有效明密文对，然后再安装$\Delta P$的要求配对后，只有<code>sum</code>=2万组。而论文直接说的就是1万组满足$\Delta P$的明密文组。其实我也就用了两倍的数据而已。所以我的数据看起来比论文中要精确一些，但是也没有精确太多。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]Heys,  Howard M . A Tutorial on Linear and Differential Cryptanalysis[J]. Cryptologia, 2002, 26(3):189-221.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="密码学" scheme="https://toby-shi-cloud.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="C/C++" scheme="https://toby-shi-cloud.github.io/tags/C-C/"/>
    
    <category term="密码分析" scheme="https://toby-shi-cloud.github.io/tags/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
